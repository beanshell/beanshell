#!/bin/java bsh.Interpreter

source("TestHarness.bsh");
source("Assert.bsh");
import bsh.*;

// assign floating point
t = 1.2345;
assertThat(t, instanceOf(Double.class));
assertEquals(1.2345, t, 0.0);
t = 340282346638528761234567890123456789012.3456;
assertThat(t, instanceOf(Double.class));
assertEquals(3.4028234663852875E38, t, 0.0);
t = 3402823612345678901234567890123456789012345678.00;
assertThat(t, instanceOf(Double.class));
assertEquals(3.402823612345679E45, t, 0.0);
t = 179769313486221571234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012.3456;
assertThat(t, instanceOf(Double.class));
assertEquals(1.7976931348622157E308, t, 0.0);
t = 179769313486241571234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012.3456;
assertThat(t, instanceOf(BigDecimal.class));
assertEquals(179769313486241571234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012.3456w, t);

//addition floating point
t = 1.2345 + 1.2345;
assertThat(t, instanceOf(Double.class));
assertEquals(2.469, t, 0.0);
t = Float.MAX_VALUE + 12345678901234567890123456789012f;
assertThat(t, instanceOf(Double.class));
assertEquals(3.4028235898420748E38, t, 0.0);
t = -Double.MAX_VALUE + 1E293;
assertThat(t, instanceOf(Double.class));
assertEquals(-1.7976931348623147E308, t, 0.0);
t = Double.MAX_VALUE + 1E293;
assertThat(t, instanceOf(BigDecimal.class));
assertEquals(1.7976931348623167E308w, t);
t = 1.7976931348623167E308 + 1.7976931348623167E308;
assertThat(t, instanceOf(BigDecimal.class));
assertEquals(3.5953862697246334E308w, t);

//subtraction floating point
t = 1.2345 - 1;
assertThat(t, instanceOf(Double.class));
assertEquals(0.23449999999999993, t, 0.0);
t = -Float.MAX_VALUE - 12345678901234567890123456789012f;
assertThat(t, instanceOf(Double.class));
assertEquals(-3.4028235898420748E38d, t, 0.0);
t = Float.MAX_VALUE - 12345678901234567890123456789012f;
assertThat(t, instanceOf(Double.class));
assertEquals(3.4028233429285024E38, t, 0.0);
t = -Float.MAX_VALUE - 0.0000001f;
assertThat(t, instanceOf(Double.class));
assertEquals(-3.4028235E38f, t, 0.0);
t = Double.MAX_VALUE - 1E293;
assertThat(t, instanceOf(Double.class));
assertEquals(1.7976931348623147E308d, t, 0.0);
t = -1.7976931348623147E308d - 1E292d;
assertThat(t, instanceOf(Double.class));
assertEquals(-1.797693134862315E308d, t, 0.0);
t = -1.7976931348623147E308 - 1E293;
assertThat(t, instanceOf(Double.class));
assertEquals(-1.7976931348623157E308d, t, 0.0);
t = -Double.MAX_VALUE - 1E293;
assertThat(t, instanceOf(BigDecimal.class));
assertEquals(-1.7976931348623167E+308w, t);
t = 1.7976931348623167E308 - 1E309;
assertThat(t, instanceOf(BigDecimal.class));
assertEquals(-8.2023068651376833E+308w, t);

//mulitiplication floating point
t = 1.0 * 2;
assertThat(t, instanceOf(Double.class));
assertEquals(2.0, t, 0.0);
t = Float.MAX_VALUE * 2;
assertThat(t, instanceOf(Double.class));
assertEquals(6.805646932770577E38, t, 0.0);
t = 2 * Double.MAX_VALUE;
assertThat(t, instanceOf(BigDecimal.class));
assertEquals(3.59538626972463140E308w, t);
t = 2 * 1.7976931348623167E308;
assertThat(t, instanceOf(BigDecimal.class));
assertEquals(3.59538626972463340E+308w, t);

// floatingpoint equality
assertTrue(3.59538626972463340E+308w == 3.59538626972463340E+308w);
assertTrue(797693134862316700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001w == 797693134862316700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001.0w);
assertTrue(797693134862316700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001w == 797693134862316700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001w);
assertTrue(179769313486231579999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999w == 179769313486231579999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999d);
assertTrue(179769313486231579999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999w.equals(179769313486231579999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999d));
assertTrue(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000w == 179769313486231579999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999d);
assertTrue(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000w.equals(179769313486231579999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999d));
assertTrue(179769313486231579999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999w == 179769313486231579999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.0w);
assertTrue(179769313486231579999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999w.equals(179769313486231579999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.0w));
assertFalse(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000w == 179769313486231579999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.0w);
assertFalse(179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000w.equals(179769313486231579999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.0w));
assertFalse(179769313486231579999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999w == 179769313486231579999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.1w);
assertFalse(179769313486231579999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999w.equals(179769313486231579999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999.1w));

//Division  floating point
t = 1.0 / 2;
assertThat(t, instanceOf(Double.class));
assertEquals(0.5, t, 0.0);
t = Float.MAX_VALUE / 2;
assertThat(t, instanceOf(Double.class));
assertEquals(1.7014117331926443E38, t, 0.0);
t = Double.MAX_VALUE / 2;
assertThat(t, instanceOf(Double.class));
assertEquals(8.988465674311579E307, t, 0.0);
t = 1.7976931348623167E616 / 2;
assertThat(t, instanceOf(BigDecimal.class));
assertEquals(8.9884656743115835E+615w, t);

//modulus floating point
t = 5.0 % 2;
assertThat(t, instanceOf(Double.class));
assertEquals(1.0, t, 0.0);
t = Float.MAX_VALUE % 2;
assertThat(t, instanceOf(Double.class));
assertEquals(0.0, t, 0.0);
t = Double.MAX_VALUE % 2;
assertThat(t, instanceOf(Double.class));
assertEquals(0.0, t, 0.0);
t = 1.7976931348623167E615 % 2;
assertThat(t, instanceOf(BigDecimal.class));
assertTrue(0E597w == t);

//to the power floating point
t = 2.0 ** 2;
assertThat(t, instanceOf(Double.class));
assertEquals(4.0, t, 0.0);
t = Float.MAX_VALUE ** 2;
assertThat(t, instanceOf(Double.class));
assertEquals(1.1579207543382391E77, t, 0.0);
t = Double.MAX_VALUE ** 2;
assertThat(t, instanceOf(BigDecimal.class));
assertEquals(3.23170060713109998320439596646649E616w, t);
t = 1.7976931348623167E308 ** 2;
assertThat(t, instanceOf(BigDecimal.class));
assertEquals(3.23170060713110357859066569109889E616w, t);

t = -7976931348623167E308;
assertThat(t, instanceOf(BigDecimal.class));
assertEquals(-7.976931348623167E+323w, t);
t = ~t;
assertThat(t, instanceOf(BigDecimal.class));
assertEquals(-7.976931348623167E+323w, t);
t = +t;
assertThat(t, instanceOf(BigDecimal.class));
assertEquals(-7.976931348623167E+323w, t);
t = -t;
assertThat(t, instanceOf(BigDecimal.class));
assertEquals(7.976931348623167E+323w, t);
t = ~t;
assertThat(t, instanceOf(BigDecimal.class));
assertEquals(-7.976931348623167E+323w, t);
t = -t;
assertThat(t, instanceOf(BigDecimal.class));
assertEquals(7.976931348623167E+323w, t);
t++;
assertThat(t, instanceOf(BigDecimal.class));
assertEquals(797693134862316700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001.0w, t);
t--;
assertThat(t, instanceOf(BigDecimal.class));
assertEquals(797693134862316700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.0w, t);


t = 1L;
assertThat(t, instanceOf(Long.class));
assertEquals(1L, t);

//assign integral
t = 32768;
assertThat(t, instanceOf(Integer.class));
assertEquals(32768, t);
t = 2147483648;
assertThat(t, instanceOf(Long.class));
assertEquals(2147483648, t);
t = 9223372036854775808;
assertThat(t, instanceOf(BigInteger.class));
assertEquals(9223372036854775808W, t);

//addition integral
t = Short.MAX_VALUE + 1;
assertThat(t, instanceOf(Integer.class));
assertEquals(32768, t);
t = Integer.MAX_VALUE + 1;
assertThat(t, instanceOf(Long.class));
assertEquals(2147483648, t);
t = -9223372036854775809 + 2;
assertThat(t, instanceOf(Long.class));
assertEquals(-9223372036854775807L, t);
t = 9223372036854775804L + 2L;
assertThat(t, instanceOf(Long.class));
assertEquals(9223372036854775806L, t);
t = -9223372036854775807L + 2L;
assertThat(t, instanceOf(Long.class));
assertEquals(-9223372036854775805L, t);
t = 9223372036854775807L + 2L;
assertThat(t, instanceOf(BigInteger.class));
assertEquals(9223372036854775809W, t);
t = -9223372036854775810 + 1;
assertThat(t, instanceOf(BigInteger.class));
assertEquals(-9223372036854775809W, t);
t = 9223372036854775808 + 2;
assertThat(t, instanceOf(BigInteger.class));
assertEquals(9223372036854775810W, t);

//subtraction integral
t = Short.MIN_VALUE - 1;
assertThat(t, instanceOf(Integer.class));
assertEquals(-32769, t);
t = Integer.MIN_VALUE - 1;
assertThat(t, instanceOf(Long.class));
assertEquals(-2147483649, t);
t = Long.MIN_VALUE - 1;
assertThat(t, instanceOf(BigInteger.class));
assertEquals(-9223372036854775809W, t);
t = 9223372036854775808 - 1;
assertThat(t, instanceOf(Long.class));
assertEquals(9223372036854775807L, t);

//multiplication integral
t = Short.MAX_VALUE * 2;
assertThat(t, instanceOf(Integer.class));
assertEquals(65534, t);
t = Integer.MAX_VALUE * 2;
assertThat(t, instanceOf(Long.class));
assertEquals(4294967294, t);
t = Long.MAX_VALUE * 2;
assertThat(t, instanceOf(BigInteger.class));
assertEquals(18446744073709551614W, t);
t = 2 * 9223372036854775808;
assertThat(t, instanceOf(BigInteger.class));
assertEquals(18446744073709551616W, t);

// integral equality
assertTrue(18446744073709551616W == 18446744073709551616.0W);
assertTrue(18446744073709551616W.equals(18446744073709551616.0W));
assertTrue(9223372036854775808W == 9223372036854775808f);
assertTrue(9223372036854775808 == 9223372036854775808f);
assertTrue(9223372036854775808 == 9223372036854775808d);
assertTrue(9223372036854775808w.equals(9223372036854775808d));
assertTrue(9223372036854775808W == 9223372036854775808.0W);
assertTrue(9223372036854775806W == 9223372036854775806);
assertTrue(9223372036854775806W == 9223372036854775806L);
assertTrue(9223372036854775806L == 9223372036854775806f);
assertTrue(9223372036854775806L == 9223372036854775806d);
assertTrue(9223372036854775806L.equals(9223372036854775806));
assertTrue(9223372036854775806 == 9223372036854775806L);
assertTrue(9223372036854775806L.equals(9223372036854775806.0W));
assertTrue(9223372036854775806L == 9223372036854775806.0W);
assertTrue(9223372036854775806L.equals(9223372036854775806d));
assertTrue(9223372036854775805L == 9223372036854775806f);
assertTrue(9223372036854775805L.equals(9223372036854775806f));
assertTrue(9223372036854773760L == 9223372036854773760d);
assertTrue(9223372036854773760L.equals(9223372036854773760d));
assertFalse(9223372036854773760L == 9223372036854774273d);
assertFalse(9223372036854773760L.equals(9223372036854774273d));
assertFalse(9223372036854775805 == 9223372036854775806L);
assertFalse(9223372036854775805L.equals(9223372036854775806));
assertFalse(9223372036854775805L == 9223372036854775806W);
assertFalse(9223372036854775805L.equals(9223372036854775806W));
assertFalse(9223372036854775805L == 9223372036854775806.0W);
assertFalse(9223372036854775805L.equals(9223372036854775806.0W));
assertTrue(18446744073709551614W == (2 * 9223372036854775807));
assertTrue(18446744073709551614W.equals(2 * 9223372036854775807));
assertTrue(18446744073709551614 == 18446744073709551614d);
assertTrue(18446744073709551614W.equals(18446744073709551614d));

//division integral
t = Short.MAX_VALUE / 2;
assertThat(t, instanceOf(Integer.class));
assertEquals(16383, t);
t = Integer.MAX_VALUE / 2;
assertThat(t, instanceOf(Integer.class));
assertEquals(1073741823, t);
t = Long.MAX_VALUE / 2;
assertThat(t, instanceOf(Long.class));
assertEquals(4611686018427387903, t);
t = 92233720368547758087656765676876 / 2;
assertThat(t, instanceOf(BigInteger.class));
assertEquals(46116860184273879043828382838438W, t);

//modulus integral
t = Short.MAX_VALUE % 2;
assertThat(t, instanceOf(Integer.class));
assertEquals(1, t);
t = Integer.MAX_VALUE % 2;
assertThat(t, instanceOf(Integer.class));
assertEquals(1, t);
t = Long.MAX_VALUE % 2;
assertThat(t, instanceOf(Integer.class));
assertEquals(1, t);
t = 922337203685477580876567656769 % 2;
assertThat(t, instanceOf(Integer.class));
assertEquals(1, t);

//to the power integral
t = Short.MAX_VALUE ** 2;
assertThat(t, instanceOf(Integer.class));
assertEquals(1073676289, t);
t = Integer.MAX_VALUE ** 2;
assertThat(t, instanceOf(Long.class));
assertEquals(4611686014132420608, t);
t = Short.MIN_VALUE ** 3;
assertThat(t, instanceOf(Long.class));
assertEquals(-35184372088832, t);
t = Long.MIN_VALUE ** 3;
assertThat(t, instanceOf(BigInteger.class));
assertEquals(-784637716923335095479473677900958302012794430558004314112W, t);
t = Long.MAX_VALUE ** 2;
assertThat(t, instanceOf(BigInteger.class));
assertEquals(85070591730234615847396907784232501249W, t);
t = 9223372036854775808 ** 2;
assertThat(t, instanceOf(BigInteger.class));
assertEquals(85070591730234615865843651857942052864W, t);

//shift operators
t = 9223372036854775808 << 2;
assertThat(t, instanceOf(BigInteger.class));
assertEquals(36893488147419103232W, t);
t = 9223372036854775808 @left_shift 2;
assertThat(t, instanceOf(BigInteger.class));
assertEquals(36893488147419103232W, t);
t = 9223372036854775808 >> 2;
assertThat(t, instanceOf(Long.class));
assertEquals(2305843009213693952, t);
t = 9223372036854775808 @right_shift 2;
assertThat(t, instanceOf(Long.class));
assertEquals(2305843009213693952, t);
t = 9223372036854775808  >>> 2;
assertThat(t, instanceOf(Long.class));
assertEquals(2305843009213693952, t);
t = -9223372036854775808 >>> 2;
assertThat(t, instanceOf(Long.class));
assertEquals(6917529027641081856, t);
t = 9223372036854775808 @right_unsigned_shift 2;
assertThat(t, instanceOf(Long.class));
assertEquals(2305843009213693952, t);
t = -9223372036854775808 @right_unsigned_shift 2;
assertThat(t, instanceOf(Long.class));
assertEquals(6917529027641081856, t);

t = +9223372036854775808 & 2;
assertThat(t, instanceOf(Integer.class));
assertEquals(0, t);
t = 9223372036854775808 @bitwise_and 2;
assertThat(t, instanceOf(Integer.class));
assertEquals(0, t);
t = 9223372036854775808 | 2;
assertThat(t, instanceOf(BigInteger.class));
assertEquals(9223372036854775810W, t);
t = 9223372036854775808 @bitwise_or 2;
assertThat(t, instanceOf(BigInteger.class));
assertEquals(9223372036854775810W, t);
t = 9223372036854775808 ^ 2;

t = ~9223372036854775808;
assertThat(t, instanceOf(BigInteger.class));
assertEquals(-9223372036854775809W, t);
t++;
assertThat(t, instanceOf(BigInteger.class));
assertEquals(-9223372036854775808W, t);
t--;
assertThat(t, instanceOf(BigInteger.class));
assertEquals(-9223372036854775809W, t);

// floating point precission

long lng = 0L;
assertEquals(0L, lng);
lng += 274877923328f;
assertEquals(274877906944L, lng);
lng += 274877923328f;
assertEquals(549755813888L, lng);

lng = 9223370937343148032L;
assertEquals(9223370937343148032L, lng);
lng += 274877923328f;
assertEquals(9223371212221054976L, lng);
lng += 274877923328f;
assertEquals(9223371487098961920L, lng);

lng = 9223370937343149056L;
assertEquals(9223370937343149056L, lng);
lng += 511d;
assertEquals(9223370937343149056L, lng);
lng += 511d;
assertEquals(9223370937343149056L, lng);
lng += 512d;
assertEquals(9223370937343150080L, lng);

lng = 9223370937343149056L;
assertEquals(9223370937343149056L, lng);
lng += 511.0w;
assertEquals(9223370937343149567L, lng);
lng += 511.0w;
assertEquals(9223370937343150078L, lng);
lng += 512.0w;
assertEquals(9223370937343150590L, lng);

complete();

