#!/bin/java bsh.Interpreter

source("TestHarness.bsh");
source("Assert.bsh");

// array access expressions
arr = (Integer) {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

// array index
assertThat(arr[0], equalTo(0));
assertThat(arr[1], equalTo(1));
assertThat(arr[4], equalTo(4));
assertThat(arr[-1], equalTo(9));
assertThat(arr[-2], equalTo(8));
assertThat(arr[-4], equalTo(6));
arr[-4] = 99;
assertThat(arr[-4], equalTo(99));
arr[-4] = 6;

// array range slice
slice = arr[0:];
assertThat(slice, valueString('{0I, 1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I}'));
assertThat(slice, arrayContaining(0, 1, 2, 3, 4, 5, 6, 7, 8, 9));
slice = arr[:10];
assertThat(slice, valueString('{0I, 1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I}'));
assertThat(slice, arrayContaining(0, 1, 2, 3, 4, 5, 6, 7, 8, 9));
slice = arr[0:10];
assertThat(slice, valueString('{0I, 1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I}'));
assertThat(slice, arrayContaining(0, 1, 2, 3, 4, 5, 6, 7, 8, 9));
slice = arr[-13:];
assertThat(slice, valueString('{0I, 1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I}'));
assertThat(slice, arrayContaining(0, 1, 2, 3, 4, 5, 6, 7, 8, 9));
slice = arr[-11:11];
assertThat(slice, valueString('{0I, 1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I}'));
assertThat(slice, arrayContaining(0, 1, 2, 3, 4, 5, 6, 7, 8, 9));
slice = arr[10:];
assertThat(slice, valueString('{}'));
assertThat(slice, emptyArray());
slice = arr[10:0];
assertThat(slice, valueString('{}'));
assertThat(slice, emptyArray());
slice = arr[12:];
assertThat(slice, valueString('{}'));
assertThat(slice, emptyArray());
slice = arr[8:];
assertThat(slice, valueString('{8I, 9I}'));
assertThat(slice, arrayContaining(8, 9));
slice = arr[-2:];
assertThat(slice, valueString('{8I, 9I}'));
assertThat(slice, arrayContaining(8, 9));
slice = arr[-3:-1:];
assertThat(slice, valueString('{7I, 8I}'));
assertThat(slice, arrayContaining(7, 8));

// array step slice
slice = arr[0:3:1];
assertThat(slice, valueString('{0I, 1I, 2I}'));
assertThat(slice, arrayContaining(0, 1, 2));
slice = arr[:10:2];
assertThat(slice, valueString('{0I, 2I, 4I, 6I, 8I}'));
assertThat(slice, arrayContaining(0, 2, 4, 6, 8));
slice = arr[::2];
assertThat(slice, valueString('{0I, 2I, 4I, 6I, 8I}'));
assertThat(slice, arrayContaining(0, 2, 4, 6, 8));
slice = arr[1:10:2];
assertThat(slice, valueString('{1I, 3I, 5I, 7I, 9I}'));
assertThat(slice, arrayContaining(1, 3, 5, 7, 9));
slice = arr[1::2];
assertThat(slice, valueString('{1I, 3I, 5I, 7I, 9I}'));
assertThat(slice, arrayContaining(1, 3, 5, 7, 9));
slice = arr[:10:3];
assertThat(slice, valueString('{0I, 3I, 6I, 9I}'));
assertThat(slice, arrayContaining(0, 3, 6, 9));
slice = arr[::3];
assertThat(slice, valueString('{0I, 3I, 6I, 9I}'));
assertThat(slice, arrayContaining(0, 3, 6, 9));
slice = arr[1:10:3];
assertThat(slice, valueString('{1I, 4I, 7I}'));
assertThat(slice, arrayContaining(1, 4, 7));
slice = arr[1::3];
assertThat(slice, valueString('{1I, 4I, 7I}'));
assertThat(slice, arrayContaining(1, 4, 7));
slice = arr[2::3];
assertThat(slice, valueString('{2I, 5I, 8I}'));
assertThat(slice, arrayContaining(2, 5, 8));
slice = arr[3::3];
assertThat(slice, valueString('{3I, 6I, 9I}'));
assertThat(slice, arrayContaining(3, 6, 9));
slice = arr[4::3];
assertThat(slice, valueString('{4I, 7I}'));
assertThat(slice, arrayContaining(4, 7));
slice = arr[5::3];
assertThat(slice, valueString('{5I, 8I}'));
assertThat(slice, arrayContaining(5, 8));
slice = arr[6::3];
assertThat(slice, valueString('{6I, 9I}'));
assertThat(slice, arrayContaining(6, 9));
slice = arr[7::3];
assertThat(slice, valueString('{7I}'));
assertThat(slice, arrayContaining(7));
slice = arr[8::3];
assertThat(slice, valueString('{8I}'));
assertThat(slice, arrayContaining(8));
slice = arr[9::3];
assertThat(slice, valueString('{9I}'));
assertThat(slice, arrayContaining(9));
slice = arr[2:8];
assertThat(slice, valueString('{2I, 3I, 4I, 5I, 6I, 7I}'));
assertThat(slice, arrayContaining(2, 3, 4, 5, 6, 7));
slice = arr[2:8:2];
assertThat(slice, valueString('{2I, 4I, 6I}'));
assertThat(slice, arrayContaining(2, 4, 6));
slice = arr[3:9];
assertThat(slice, valueString('{3I, 4I, 5I, 6I, 7I, 8I}'));
assertThat(slice, arrayContaining(3, 4, 5, 6, 7, 8));
slice = arr[3:9:2];
assertThat(slice, valueString('{3I, 5I, 7I}'));
assertThat(slice, arrayContaining(3, 5, 7));
slice = arr[::-2];
assertThat(slice, valueString('{9I, 7I, 5I, 3I, 1I}'));
assertThat(slice, arrayContaining(9, 7, 5, 3, 1));
slice = arr[1::-2];
assertThat(slice, valueString('{8I, 6I, 4I, 2I, 0I}'));
assertThat(slice, arrayContaining(8, 6, 4, 2, 0));

// array repeat *
arr = {"a"};
assertThat(arr, valueString('{"a"}'));
assertThat(arr, instanceOf(String[].class));
swap = arr * 5;
assertThat(arr, valueString('{"a"}'));
assertThat(swap, valueString('{"a", "a", "a", "a", "a"}'));
assertThat(swap, instanceOf(String[].class));
swap = arr * 0;
assertThat(arr, valueString('{"a"}'));
assertThat(swap, valueString('{}'));
assertThat(swap, instanceOf(String[].class));
swap = arr * -5;
assertThat(arr, valueString('{"a"}'));
assertThat(swap, valueString('{}'));
assertThat(swap, instanceOf(String[].class));
arr = {1, 2, 3};
assertThat(arr, valueString('{1I, 2I, 3I}'));
assertThat(arr, instanceOf(int[].class));
swap = arr * 3;
assertThat(arr, valueString('{1I, 2I, 3I}'));
assertThat(swap, valueString('{1I, 2I, 3I, 1I, 2I, 3I, 1I, 2I, 3I}'));
assertThat(swap, instanceOf(int[].class));
swap = arr * 1;
assertThat(arr, valueString('{1I, 2I, 3I}'));
assertThat(swap, valueString('{1I, 2I, 3I}'));
assertThat(swap, instanceOf(int[].class));
swap[1] = 99;
assertThat(arr, valueString('{1I, 2I, 3I}'));
assertThat(swap, valueString('{1I, 99I, 3I}'));
assertThat(swap, instanceOf(int[].class));
arr = {{1, 2, 3}};
assertThat(arr, valueString('{{1I, 2I, 3I}}'));
assertThat(arr, instanceOf(int[][].class));
swap = 3 * arr;
assertThat(arr, valueString('{{1I, 2I, 3I}}'));
assertThat(swap, valueString('{{1I, 2I, 3I}, {1I, 2I, 3I}, {1I, 2I, 3I}}'));
assertThat(swap, instanceOf(int[][].class));

// array concat +
arr = {1o, 2s, 3I};
assertThat(arr, valueString('{1I, 2I, 3I}'));
assertThat(arr, instanceOf(int[].class));
swap = arr + {4I, 5L};
assertThat(arr, valueString('{1I, 2I, 3I}'));
assertThat(swap, valueString('{1L, 2L, 3L, 4L, 5L}'));
assertThat(swap, instanceOf(long[].class));
swap = arr + new List {4I, 5L};
assertThat(arr, valueString('{1I, 2I, 3I}'));
assertThat(swap, valueString('{1I, 2I, 3I, 4L, 5L}'));
assertThat(swap, instanceOf(Object[].class));
swap = new List {4I, 5L} + arr;
assertThat(arr, valueString('{1I, 2I, 3I}'));
assertThat(swap, valueString('[4L, 5L, 1I, 2I, 3I]'));
assertThat(swap, instanceOf(List.class));
arr = {{1o, 2s, 3I}};
assertThat(arr, valueString('{{1I, 2I, 3I}}'));
assertThat(arr, instanceOf(int[][].class));
swap = arr + {{4I, 5L}};;
assertThat(arr, valueString('{{1I, 2I, 3I}}'));
assertThat(swap, valueString('{{1L, 2L, 3L}, {4L, 5L}}'));
assertThat(swap, instanceOf(long[][].class));
assertThat({'a','b'} + {'c','d'}, valueString("{'a', 'b', 'c', 'd'}"));
assertThat({1o}+{2o}, valueString('{1o, 2o}'));
assertThat({1o}+{2s}, valueString('{1s, 2s}'));
assertThat({1o}+{2I}, valueString('{1I, 2I}'));
assertThat({1o}+{2l}, valueString('{1L, 2L}'));
assertThat({1o}+{2f}, valueString('{1.0f, 2.0f}'));
assertThat({1o}+{2d}, valueString('{1.0d, 2.0d}'));
assertThat({{1o}} + {{2o}}, valueString('{{1o}, {2o}}'));
assertThat({{1o}} + {{2o, 3o}}, valueString('{{1o}, {2o, 3o}}'));
assertThat({{0o, 1o}} + {{2o}}, valueString('{{0o, 1o}, {2o}}'));
assertThat({{0o, 1o}} + {{2o, 3o}}, valueString('{{0o, 1o}, {2o, 3o}}'));
assertThat({1,2,null} + {4,null,6}, valueString('{1I, 2I, 0I, 4I, 0I, 6I}'));
assertThat({1w,null,null} + {null,null,6l}, valueString('{1W, 0W, 0W, 0W, 0W, 6W}'));
assertThat({1w,null,null} + {null,null,"FOO"}, valueString('{1W, null, null, null, null, "FOO"}'));
assertThat({true} + {false}, valueString('{true, false}'));
assertThat({{true}} + {{false}}, valueString('{{true}, {false}}'));

assertThat({{1, 2}} + {{3}}, valueString('{{1I, 2I}, {3I}}'));
assertThat({{1}} + {{2, 3}}, valueString('{{1I}, {2I, 3I}}'));
assertThat({{1}, {2, 3}} + {{4}, {5, 6}, {7}}, valueString('{{1I}, {2I, 3I}, {4I}, {5I, 6I}, {7I}}'));
assertThat({{{1},{2, 3}}} + {{{4}, {5, 6}, {7}}}, valueString('{{{1I}, {2I, 3I}}, {{4I}, {5I, 6I}, {7I}}}'));
assertThat({{{1}, {2, 3}}} + {{{4}, {5, 6}, {7}}, {{8}, {9}, {0}, {1}, {2}}},
           valueString('{{{1I}, {2I, 3I}}, {{4I}, {5I, 6I}, {7I}}, {{8I}, {9I}, {0I}, {1I}, {2I}}}'));
assertThat({1o, 2s, 3i} + {4l, 5f, 6d}, valueString('{1.0d, 2.0d, 3.0d, 4.0d, 5.0d, 6.0d}'));
assertThat({{1}} + new Integer[2][], valueString('{{1I}, null, null}'));
assertThat({{1}} + new Integer[2][], valueString('{{1I}, null, null}'));
assertThat({{1}} + new Integer[1][], valueString('{{1I}, null}'));
assertThat({{1}} + new Integer[0][], valueString('{{1I}}'));
assertThat(new Integer[2][] + {{1}}, valueString('{null, null, {1I}}'));
assertThat(new Integer[1][] + {{1}}, valueString('{null, {1I}}'));
assertThat(new Integer[0][] + {{1}}, valueString('{{1I}}'));
assertThat({{{1}}} + new Integer[0][][], valueString('{{{1I}}}'));
assertThat({{{1}}} + new Integer[0][0][], valueString('{{{1I}}}'));
assertThat(new Integer[0][][] + {{{1}}}, valueString('{{{1I}}}'));
assertThat(new Integer[0][0][] + {{{1}}}, valueString('{{{1I}}}'));
assertThat({{1}} + new int[2][], valueString('{{1I}, null, null}'));
assertThat({{1}} + new int[2][], valueString('{{1I}, null, null}'));
assertThat({{1}} + new int[1][], valueString('{{1I}, null}'));
assertThat({{1}} + new int[0][], valueString('{{1I}}'));
assertThat(new int[2][] + {{1}}, valueString('{null, null, {1I}}'));
assertThat(new int[1][] + {{1}}, valueString('{null, {1I}}'));
assertThat(new int[0][] + {{1}}, valueString('{{1I}}'));
assertThat({{{1}}} + new int[0][][], valueString('{{{1I}}}'));
assertThat({{{1}}} + new int[0][0][], valueString('{{{1I}}}'));
assertThat(new int[0][][] + {{{1}}}, valueString('{{{1I}}}'));
assertThat(new int[0][0][] + {{{1}}}, valueString('{{{1I}}}'));
assertThat({{{1}}} + {{null}}, valueString('{{{1I}}, {null}}'));
assertThat({{1}} + {null}, valueString('{{1I}, null}'));
assertThat({{}} + new Object[2][], valueString('{{}, null, null}'));
assertThat({{}} + new Object[1][], valueString('{{}, null}'));
assertThat({{}} + new Object[0][], valueString('{{}}'));
assertThat(new Object[2][] + {{}}, valueString('{null, null, {}}'));
assertThat(new Object[1][] + {{}}, valueString('{null, {}}'));
assertThat(new Object[0][] + {{}}, valueString('{{}}'));

//print(new Integer[2][]+{{1}});
//print({"a"} * 5);
//print(3 * {1o,2s,3l});
short[] shrtArr = {1o,2l};
assertThat(shrtArr, valueString('{1s, 2s}'));
shrtArr *= 2;
assertThat(shrtArr, valueString('{1s, 2s, 1s, 2s}'));
shrtArr += {1o,2s};
assertThat(shrtArr, valueString('{1s, 2s, 1s, 2s, 1s, 2s}'));

// list access expressions
list = new List {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

// list index
assertThat(list[0], equalTo(0));
assertThat(list[1], equalTo(1));
assertThat(list[Integer.valueOf(1)], equalTo(1));
assertThat(list[4], equalTo(4));
assertThat(list[-1], equalTo(9));
assertThat(list[-2], equalTo(8));
assertThat(list[-4], equalTo(6));
list[-4] = 99;
assertThat(list[-4], equalTo(99));
list[-4] = 6;

// list range slice
slice = list[0:];
assertThat(slice, valueString('[0I, 1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I]'));
assertThat(slice, contains(0, 1, 2, 3, 4, 5, 6, 7, 8, 9));
slice = list[:10];
assertThat(slice, valueString('[0I, 1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I]'));
assertThat(slice, contains(0, 1, 2, 3, 4, 5, 6, 7, 8, 9));
slice = list[0:10];
assertThat(slice, valueString('[0I, 1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I]'));
assertThat(slice, contains(0, 1, 2, 3, 4, 5, 6, 7, 8, 9));
slice = list[-13:];
assertThat(slice, valueString('[0I, 1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I]'));
assertThat(slice, contains(0, 1, 2, 3, 4, 5, 6, 7, 8, 9));
slice = list[-11:11];
assertThat(slice, valueString('[0I, 1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I]'));
assertThat(slice, contains(0, 1, 2, 3, 4, 5, 6, 7, 8, 9));
slice = list[10:];
assertThat(slice, valueString('[]'));
assertThat(slice, empty());
slice = list[10:0];
assertThat(slice, valueString('[]'));
assertThat(slice, empty());
slice = list[12:];
assertThat(slice, valueString('[]'));
assertThat(slice, empty());
slice = list[8:];
assertThat(slice, valueString('[8I, 9I]'));
assertThat(slice, contains(8, 9));
slice = list[-2:];
assertThat(slice, valueString('[8I, 9I]'));
assertThat(slice, contains(8, 9));
slice = list[-3:-1:];
assertThat(slice, valueString('[7I, 8I]'));
assertThat(slice, contains(7, 8));

// list step slice
slice = list[0:3:1];
assertThat(slice, valueString('[0I, 1I, 2I]'));
assertThat(slice, contains(0, 1, 2));
slice = list[:10:2];
assertThat(slice, valueString('[0I, 2I, 4I, 6I, 8I]'));
assertThat(slice, contains(0, 2, 4, 6, 8));
slice = list[::2];
assertThat(slice, valueString('[0I, 2I, 4I, 6I, 8I]'));
assertThat(slice, contains(0, 2, 4, 6, 8));
slice = list[1:10:2];
assertThat(slice, valueString('[1I, 3I, 5I, 7I, 9I]'));
assertThat(slice, contains(1, 3, 5, 7, 9));
slice = list[1::2];
assertThat(slice, valueString('[1I, 3I, 5I, 7I, 9I]'));
assertThat(slice, contains(1, 3, 5, 7, 9));
slice = list[:10:3];
assertThat(slice, valueString('[0I, 3I, 6I, 9I]'));
assertThat(slice, contains(0, 3, 6, 9));
slice = list[::3];
assertThat(slice, valueString('[0I, 3I, 6I, 9I]'));
assertThat(slice, contains(0, 3, 6, 9));
slice = list[1:10:3];
assertThat(slice, valueString('[1I, 4I, 7I]'));
assertThat(slice, contains(1, 4, 7));
slice = list[1::3];
assertThat(slice, valueString('[1I, 4I, 7I]'));
assertThat(slice, contains(1, 4, 7));
slice = list[2::3];
assertThat(slice, valueString('[2I, 5I, 8I]'));
assertThat(slice, contains(2, 5, 8));
slice = list[3::3];
assertThat(slice, valueString('[3I, 6I, 9I]'));
assertThat(slice, contains(3, 6, 9));
slice = list[4::3];
assertThat(slice, valueString('[4I, 7I]'));
assertThat(slice, contains(4, 7));
slice = list[5::3];
assertThat(slice, valueString('[5I, 8I]'));
assertThat(slice, contains(5, 8));
slice = list[6::3];
assertThat(slice, valueString('[6I, 9I]'));
assertThat(slice, contains(6, 9));
slice = list[7::3];
assertThat(slice, valueString('[7I]'));
assertThat(slice, contains(7));
slice = list[8::3];
assertThat(slice, valueString('[8I]'));
assertThat(slice, contains(8));
slice = list[9::3];
assertThat(slice, valueString('[9I]'));
assertThat(slice, contains(9));
slice = list[2:8];
assertThat(slice, valueString('[2I, 3I, 4I, 5I, 6I, 7I]'));
assertThat(slice, contains(2, 3, 4, 5, 6, 7));
slice = list[2:8:2];
assertThat(slice, valueString('[2I, 4I, 6I]'));
assertThat(slice, contains(2, 4, 6));
slice = list[3:9];
assertThat(slice, valueString('[3I, 4I, 5I, 6I, 7I, 8I]'));
assertThat(slice, contains(3, 4, 5, 6, 7, 8));
slice = list[3:9:2];
assertThat(slice, valueString('[3I, 5I, 7I]'));
assertThat(slice, contains(3, 5, 7));
slice = list[::-2];
assertThat(slice, valueString('[9I, 7I, 5I, 3I, 1I]'));
assertThat(slice, contains(9, 7, 5, 3, 1));
slice = list[1::-2];
assertThat(slice, valueString('[8I, 6I, 4I, 2I, 0I]'));
assertThat(slice, contains(8, 6, 4, 2, 0));

// list repeat *
list = new List {"a"};
assertThat(list, valueString('["a"]'));
assertThat(list, instanceOf(List.class));
swap = list * 5;
assertThat(list, valueString('["a"]'));
assertThat(swap, valueString('["a", "a", "a", "a", "a"]'));
assertThat(swap, instanceOf(List.class));
swap = list * 0;
assertThat(list, valueString('["a"]'));
assertThat(swap, valueString('[]'));
assertThat(swap, instanceOf(List.class));
swap = list * -5;
assertThat(list, valueString('["a"]'));
assertThat(swap, valueString('[]'));
assertThat(swap, instanceOf(List.class));
list = new List {1, 2, 3};
assertThat(list, valueString('[1I, 2I, 3I]'));
assertThat(swap, instanceOf(List.class));
swap = list * 3;
assertThat(list, valueString('[1I, 2I, 3I]'));
assertThat(swap, valueString('[1I, 2I, 3I, 1I, 2I, 3I, 1I, 2I, 3I]'));
assertThat(swap, instanceOf(List.class));
swap = list * 1;
assertThat(list, valueString('[1I, 2I, 3I]'));
assertThat(swap, valueString('[1I, 2I, 3I]'));
assertThat(swap, instanceOf(List.class));
swap[1] = 99;
assertThat(list, valueString('[1I, 2I, 3I]'));
assertThat(swap, valueString('[1I, 99I, 3I]'));
assertThat(swap, instanceOf(List.class));
list = new List {{1, 2, 3}};
assertThat(list, valueString('[{1I, 2I, 3I}]'));
assertThat(list, instanceOf(List.class));
swap = 3 * list;
assertThat(list, valueString('[{1I, 2I, 3I}]'));
assertThat(swap, valueString('[{1I, 2I, 3I}, {1I, 2I, 3I}, {1I, 2I, 3I}]'));
assertThat(swap, instanceOf(List.class));

// list concat +
list =  new List {1o, 2s, 3I};
assertThat(list, valueString('[1I, 2I, 3I]'));
assertThat(list, instanceOf(List.class));
swap = list +  new List {4I, 5L};
assertThat(list, valueString('[1I, 2I, 3I]'));
assertThat(swap, valueString('[1I, 2I, 3I, 4L, 5L]'));
assertThat(swap, instanceOf(List.class));
swap = list + {4I, 5L};
assertThat(list, valueString('[1I, 2I, 3I]'));
assertThat(swap, valueString('[1I, 2I, 3I, 4L, 5L]'));
assertThat(swap, instanceOf(List.class));
swap = {4I, 5L} + list;
assertThat(list, valueString('[1I, 2I, 3I]'));
assertThat(swap, valueString('{4L, 5L, 1I, 2I, 3I}'));
assertThat(swap, instanceOf(Object[].class));
list = new List {{1o, 2s, 3I}};
assertThat(list, valueString('[{1I, 2I, 3I}]'));
assertThat(list, instanceOf(List.class));
swap = list + new List {{4I, 5L}};;
assertThat(list, valueString('[{1I, 2I, 3I}]'));
assertThat(swap, valueString('[{1I, 2I, 3I}, {4L, 5L}]'));
assertThat(swap, instanceOf(List.class));
assertThat(new List {1} + new List{2, null}, valueString('[1I, 2I, 0I]'));
assertThat(new List {null, 1} + new List{2}, valueString('[0I, 1I, 2I]'));

// queue access expressions
queue = new Queue {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

// queue index
assertThat(queue[0], equalTo(0));
assertThat(queue[1], equalTo(1));
assertThat(queue[4], equalTo(4));
assertThat(queue[-1], equalTo(9));
assertThat(queue[-2], equalTo(8));
assertThat(queue[-4], equalTo(6));
queue[-4] = 99;
assertThat(queue[-4], equalTo(99));
queue[-4] = 6;

// queue range slice
slice = queue[0::];
assertThat(slice, valueString('[0I, 1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I]'));
assertThat(slice, contains(0, 1, 2, 3, 4, 5, 6, 7, 8, 9));
slice = queue[:10:];
assertThat(slice, valueString('[0I, 1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I]'));
assertThat(slice, contains(0, 1, 2, 3, 4, 5, 6, 7, 8, 9));
slice = queue[0:10:];
assertThat(slice, valueString('[0I, 1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I]'));
assertThat(slice, contains(0, 1, 2, 3, 4, 5, 6, 7, 8, 9));
slice = queue[-13::];
assertThat(slice, valueString('[0I, 1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I]'));
assertThat(slice, contains(0, 1, 2, 3, 4, 5, 6, 7, 8, 9));
slice = queue[-11:11:];
assertThat(slice, valueString('[0I, 1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I]'));
assertThat(slice, contains(0, 1, 2, 3, 4, 5, 6, 7, 8, 9));
slice = queue[10::];
assertThat(slice, valueString('[]'));
assertThat(slice, empty());
slice = queue[10:0:];
assertThat(slice, valueString('[]'));
assertThat(slice, empty());
slice = queue[12::];
assertThat(slice, valueString('[]'));
assertThat(slice, empty());
slice = queue[8::];
assertThat(slice, valueString('[8I, 9I]'));
assertThat(slice, contains(8, 9));
slice = queue[-2::];
assertThat(slice, valueString('[8I, 9I]'));
assertThat(slice, contains(8, 9));
slice = queue[-3:-1:];
assertThat(slice, valueString('[7I, 8I]'));
assertThat(slice, contains(7, 8));

// queue step slice
slice = queue[0:3:1];
assertThat(slice, valueString('[0I, 1I, 2I]'));
assertThat(slice, contains(0, 1, 2));
slice = queue[:10:2];
assertThat(slice, valueString('[0I, 2I, 4I, 6I, 8I]'));
assertThat(slice, contains(0, 2, 4, 6, 8));
slice = queue[::2];
assertThat(slice, valueString('[0I, 2I, 4I, 6I, 8I]'));
assertThat(slice, contains(0, 2, 4, 6, 8));
slice = queue[1:10:2];
assertThat(slice, valueString('[1I, 3I, 5I, 7I, 9I]'));
assertThat(slice, contains(1, 3, 5, 7, 9));
slice = queue[1::2];
assertThat(slice, valueString('[1I, 3I, 5I, 7I, 9I]'));
assertThat(slice, contains(1, 3, 5, 7, 9));
slice = queue[:10:3];
assertThat(slice, valueString('[0I, 3I, 6I, 9I]'));
assertThat(slice, contains(0, 3, 6, 9));
slice = queue[::3];
assertThat(slice, valueString('[0I, 3I, 6I, 9I]'));
assertThat(slice, contains(0, 3, 6, 9));
slice = queue[1:10:3];
assertThat(slice, valueString('[1I, 4I, 7I]'));
assertThat(slice, contains(1, 4, 7));
slice = queue[1::3];
assertThat(slice, valueString('[1I, 4I, 7I]'));
assertThat(slice, contains(1, 4, 7));
slice = queue[2::3];
assertThat(slice, valueString('[2I, 5I, 8I]'));
assertThat(slice, contains(2, 5, 8));
slice = queue[3::3];
assertThat(slice, valueString('[3I, 6I, 9I]'));
assertThat(slice, contains(3, 6, 9));
slice = queue[4::3];
assertThat(slice, valueString('[4I, 7I]'));
assertThat(slice, contains(4, 7));
slice = queue[5::3];
assertThat(slice, valueString('[5I, 8I]'));
assertThat(slice, contains(5, 8));
slice = queue[6::3];
assertThat(slice, valueString('[6I, 9I]'));
assertThat(slice, contains(6, 9));
slice = queue[7::3];
assertThat(slice, valueString('[7I]'));
assertThat(slice, contains(7));
slice = queue[8::3];
assertThat(slice, valueString('[8I]'));
assertThat(slice, contains(8));
slice = queue[9::3];
assertThat(slice, valueString('[9I]'));
assertThat(slice, contains(9));
slice = queue[2:8];
assertThat(slice, valueString('[2I, 3I, 4I, 5I, 6I, 7I]'));
assertThat(slice, contains(2, 3, 4, 5, 6, 7));
slice = queue[2:8:2];
assertThat(slice, valueString('[2I, 4I, 6I]'));
assertThat(slice, contains(2, 4, 6));
slice = queue[3:9];
assertThat(slice, valueString('[3I, 4I, 5I, 6I, 7I, 8I]'));
assertThat(slice, contains(3, 4, 5, 6, 7, 8));
slice = queue[3:9:2];
assertThat(slice, valueString('[3I, 5I, 7I]'));
assertThat(slice, contains(3, 5, 7));
slice = queue[::-2];
assertThat(slice, valueString('[9I, 7I, 5I, 3I, 1I]'));
assertThat(slice, contains(9, 7, 5, 3, 1));
slice = queue[1::-2];
assertThat(slice, valueString('[8I, 6I, 4I, 2I, 0I]'));
assertThat(slice, contains(8, 6, 4, 2, 0));

// queue repeat *
queue = new Queue {"a"};
assertThat(queue, valueString('["a"]'));
assertThat(queue, instanceOf(Queue.class));
swap = queue * 5;
assertThat(queue, valueString('["a"]'));
assertThat(swap, valueString('["a", "a", "a", "a", "a"]'));
assertThat(swap, instanceOf(Queue.class));
swap = queue * 0;
assertThat(queue, valueString('["a"]'));
assertThat(swap, valueString('[]'));
assertThat(swap, instanceOf(Queue.class));
swap = queue * -5;
assertThat(queue, valueString('["a"]'));
assertThat(swap, valueString('[]'));
assertThat(swap, instanceOf(Queue.class));
queue = new Queue {1, 2, 3};
assertThat(queue, valueString('[1I, 2I, 3I]'));
assertThat(swap, instanceOf(Queue.class));
swap = queue * 3;
assertThat(queue, valueString('[1I, 2I, 3I]'));
assertThat(swap, valueString('[1I, 2I, 3I, 1I, 2I, 3I, 1I, 2I, 3I]'));
assertThat(swap, instanceOf(Queue.class));
swap = queue * 1;
assertThat(queue, valueString('[1I, 2I, 3I]'));
assertThat(swap, valueString('[1I, 2I, 3I]'));
assertThat(swap, instanceOf(Queue.class));
swap[1] = 99;
assertThat(queue, valueString('[1I, 2I, 3I]'));
assertThat(swap, valueString('[1I, 99I, 3I]'));
assertThat(swap, instanceOf(Queue.class));
queue = new Queue {{1, 2, 3}};
assertThat(queue, valueString('[{1I, 2I, 3I}]'));
assertThat(queue, instanceOf(Queue.class));
swap = 3 * queue;
assertThat(queue, valueString('[{1I, 2I, 3I}]'));
assertThat(swap, valueString('[{1I, 2I, 3I}, {1I, 2I, 3I}, {1I, 2I, 3I}]'));
assertThat(swap, instanceOf(Queue.class));

// queue concat +
queue =  new Queue {1o, 2s, 3I};
assertThat(queue, valueString('[1I, 2I, 3I]'));
assertThat(queue, instanceOf(Queue.class));
swap = queue +  new Queue {4I, 5L};
assertThat(queue, valueString('[1I, 2I, 3I]'));
assertThat(swap, valueString('[1I, 2I, 3I, 4L, 5L]'));
assertThat(swap, instanceOf(Queue.class));
swap = queue + {4I, 5L};
assertThat(queue, valueString('[1I, 2I, 3I]'));
assertThat(swap, valueString('[1I, 2I, 3I, 4L, 5L]'));
assertThat(swap, instanceOf(Queue.class));
swap = {4I, 5L} + queue;
assertThat(queue, valueString('[1I, 2I, 3I]'));
assertThat(swap, valueString('{4L, 5L, 1I, 2I, 3I}'));
assertThat(swap, instanceOf(Object[].class));
queue = new Queue {{1o, 2s, 3I}};
assertThat(queue, valueString('[{1I, 2I, 3I}]'));
assertThat(queue, instanceOf(Queue.class));
swap = queue + new Queue {{4I, 5L}};;
assertThat(queue, valueString('[{1I, 2I, 3I}]'));
assertThat(swap, valueString('[{1I, 2I, 3I}, {4L, 5L}]'));
assertThat(swap, instanceOf(Queue.class));



// list slice view
list = new List {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
assertThat(list, contains(0, 1, 2, 3, 4, 5, 6, 7, 8, 9));
assertThat(list[::2], contains(0, 2, 4, 6, 8));
assertThat(list[1::2], contains(1, 3, 5, 7, 9));
evens = list[::2] * 1;
assertThat(list, contains(0, 1, 2, 3, 4, 5, 6, 7, 8, 9));
list[::2].clear();
assertThat(list, contains(1, 3, 5, 7, 9));
odds = list * 1;
assertThat(evens, contains(0, 2, 4, 6, 8));
assertThat(odds, contains(1, 3, 5, 7, 9));
assertThat(list[::2], contains(1, 5, 9));
list[::2].clear();
assertThat(list, contains(3, 7));

// list slice view by reference
list = new List {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
assertThat(list, contains(0, 1, 2, 3, 4, 5, 6, 7, 8, 9));
slice = list[::2];
assertThat(slice, contains(0, 2, 4, 6, 8));
assertThat(slice[1], equalTo(2));
slice.add(1, 22);
assertThat(slice[1], equalTo(22));
assertThat(slice, contains(0, 22, 2, 4, 6, 8));
assertThat(list, contains(0, 1, 22, 2, 3, 4, 5, 6, 7, 8, 9));
slice[1]=33;
assertThat(slice[1], equalTo(33));
assertThat(slice, contains(0, 33, 2, 4, 6, 8));
assertThat(list, contains(0, 1, 33, 2, 3, 4, 5, 6, 7, 8, 9));
assertThat(slice.remove(1), equalTo(33));
assertThat(slice[1], equalTo(2));
assertThat(slice, contains(0, 2, 4, 6, 8));
assertThat(list, contains(0, 1, 2, 3, 4, 5, 6, 7, 8, 9));

// list slice view add all
list = new List {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
slice = list[::2];
assertThat(slice, contains(0, 2, 4, 6, 8));
sliceconcat = list[::2] + {11,22,33};
assertFalse(slice.addAll({}));
assertTrue(slice.addAll({11,22,33}));
assertThat(slice, equalTo(sliceconcat));
assertThat(slice, contains(0, 2, 4, 6, 8, 11, 22, 33));
assertThat(list, contains(0, 1, 2, 3, 4, 5, 6, 7, 8, 11, 22, 33, 9));
list = new List {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
slice = list[::2];
assertTrue(slice.addAll(1, (List) {11,22,33}));
assertThat(slice, contains(0, 11, 22, 33, 2, 4, 6, 8));
assertThat(list, contains(0, 1, 11, 22, 33, 2, 3, 4, 5, 6, 7, 8, 9));

//list slice view iterator
list = new List {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
iter = list[::2].listIterator(2);
assertEquals(4, iter.next());
assertEquals(4, iter.previous());
iter.add(66);
assertTrue(iter.hasPrevious());
assertEquals(66, iter.previous());
iter.set(88);
assertEquals(88, iter.next());
assertThat(list, contains(0, 1, 2, 3, 88, 4, 5, 6, 7, 8, 9));
iter.remove();
assertThat(list, contains(0, 1, 2, 3, 4, 5, 6, 7, 8, 9));

// list slice view sub list
list = new List {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
assertThat(list[1::2][1:2], equalTo(list[1::2].subList(1,2)));
assertThat(list[1::2], contains(1, 3, 5, 7, 9));
assertThat(list[1::2][1:2], contains(3));
list[1::2][1:2].clear();
assertThat(list[::1], contains(0, 1, 2, 4, 5, 6, 7, 8, 9));

// slice exceptions
assert(isEvalError('Use of invalid operator "/" with array', "arr /= 3;"));
assert(isEvalError("cannot assign to array slice", "{1,2}[0:1] = 1;"));
assert(isEvalError("array slice step cannot be zero", "{1,2}[::0];"));
assert(isEvalError("Cannot concat arrays with inconsistent dimensions.", "a={{1}}+{1};"));
assert(isEvalError("Use of invalid operator \"+\" with array or List type", "{1} + 2;"));
assert(isEvalError("Use of invalid operator \"+\" with array or List type", "2 + {1};"));
assert(isEvalError("Use of invalid operator \"+\" with array or List type", "1 + new List {1};"));
assert(isEvalError("Use of invalid operator \"+\" with array or List type", "new List {1} + 1;"));
assert(isEvalError("Use of non + operator with String", '"a" * 3;'));
assert(isEvalError("Use of non + operator with String", '3 * "b";'));
assert(isEvalError('Operator: "*" inappropriate for objects', "3 * new Object();"));

complete();
return;
