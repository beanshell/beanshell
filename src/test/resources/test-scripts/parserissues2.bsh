#!/bin/java bsh.Interpreter

source("TestHarness.bsh");
source("Assert.bsh");

import bsh.*;

/**
 * test that formal comments are picked up as special tokens
 */

/*
 * This comment is also a special token
 */

/**********************************
 * This comment is also a special token
 **********************************/

// This comment is also a special token

parser = new Parser(new FileReader(bsh.cwd+"/"+getSourceFileInfo()));
parser.setRetainComments(true);

assertFalse("parse line 1", parser.Line());
node = parser.popNode();
assertEquals("node 1 class", BSHAssignment.class, node.getClass());
assertEquals("node 1 comment count", 1, Parser.getAllCommentsBeforeNode(node).size());

assertFalse("parse line 2", parser.Line());
node = parser.popNode();
assertEquals("node 2 class", BSHAssignment.class, node.getClass());
assertEquals("node 2 comment count", 0, Parser.getAllCommentsBeforeNode(node).size());

assertFalse("parse line 3", parser.Line());
node = parser.popNode();
assertEquals("node 3 class", BSHImportDeclaration.class, node.getClass());
assertEquals("node 3 comment count", 0, Parser.getAllCommentsBeforeNode(node).size());

assertFalse("parse line 4", parser.Line());
node = parser.popNode();
assertEquals("node 4 class", BSHAssignment.class, node.getClass());
assertEquals("node 4 comment count", 4, Parser.getAllCommentsBeforeNode(node).size());
assertEquals("node 4 formal comment count", 2, Parser.getFormalCommentsBeforeNode(node).size());
assertTrue("Node 4 formal comment contains", Parser.getFormalCommentsBeforeNode(node).get(0).contains("test that formal comments are picked up"));

assertFalse("parse line 5", parser.Line());
node = parser.popNode();
assertEquals("node 5 class", BSHAssignment.class, node.getClass());
assertEquals("node 5 comment count", 0, Parser.getAllCommentsBeforeNode(node).size());

complete();
