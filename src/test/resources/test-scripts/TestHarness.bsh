#!/bin/java bsh.Interpreter

boolean test_failed=false;
boolean test_completed=false;
boolean test_warning=false;
String test_message="";
int test_flag = 0;

assert( boolean condition )
{
    if ( !condition )
    {
        super.test_message += "Test FAILED: "
            +"Line: "+ this.namespace.getInvocationLine()
            +" : "+this.namespace.getInvocationText()
            +" : in test: "+getSourceFileInfo();
//        print(super.test_message);
        super.test_failed = true;
    }
}
// prefix command text with expected
// exception message
isEvalError( String... text )
{
    boolean flag = false;
    int idx = text.length - 1;
    try {
        // eval in the namespace of whomever sourced this file.
        this.interpreter.eval( text[idx], this.caller.namespace );
    } catch ( bsh.EvalError e ) {
        if ( idx > 0 && !e.getMessage().contains(text[0]) ) {
            super.test_message = "\nExpected message: "+text[0]
                    +"\nbut found: "+e.getMessage() + ".\n";
            super.test_failed = true;
        } else
            flag = true;
    }
    return flag;
}

fail() {
    assert(false);
}

warning( s ) {
//    print("WARNING: "+s);
    super.test_warning=true;
}

complete() {
    super.test_completed = true;

//    if ( super.test_failed )
//        print( bsh.sourceFile + ": Complete: FAILED!");
//    else
//        print( bsh.sourceFile + ": Completed ok.");
}

flag() {
    return super.test_flag++;
}

