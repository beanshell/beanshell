#!/bin/java bsh.Interpreter

source("TestHarness.bsh");
source("Assert.bsh");
import bsh.BSHLiteral;

// char is not a string
assert('a' == 'a');
assert('a' != "a");
assert("\u3456".charAt(0) == '\u3456');
assert('\101' == 'A');
assert('\101' != "\101");
assert('A' == 65);
assert(new Character('a') == 'a');
assert(new Character("a".charAt(0)) == 'a');
assert(Character.valueOf('a') == 'a');
assert(Character.valueOf("a".charAt(0)) == 'a');
assert(!"abc".substring(2).equals('c'));
assert('a' instanceof bsh.Primitive);
assert('a'.getType() == Character.TYPE);

// not a char is a string
assert('' instanceof String);
assert("" instanceof String);
assert("a" instanceof String);
assert('ab' instanceof String);
assert("a" == "a");
assert("\132" == "Z");
assert('\488' == "\00488"); // not a valid char octal
assert('' == '');
assert('' == "");
assert("" == "");
assert('ab' == 'ab');
assert('ab' == "ab");
assert("ab" == "ab");
assert('ab'.equals('ab'));
assert('ab'.equals("ab"));
assert("ab".equals("ab"));
assert("ab".equals('ab'));
assert('abc'.equals('abc'));
assert('abc'.equals("abc"));
assert("abc".equals("abc"));
assert("abc".equals('abc'));
assert("abc".charAt(0) == 'a');
assert("abc".charAt(0) != "a");
assert("abc".substring(1).equals('bc'));
assert("abc".substring(1).equals("bc"));
assert("abc".substring(2).equals("c"));
assert("\"quoted\"" == '"quoted"');
assert('\'quoted\'' == "'quoted'");
assert('xb'.concat('xb').equals('xbxb'));

assertThat("a\bcde\fg", containsString("cde"));
assertThat("abc\8def", equalTo("abc8def"));
assertThat("abc\78def", endsWith("8def"));
assertThat("abc\378def", endsWith("8def"));
BSHLiteral.internStrings = false;
assertThat("abc\3def", endsWith("def"));
BSHLiteral.internStrings = true;

// additional edge cases
assertEquals('\n', '\12');
assertEquals('\n', '\012');
assertEquals("\n", "\12");
assertEquals("\n", "\012");
assertEquals("?7", '\777');
assertEquals("?7", "\777");
assertEquals("?77", '\7777');
assertEquals("?77", "\7777");
assertEquals("Is a question?", "Is a question\77");
assertEquals("a\\b".replace("\\","F"), "aFb");
assertEquals("a\\b".replace('\\','F'), "aFb");

// Long strings
out="\n";
for (x : 5)
  out += x + "\n";

aout = """
0
1
2
3
4
5
""";
assert(aout.equals(out));

assert("""
This is a long string
containing "a quote" within
the string.
""".contains('"a quote"'));

// String concatenation
a="foo";
a+="bar";
a+=5;
a+=null;
a+="a";

assert( a.equals("foobar5nulla") );

a='foo';
a+='bar';
a+=5;
a+=null;
a+='a';

assert( a.equals('foobar5nulla') );

b="foo"+"bar"+5;
assert(b.equals('foobar5'));

complete();
