#!/bin/java bsh.Interpreter

source("TestHarness.bsh");
source("Assert.bsh");

// test static method selection
assert( MethodSelection.get_static( (int)5 ) == Integer.TYPE );
assert( MethodSelection.get_static( (short)5 ) == Short.TYPE );
assert( MethodSelection.get_static( (long)5 ) == Long.TYPE );
assert( MethodSelection.get_static( (byte)5 ) == Byte.TYPE );
assert( MethodSelection.get_static( "foo" ) == String.class );
assert( MethodSelection.get_static( new Object() ) == Object.class );
assert( MethodSelection.get_static() == Void.TYPE);

// test dynamic method selection
m=new MethodSelection();
assert( m.get_dynamic( (int)5 ) == Integer.TYPE );
assert( m.get_dynamic( (short)5 ) == Short.TYPE );
assert( m.get_dynamic( (long)5 ) == Long.TYPE );
assert( m.get_dynamic( (byte)5 ) == Byte.TYPE );
assert( m.get_dynamic( "foo" ) == String.class );
assert( m.get_dynamic( new Object() ) == Object.class );
assert( m.get_dynamic() == Void.TYPE );

// bsh should recognize a less specific java compatible match over an
// extended (autoboxed, BeanShell specific, etc.) match
// Should be Integer.class not primitive Integer.TYPE (both available)
assert( m.get_dynamic( new Integer(4) ) == Integer.class );

// test constructor selection
m=new MethodSelection( (int)5 );
assert( m.constructedWith == Integer.TYPE );
m=new MethodSelection( (short)5 );
assert( m.constructedWith == Short.TYPE );
m=new MethodSelection( (long)5 );
assert( m.constructedWith == Long.TYPE );
m=new MethodSelection( (byte)5 );
assert( m.constructedWith == Byte.TYPE );
m=new MethodSelection( "foo" );
assert( m.constructedWith == String.class );
m=new MethodSelection( new Object() );
assert( m.constructedWith == Object.class );
m=new MethodSelection( "Hello", "World" );
assert( m.constructedWith == (new String[0]).getClass() );
assert( "two".equals(m.which) );
m=new MethodSelection( "Hello", "World", "This", "is", "me" );
assert( m.constructedWith == (new String[0]).getClass() );
assert( "three".equals(m.which) );


// Test methods with VarArgs
m=new MethodSelection();
assert( m.method2("Hello").equals("one") );
assert( m.method2("Hello", "World").equals("two") );
assert( m.method2("Hello", "World", "This", "is", "me").equals("three") );


// Test method selection with varying argument lists
m=new MethodSelection();
sb = new StringBuilder();
al = new ArrayList();
ia = new int[2];
strs = new String[2];
assert( m.method1("Hello").equals("one") );
assert( m.method1("Hello", strs).equals("two") );
assert( m.method1(sb, "Hello", al, ia).equals("three") );
assert( m.method1(sb, "Hello", al, ia, 2, "last").equals("four") );
assert( m.method1(sb, "Hello", strs, ia, 2, "last").equals("five") );

// Same as above but use some null values
assert( m.method1(sb, "Hello", al, null, 2, "last").equals("four") );
assert( m.method1(null, "Hello", al, null, 2, "last").equals("four") );


/*
 * Test method selection with null parameter
 * Related to issue #132
 */
Object x = null;
String str = String.valueOf(x);
assert("null".equals(str));

/*
 * Test method selection with override of array type
 * Related to issue #731
 */
method2( single ) {
   return single;
}

method2( String[] list ) {
   return method2( list[1] );
}

assertEquals( method2("a"), "a" );
assertEquals( method2(new String[] {"a","b","c"}), "b" );

complete();

