#!/bin/java bsh.Interpreter

source("TestHarness.bsh");
source("Assert.bsh");

// instanceof
nil = null;
assertFalse(nil instanceof Object);
assertFalse(null instanceof Object);
assertTrue(void instanceof bsh.Primitive);
assertTrue(5 instanceof bsh.Primitive);
assertTrue(5w instanceof bsh.Primitive);
assertTrue(5w instanceof BigInteger);
assertTrue(5w instanceof Number);
assertTrue(5 instanceof Integer);
assertTrue(5o instanceof Byte);
assertTrue(5s instanceof Short);
assertTrue(5l instanceof Long);
assertTrue(5f instanceof Float);
assertTrue(5d instanceof Double);
assertTrue(5.0w instanceof BigDecimal);
assertTrue('a' instanceof Character);
assertTrue(true instanceof Boolean);

// basic
byte b = (byte)2;
assert( isEvalError("cannot assign number 256 to type byte", "byte b = 256") );
assert( isEvalError("cannot assign number -129 to type byte", "byte b = -129") );
byte b = 0xff;
assertEquals(-1, b);
int unsignedByte = b;
assertEquals(255, unsignedByte);
assertEquals(255, (int) b);
byte b = -128;
assertEquals(-128, b);
assertEquals(128, (int) b);
byte b = -127;
assertEquals(-127, b);
assertEquals(129, (int) b);
int signedInt = -1;
assertEquals(-1, signedInt);

byte b = 2;
i=b;
assert( i == 2 );
char c = 'A';
char c = 5;
short s = (short)2;
short s = 2;
int i = 2;
float f = 3.0f;

// In Java float's don't get auto cast in declarations
//assert( isEvalError("float f = 3.0"));
float f = 3.0;

double d = 3.0;

// promote
double d1 = 3.0f;
assert( d1.getType() == Double.TYPE );
long l1 = 5;
assert( l1.getType() == Long.TYPE );
l1 = (byte)5;
assert( l1.getType() == Long.TYPE );

// basic assignment promotion
int i2 = (byte)5;
long l1 = 5;
assert(l1==5);
long l2 = b;
assert(l2==2);

long l3=(byte)2;

/*
    Unification of wrapper types with primitives
*/
Integer iw = 2;
Double dw = 2.0;
assert( iw == i );
assert( dw == b );

// preserve identity semantics
// .equal wrappers don't test ==
assert( !(iw == dw) );
assert( dw != iw );

assert( iw instanceof Integer );
assert( iw != null );
Integer in = null;
assert( in == null );

// Basic promotion of primitives
byte b1 = (byte)5;
short s1 = (short)5;
int i1 = 5;
long l1 = 5;
float f1 = 5.0f;
double d1 = 5.0;
char c1 = (char)42;

b1=s1;
assertThat(b1, instanceOf(Byte.TYPE));
assertThat(b1, equalTo(5o));
b1=i1;
assertThat(b1, instanceOf(Byte.TYPE));
assertThat(b1, equalTo(5o));
b1=l1;
assertThat(b1, instanceOf(Byte.TYPE));
assertThat(b1, equalTo(5o));
b1=f1;
assertThat(b1, instanceOf(Byte.TYPE));
assertThat(b1, equalTo(5o));
b1=d1;
assertThat(b1, instanceOf(Byte.TYPE));
assertThat(b1, equalTo(5o));
b1=c1;
assertThat(b1, instanceOf(Byte.TYPE));
assertThat(b1, equalTo(42o));
b1=5o;

s1=b1;
assertThat(s1, instanceOf(Short.TYPE));
assertThat(s1, equalTo(5S));
s1=i1;
assertThat(s1, instanceOf(Short.TYPE));
assertThat(s1, equalTo(5S));
s1=l1;
assertThat(s1, instanceOf(Short.TYPE));
assertThat(s1, equalTo(5S));
s1=f1;
assertThat(s1, instanceOf(Short.TYPE));
assertThat(s1, equalTo(5S));
s1=d1;
assertThat(s1, instanceOf(Short.TYPE));
assertThat(s1, equalTo(5S));
s1=c1;
assertThat(s1, instanceOf(Short.TYPE));
assertThat(s1, equalTo(42S));
s1=5S;

i1=b1;
assertThat(i1, instanceOf(Integer.TYPE));
assertThat(i1, equalTo(5));
i1=s1;
assertThat(i1, instanceOf(Integer.TYPE));
assertThat(i1, equalTo(5));
i1=l1;
assertThat(i1, instanceOf(Integer.TYPE));
assertThat(i1, equalTo(5));
i1=f1;
assertThat(i1, instanceOf(Integer.TYPE));
assertThat(i1, equalTo(5));
i1=d1;
assertThat(i1, instanceOf(Integer.TYPE));
assertThat(i1, equalTo(5));
i1=c1;
assertThat(i1, instanceOf(Integer.TYPE));
assertThat(i1, equalTo(42));
i1=5I;

l1=b1;
assertThat(l1, instanceOf(Long.TYPE));
assertThat(l1, equalTo(5L));
l1=s1;
assertThat(l1, instanceOf(Long.TYPE));
assertThat(l1, equalTo(5L));
l1=i1;
assertThat(l1, instanceOf(Long.TYPE));
assertThat(l1, equalTo(5L));
l1=f1;
assertThat(l1, instanceOf(Long.TYPE));
assertThat(l1, equalTo(5L));
l1=d1;
assertThat(l1, instanceOf(Long.TYPE));
assertThat(l1, equalTo(5L));
l1=c1;
assertThat(l1, instanceOf(Long.TYPE));
assertThat(l1, equalTo(42L));
l1=5L;

f1=b1;
assertThat(f1, instanceOf(Float.TYPE));
assertThat(f1, equalTo(5.0f));
f1=s1;
assertThat(f1, instanceOf(Float.TYPE));
assertThat(f1, equalTo(5.0f));
f1=i1;
assertThat(f1, instanceOf(Float.TYPE));
assertThat(f1, equalTo(5.0f));
f1=l1;
assertThat(f1, instanceOf(Float.TYPE));
assertThat(f1, equalTo(5.0f));
f1=d1;
assertThat(f1, instanceOf(Float.TYPE));
assertThat(f1, equalTo(5.0f));
f1=c1;
assertThat(f1, instanceOf(Float.TYPE));
assertThat(f1, equalTo(42.0f));
f1=5.0f;

d1=b1;
assertThat(d1, instanceOf(Double.TYPE));
assertThat(d1, equalTo(5.0d));
d1=s1;
assertThat(d1, instanceOf(Double.TYPE));
assertThat(d1, equalTo(5.0d));
d1=i1;
assertThat(d1, instanceOf(Double.TYPE));
assertThat(d1, equalTo(5.0d));
d1=l1;
assertThat(d1, instanceOf(Double.TYPE));
assertThat(d1, equalTo(5.0d));
d1=f1;
assertThat(d1, instanceOf(Double.TYPE));
assertThat(d1, equalTo(5.0d));
d1=c1;
assertThat(d1, instanceOf(Double.TYPE));
assertThat(d1, equalTo(42.0d));
d1=5.0d;

c1=b1;
assertThat(c1, instanceOf(Character.TYPE));
assertThat(c1, equalTo('\005'));
c1=s1;
assertThat(c1, instanceOf(Character.TYPE));
assertThat(c1, equalTo('\005'));
c1=i1;
assertThat(c1, instanceOf(Character.TYPE));
assertThat(c1, equalTo('\005'));
c1=l1;
assertThat(c1, instanceOf(Character.TYPE));
assertThat(c1, equalTo('\005'));
c1=f1;
assertThat(c1, instanceOf(Character.TYPE));
assertThat(c1, equalTo('\005'));
c1=d1;
assertThat(c1, instanceOf(Character.TYPE));
assertThat(c1, equalTo('\005'));
c1='*';
assertThat(c1, equalTo('*'));
assertThat(c1, equalTo((char)42));

// Numeric style promotion of primitive wrappers

// characters wrappers ok
Byte bw1 = (byte)5;
Short sw1 = (short)5;
Integer iw1 = 5;
Long lw1 = 5;
Float fw1 = 5.0f;
Double dw1 = 5.0;
Character cw1 = (char)42;
BigInteger bi1 = 5W;
BigDecimal bd1 = 5.0w;

bw1=s1;
assertThat(bw1, instanceOf(Byte.class));
assertThat(bw1, equalTo(5o));
bw1=i1;
assertThat(bw1, instanceOf(Byte.class));
assertThat(bw1, equalTo(5o));
bw1=l1;
assertThat(bw1, instanceOf(Byte.class));
assertThat(bw1, equalTo(5o));
bw1=f1;
assertThat(bw1, instanceOf(Byte.class));
assertThat(bw1, equalTo(5o));
bw1=d1;
assertThat(bw1, instanceOf(Byte.class));
assertThat(bw1, equalTo(5o));
bw1=sw1;
assertThat(bw1, instanceOf(Byte.class));
assertThat(bw1, equalTo(5o));
bw1=iw1;
assertThat(bw1, instanceOf(Byte.class));
assertThat(bw1, equalTo(5o));
bw1=lw1;
assertThat(bw1, instanceOf(Byte.class));
assertThat(bw1, equalTo(5o));
bw1=fw1;
assertThat(bw1, instanceOf(Byte.class));
assertThat(bw1, equalTo(5o));
bw1=dw1;
assertThat(bw1, instanceOf(Byte.class));
assertThat(bw1, equalTo(5o));
bw1=bi1;
assertThat(bw1, instanceOf(Byte.class));
assertThat(bw1, equalTo(5o));
bw1=bd1;
assertThat(bw1, instanceOf(Byte.class));
assertThat(bw1, equalTo(5o));
bw1=c1;
assertThat(bw1, instanceOf(Byte.class));
assertThat(bw1, equalTo(42o));
bw1=cw1;
assertThat(bw1, instanceOf(Byte.class));
assertThat(bw1, equalTo(42o));
assert(isEvalError("cannot assign number 256 to type byte", "bw1=256;"));
assert(isEvalError("cannot assign number -129 to type byte", "bw1=-129;"));
bw1=5o;
assertThat(bw1, equalTo(5o));
assertThat(bw1, equalTo(5O));

sw1=b1;
assertThat(sw1, instanceOf(Short.class));
assertThat(sw1, equalTo(5s));
sw1=i1;
assertThat(sw1, instanceOf(Short.class));
assertThat(sw1, equalTo(5s));
sw1=l1;
assertThat(sw1, instanceOf(Short.class));
assertThat(sw1, equalTo(5s));
sw1=f1;
assertThat(sw1, instanceOf(Short.class));
assertThat(sw1, equalTo(5s));
sw1=d1;
assertThat(sw1, instanceOf(Short.class));
assertThat(sw1, equalTo(5s));
sw1=bw1;
assertThat(sw1, instanceOf(Short.class));
assertThat(sw1, equalTo(5s));
sw1=iw1;
assertThat(sw1, instanceOf(Short.class));
assertThat(sw1, equalTo(5s));
sw1=lw1;
assertThat(sw1, instanceOf(Short.class));
assertThat(sw1, equalTo(5s));
sw1=fw1;
assertThat(sw1, instanceOf(Short.class));
assertThat(sw1, equalTo(5s));
sw1=dw1;
assertThat(sw1, instanceOf(Short.class));
assertThat(sw1, equalTo(5s));
sw1=bi1;
assertThat(sw1, instanceOf(Short.class));
assertThat(sw1, equalTo(5s));
sw1=bd1;
assertThat(sw1, instanceOf(Short.class));
assertThat(sw1, equalTo(5s));
sw1=c1;
assertThat(sw1, instanceOf(Short.class));
assertThat(sw1, equalTo(42s));
sw1=cw1;
assertThat(sw1, instanceOf(Short.class));
assertThat(sw1, equalTo(42s));
assert(isEvalError("cannot assign number 2147483647 to type short", "sw1=Integer.MAX_VALUE;"));
assert(isEvalError("cannot assign number -2147483648 to type short", "sw1=Integer.MIN_VALUE;"));
sw1=5S;
assertThat(sw1, equalTo(5s));
assertThat(sw1, equalTo(5S));

iw1=b1;
assertThat(iw1, instanceOf(Integer.class));
assertThat(iw1, equalTo(5));
iw1=s1;
assertThat(iw1, instanceOf(Integer.class));
assertThat(iw1, equalTo(5));
iw1=l1;
assertThat(iw1, instanceOf(Integer.class));
assertThat(iw1, equalTo(5));
iw1=f1;
assertThat(iw1, instanceOf(Integer.class));
assertThat(iw1, equalTo(5));
iw1=d1;
assertThat(iw1, instanceOf(Integer.class));
assertThat(iw1, equalTo(5));
iw1=bw1;
assertThat(iw1, instanceOf(Integer.class));
assertThat(iw1, equalTo(5));
iw1=sw1;
assertThat(iw1, instanceOf(Integer.class));
assertThat(iw1, equalTo(5));
iw1=lw1;
assertThat(iw1, instanceOf(Integer.class));
assertThat(iw1, equalTo(5));
iw1=fw1;
assertThat(iw1, instanceOf(Integer.class));
assertThat(iw1, equalTo(5));
iw1=dw1;
assertThat(iw1, instanceOf(Integer.class));
assertThat(iw1, equalTo(5));
iw1=bi1;
assertThat(iw1, instanceOf(Integer.class));
assertThat(iw1, equalTo(5));
iw1=bd1;
assertThat(iw1, instanceOf(Integer.class));
assertThat(iw1, equalTo(5));
iw1=c1;
assertThat(iw1, instanceOf(Integer.class));
assertThat(iw1, equalTo(42));
iw1=cw1;
assertThat(iw1, instanceOf(Integer.class));
assertThat(iw1, equalTo(42));
assert(isEvalError("cannot assign number 9223372036854775807 to type int", "iw1=Long.MAX_VALUE;"));
assert(isEvalError("cannot assign number -9223372036854775808 to type int", "iw1=Long.MIN_VALUE;"));
iw1=5I;
assertThat(iw1, equalTo(5));
assertThat(iw1, equalTo(5i));
assertThat(iw1, equalTo(5I));

lw1=b1;
assertThat(lw1, instanceOf(Long.class));
assertThat(lw1, equalTo(5L));
lw1=s1;
assertThat(lw1, instanceOf(Long.class));
assertThat(lw1, equalTo(5L));
lw1=i1;
assertThat(lw1, instanceOf(Long.class));
assertThat(lw1, equalTo(5L));
lw1=f1;
assertThat(lw1, instanceOf(Long.class));
assertThat(lw1, equalTo(5L));
lw1=d1;
assertThat(lw1, instanceOf(Long.class));
assertThat(lw1, equalTo(5L));
lw1=bw1;
assertThat(lw1, instanceOf(Long.class));
assertThat(lw1, equalTo(5L));
lw1=sw1;
assertThat(lw1, instanceOf(Long.class));
assertThat(lw1, equalTo(5L));
lw1=iw1;
assertThat(lw1, instanceOf(Long.class));
assertThat(lw1, equalTo(5L));
lw1=fw1;
assertThat(lw1, instanceOf(Long.class));
assertThat(lw1, equalTo(5L));
lw1=dw1;
assertThat(lw1, instanceOf(Long.class));
assertThat(lw1, equalTo(5L));
lw1=bi1;
assertThat(lw1, instanceOf(Long.class));
assertThat(lw1, equalTo(5L));
lw1=bd1;
assertThat(lw1, instanceOf(Long.class));
assertThat(lw1, equalTo(5L));
lw1=c1;
assertThat(lw1, instanceOf(Long.class));
assertThat(lw1, equalTo(42L));
lw1=cw1;
assertThat(lw1, instanceOf(Long.class));
assertThat(lw1, equalTo(42L));
assert(isEvalError("cannot assign number 3.4028235E38 to type long", "lw1=Float.MAX_VALUE;"));
assert(isEvalError("cannot assign number -3.4028235E38 to type long", "lw1=-Float.MAX_VALUE;"));
lw1=5L;
assertThat(lw1, equalTo(5l));
assertThat(lw1, equalTo(5L));

fw1=b1;
assertThat(fw1, instanceOf(Float.class));
assertThat(fw1, equalTo(5.0f));
fw1=s1;
assertThat(fw1, instanceOf(Float.class));
assertThat(fw1, equalTo(5.0f));
fw1=i1;
assertThat(fw1, instanceOf(Float.class));
assertThat(fw1, equalTo(5.0f));
fw1=l1;
assertThat(fw1, instanceOf(Float.class));
assertThat(fw1, equalTo(5.0f));
fw1=d1;
assertThat(fw1, instanceOf(Float.class));
assertThat(fw1, equalTo(5.0f));
fw1=bw1;
assertThat(fw1, instanceOf(Float.class));
assertThat(fw1, equalTo(5.0f));
fw1=sw1;
assertThat(fw1, instanceOf(Float.class));
assertThat(fw1, equalTo(5.0f));
fw1=iw1;
assertThat(fw1, instanceOf(Float.class));
assertThat(fw1, equalTo(5.0f));
fw1=lw1;
assertThat(fw1, instanceOf(Float.class));
assertThat(fw1, equalTo(5.0f));
fw1=dw1;
assertThat(fw1, instanceOf(Float.class));
assertThat(fw1, equalTo(5.0f));
fw1=bi1;
assertThat(fw1, instanceOf(Float.class));
assertThat(fw1, equalTo(5.0f));
fw1=bd1;
assertThat(fw1, instanceOf(Float.class));
assertThat(fw1, equalTo(5.0f));
fw1=c1;
assertThat(fw1, instanceOf(Float.class));
assertThat(fw1, equalTo(42.0f));
fw1=cw1;
assertThat(fw1, instanceOf(Float.class));
assertThat(fw1, equalTo(42.0f));
assert(isEvalError("cannot assign number 1.7976931348623157E308 to type float", "fw1=Double.MAX_VALUE;"));
assert(isEvalError("cannot assign number -1.7976931348623157E308 to type float", "fw1=-Double.MAX_VALUE;"));
fw1=5.0f;
assertThat(fw1, equalTo(5.0f));
assertThat(fw1, equalTo(5.0F));

dw1=b1;
assertThat(dw1, instanceOf(Double.class));
assertThat(dw1, equalTo(5.0d));
dw1=s1;
assertThat(dw1, instanceOf(Double.class));
assertThat(dw1, equalTo(5.0d));
dw1=i1;
assertThat(dw1, instanceOf(Double.class));
assertThat(dw1, equalTo(5.0d));
dw1=l1;
assertThat(dw1, instanceOf(Double.class));
assertThat(dw1, equalTo(5.0d));
dw1=f1;
assertThat(dw1, instanceOf(Double.class));
assertThat(dw1, equalTo(5.0d));
dw1=bw1;
assertThat(dw1, instanceOf(Double.class));
assertThat(dw1, equalTo(5.0d));
dw1=sw1;
assertThat(dw1, instanceOf(Double.class));
assertThat(dw1, equalTo(5.0d));
dw1=iw1;
assertThat(dw1, instanceOf(Double.class));
assertThat(dw1, equalTo(5.0d));
dw1=lw1;
assertThat(dw1, instanceOf(Double.class));
assertThat(dw1, equalTo(5.0d));
dw1=fw1;
assertThat(dw1, instanceOf(Double.class));
assertThat(dw1, equalTo(5.0d));
dw1=bi1;
assertThat(dw1, instanceOf(Double.class));
assertThat(dw1, equalTo(5.0d));
dw1=bd1;
assertThat(dw1, instanceOf(Double.class));
assertThat(dw1, equalTo(5.0d));
dw1=c1;
assertThat(dw1, instanceOf(Double.class));
assertThat(dw1, equalTo(42.0d));
dw1=cw1;
assertThat(dw1, instanceOf(Double.class));
assertThat(dw1, equalTo(42.0d));
assert(isEvalError("cannot assign number 3.59538626972463140E+308 to type Double", "dw1=Double.MAX_VALUE*2;"));
assert(isEvalError("cannot assign number -3.59538626972463140E+308 to type Double", "dw1=-Double.MAX_VALUE*2;"));
dw1=5.0d;
assertThat(dw1, equalTo(5.0d));
assertThat(dw1, equalTo(5.0D));

cw1=b1;
assertThat(cw1, instanceOf(Character.class));
assertThat(cw1, equalTo('\005'));
cw1=s1;
assertThat(cw1, instanceOf(Character.class));
assertThat(cw1, equalTo('\005'));
cw1=i1;
assertThat(cw1, instanceOf(Character.class));
assertThat(cw1, equalTo('\005'));
cw1=l1;
assertThat(cw1, instanceOf(Character.class));
assertThat(cw1, equalTo('\005'));
cw1=f1;
assertThat(cw1, instanceOf(Character.class));
assertThat(cw1, equalTo('\005'));
cw1=d1;
assertThat(cw1, instanceOf(Character.class));
assertThat(cw1, equalTo('\005'));
cw1=bw1;
assertThat(cw1, instanceOf(Character.class));
assertThat(cw1, equalTo('\005'));
cw1=sw1;
assertThat(cw1, instanceOf(Character.class));
assertThat(cw1, equalTo('\005'));
cw1=iw1;
assertThat(cw1, instanceOf(Character.class));
assertThat(cw1, equalTo('\005'));
cw1=lw1;
assertThat(cw1, instanceOf(Character.class));
assertThat(cw1, equalTo('\005'));
cw1=fw1;
assertThat(cw1, instanceOf(Character.class));
assertThat(cw1, equalTo('\005'));
cw1=dw1;
assertThat(cw1, instanceOf(Character.class));
assertThat(cw1, equalTo('\005'));
cw1=bi1;
assertThat(cw1, instanceOf(Character.class));
assertThat(cw1, equalTo('\005'));
cw1=bd1;
assertThat(cw1, instanceOf(Character.class));
assertThat(cw1, equalTo('\005'));
assert(isEvalError("cannot assign number 65537 to type char", "cw1=(char)65537;"));
assert(isEvalError("cannot assign number -1 to type char", "cw1=(char)-1;"));
cw1='*';
assertThat(cw1, equalTo('*'));
assertThat(cw1, equalTo((char) 42));

bi1=b1;
assertThat(bi1, instanceOf(BigInteger.class));
assertThat(bi1, equalTo(5W));
bi1=s1;
assertThat(bi1, instanceOf(BigInteger.class));
assertThat(bi1, equalTo(5W));
bi1=i1;
assertThat(bi1, instanceOf(BigInteger.class));
assertThat(bi1, equalTo(5W));
bi1=l1;
assertThat(bi1, instanceOf(BigInteger.class));
assertThat(bi1, equalTo(5W));
bi1=f1;
assertThat(bi1, instanceOf(BigInteger.class));
assertThat(bi1, equalTo(5W));
bi1=d1;
assertThat(bi1, instanceOf(BigInteger.class));
assertThat(bi1, equalTo(5W));
bi1=bw1;
assertThat(bi1, instanceOf(BigInteger.class));
assertThat(bi1, equalTo(5W));
bi1=sw1;
assertThat(bi1, instanceOf(BigInteger.class));
assertThat(bi1, equalTo(5W));
bi1=iw1;
assertThat(bi1, instanceOf(BigInteger.class));
assertThat(bi1, equalTo(5W));
bi1=lw1;
assertThat(bi1, instanceOf(BigInteger.class));
assertThat(bi1, equalTo(5W));
bi1=fw1;
assertThat(bi1, instanceOf(BigInteger.class));
assertThat(bi1, equalTo(5W));
bi1=dw1;
assertThat(bi1, instanceOf(BigInteger.class));
assertThat(bi1, equalTo(5W));
bi1=bd1;
assertThat(bi1, instanceOf(BigInteger.class));
assertThat(bi1, equalTo(5W));
bi1=c1;
assertThat(bi1, instanceOf(BigInteger.class));
assertThat(bi1, equalTo(42W));
bi1=cw1;
assertThat(bi1, instanceOf(BigInteger.class));
assertThat(bi1, equalTo(42W));
bi1=5W;
assertThat(bi1, equalTo(5w));
assertThat(bi1, equalTo(5W));

bd1=b1;
assertThat(bd1, instanceOf(BigDecimal.class));
assertThat(bd1, equalTo(5.0w));
bd1=s1;
assertThat(bd1, instanceOf(BigDecimal.class));
assertThat(bd1, equalTo(5.0w));
bd1=i1;
assertThat(bd1, instanceOf(BigDecimal.class));
assertThat(bd1, equalTo(5.0w));
bd1=l1;
assertThat(bd1, instanceOf(BigDecimal.class));
assertThat(bd1, equalTo(5.0w));
bd1=f1;
assertThat(bd1, instanceOf(BigDecimal.class));
assertThat(bd1, equalTo(5.0w));
bd1=d1;
assertThat(bd1, instanceOf(BigDecimal.class));
assertThat(bd1, equalTo(5.0w));
bd1=bw1;
assertThat(bd1, instanceOf(BigDecimal.class));
assertThat(bd1, equalTo(5.0w));
bd1=sw1;
assertThat(bd1, instanceOf(BigDecimal.class));
assertThat(bd1, equalTo(5.0w));
bd1=iw1;
assertThat(bd1, instanceOf(BigDecimal.class));
assertThat(bd1, equalTo(5.0w));
bd1=lw1;
assertThat(bd1, instanceOf(BigDecimal.class));
assertThat(bd1, equalTo(5.0w));
bd1=fw1;
assertThat(bd1, instanceOf(BigDecimal.class));
assertThat(bd1, equalTo(5.0w));
bd1=dw1;
assertThat(bd1, instanceOf(BigDecimal.class));
assertThat(bd1, equalTo(5.0w));
bd1=bi1;
assertThat(bd1, instanceOf(BigDecimal.class));
assertThat(bd1, equalTo(5.0w));
bd1=c1;
assertThat(bd1, instanceOf(BigDecimal.class));
assertThat(bd1, equalTo(42.0w));
bd1=cw1;
assertThat(bd1, instanceOf(BigDecimal.class));
assertThat(bd1, equalTo(42.0w));
bd1=5.0w;
assertThat(bd1, equalTo(5.0w));
assertThat(bd1, equalTo(5.0W));

assertTrue(bd1.equals(5.0));
assertTrue(bi1.equals(5));
assertFalse(bd1.equals(6.0));
assertFalse(bi1.equals(6));
assertFalse(bi1.equals("5"));
assertFalse(bi1.equals(true));
assertTrue(bi1.equals(bd1));
assertTrue((bi1 == iw1));

shrink = 21474;
assertThat(shrink, instanceOf(Integer.class));
shrink = -21474;
assertThat(shrink, instanceOf(Integer.class));
shrink = 2148483647;
assertThat(shrink, instanceOf(Long.class));
shrink = -2148483647;
assertThat(shrink, instanceOf(Long.class));
shrink = 92233720368547758071;
assertThat(shrink, instanceOf(BigInteger.class));
shrink = -92233720368547758071;
assertThat(shrink, instanceOf(BigInteger.class));
shrink = 3.4028235E37;
assertThat(shrink, instanceOf(Double.class));
shrink = -3.4028235E37;
assertThat(shrink, instanceOf(Double.class));
shrink = 3.4028235E57;
assertThat(shrink, instanceOf(Double.class));
shrink = -3.4028235E57;
assertThat(shrink, instanceOf(Double.class));
shrink = 1.7976931348623157E318;
assertThat(shrink, instanceOf(BigDecimal.class));
shrink = -1.7976931348623157E318;
assertThat(shrink, instanceOf(BigDecimal.class));


double d123=3.0;
float f123=3.0;
d123=f123;
assert( d123.getType() == Double.TYPE );
assert( f123.getType() == Float.TYPE );
f123=d123;
assert( d123.getType() == Double.TYPE );
assert( f123.getType() == Float.TYPE );

assert(isEvalError("d123=true"));
assert(isEvalError("d123=null"));
Integer nullInt = Integer.valueOf(123);
assertEquals(123, nullInt);
nullInt = (int)null;
assertEquals(0, nullInt);
nullInt = null;
assertNull(nullInt);
nullInt = 1 + (int)nullInt;
assertEquals(1, nullInt);

complete();
