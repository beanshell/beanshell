#!/bin/java bsh.Interpreter

source("TestHarness.bsh");
source("Assert.bsh");

// collection declarations
list = new List {1, 2, 3};
assertThat(list, valueString('[1I, 2I, 3I]'));
assertThat(list, instanceOf(List.class));
list = (List) {1, 2, 3};
assertThat(list, valueString('[1I, 2I, 3I]'));
assertThat(list, instanceOf(List.class));
List tlist = {1, 2, 3};
assertThat(tlist, valueString('[1I, 2I, 3I]'));
assertThat(tlist, instanceOf(List.class));
queue = new Queue {1, 2, 3};
assertThat(queue, valueString('[1I, 2I, 3I]'));
assertThat(queue, instanceOf(List.class));
assertThat(queue, instanceOf(Queue.class));
queue = (Queue) {1, 2, 3};
assertThat(queue, valueString('[1I, 2I, 3I]'));
assertThat(queue, instanceOf(List.class));
assertThat(queue, instanceOf(Queue.class));
Queue tqueue = {1, 2, 3};
assertThat(tqueue, valueString('[1I, 2I, 3I]'));
assertThat(tqueue, instanceOf(List.class));
assertThat(tqueue, instanceOf(Queue.class));
deque = new Deque {1, 2, 3};
assertThat(deque, valueString('[1I, 2I, 3I]'));
assertThat(deque, not(instanceOf(List.class)));
assertThat(deque, instanceOf(Deque.class));
deque = (Deque) {1, 2, 3};
assertThat(deque, valueString('[1I, 2I, 3I]'));
assertThat(deque, not(instanceOf(List.class)));
assertThat(deque, instanceOf(Deque.class));
Deque tdeque = {1, 2, 3};
assertThat(tdeque, valueString('[1I, 2I, 3I]'));
assertThat(tdeque, not(instanceOf(List.class)));
assertThat(tdeque, instanceOf(Deque.class));
set = new Set {1, 2, 3};
assertThat(set, valueString('[1I, 2I, 3I]'));
assertThat(set, not(instanceOf(List.class)));
assertThat(set, instanceOf(Set.class));
set = (Set) {1, 2, 3};
assertThat(set, valueString('[1I, 2I, 3I]'));
assertThat(set, not(instanceOf(List.class)));
assertThat(set, instanceOf(Set.class));
Set tset = {1, 2, 3};
assertThat(tset, valueString('[1I, 2I, 3I]'));
assertThat(tset, not(instanceOf(List.class)));
assertThat(tset, instanceOf(Set.class));


list = new List {"a"=1, "b"=2};
assertThat(list, valueString('["a"=1I, "b"=2I]'));
assertThat(list[0], instanceOf(Entry.class));
assertThat(list[1], instanceOf(Entry.class));
assertThat(list[0]["a"], equalTo(1I));
assertThat(list[1]["b"], equalTo(2I));
assertThat(list, instanceOf(List.class));
list = new List {new List {1o, 2s, 4i, 5}, new {"a"=1, "b"=2}};
assertThat(list, valueString('[[1I, 2I, 4I, 5I], {"a"=1I, "b"=2I}]'));
assertThat(list[0], instanceOf(List.class));
assertThat(list[1], instanceOf(Map.class));
assertThat(list[1]["a"], equalTo(1I));
assertThat(list[1]["b"], equalTo(2I));
assertThat(list, instanceOf(List.class));
list = {new List {1o, 2s, 4i, 5}, new List {"a"=1, "b"=2}};
assertThat(list, valueString('{[1I, 2I, 4I, 5I], ["a"=1I, "b"=2I]}'));
assertThat(list[0], instanceOf(List.class));
assertThat(list[1], instanceOf(List.class));
assertThat(list[1][0], instanceOf(Entry.class));
assertThat(list[1][1], instanceOf(Entry.class));
assertThat(list[1][0]["a"], equalTo(1I));
assertThat(list[1][1]["b"], equalTo(2I));
list[1][1]["b"] = 123;
assertThat(list, valueString('{[1I, 2I, 4I, 5I], ["a"=1I, "b"=123I]}'));
assertThat(list, instanceOf(List[].class));

// list type inference
list = new List {true, false};
assertThat(list, valueString('[true, false]'));
assertThat(list[0], instanceOf(Boolean.class));
assertThat(list, instanceOf(List.class));
list = new List {1o};
assertThat(list, valueString('[1o]'));
assertThat(list[0], instanceOf(Byte.class));
assertThat(list, instanceOf(List.class));
list = new List {1o, 2s};
assertThat(list, valueString('[1s, 2s]'));
assertThat(list[0], instanceOf(Short.class));
assertThat(list, instanceOf(List.class));
list = new List {1o, 2s, '\003'};
assertThat(list, valueString("['\001', '\002', '\003']"));
assertThat(list[0], instanceOf(Character.class));
assertThat(list, instanceOf(List.class));
list = new List {1o, 2s, '\003', 4i};
assertThat(list, valueString('[1I, 2I, 3I, 4I]'));
assertThat(list[0], instanceOf(Integer.class));
assertThat(list, instanceOf(List.class));
list = new List {1o, 2s, '\003', 4i, 5l};
assertThat(list, valueString('[1L, 2L, 3L, 4L, 5L]'));
assertThat(list[0], instanceOf(Long.class));
assertThat(list, instanceOf(List.class));
list = new List {1o, 2s, '\003', 4i, 5l, 6f};
assertThat(list, valueString('[1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f]'));
assertThat(list[0], instanceOf(Float.class));
assertThat(list, instanceOf(List.class));
list = new List {1o, 2s, '\003', 4i, 5l, 6f, 7d};
assertThat(list, valueString('[1.0d, 2.0d, 3.0d, 4.0d, 5.0d, 6.0d, 7.0d]'));
assertThat(list[0], instanceOf(Double.class));
assertThat(list, instanceOf(List.class));
list = new List {1o, 2s, '\003', 4i, 5l, 6f, 7d, 8w};
assertThat(list, valueString('[1W, 2W, 3W, 4W, 5W, 6W, 7W, 8W]'));
assertThat(list[0], instanceOf(BigInteger.class));
assertThat(list, instanceOf(List.class));
list = new List {1o, 2s, '\003', 4i, 5l, 6f, 7d, 8w, 9.0w};
assertThat(list, valueString('[1.0w, 2.0w, 3.0w, 4.0w, 5.0w, 6.0w, 7.0w, 8.0w, 9.0w]'));
assertThat(list[0], instanceOf(BigDecimal.class));
assertThat(list, instanceOf(List.class));

// queue type inference
queue = new Queue {true, false};
assertThat(queue, valueString('[true, false]'));
assertThat(queue[0], instanceOf(Boolean.class));
assertThat(queue, instanceOf(Queue.class));
assertThat(list, instanceOf(List.class));
queue = new Queue {1o};
assertThat(queue, valueString('[1o]'));
assertThat(queue[0], instanceOf(Byte.class));
assertThat(queue, instanceOf(Queue.class));
assertThat(list, instanceOf(List.class));
queue = new Queue {1o, 2s};
assertThat(queue, valueString('[1s, 2s]'));
assertThat(queue[0], instanceOf(Short.class));
assertThat(queue, instanceOf(Queue.class));
assertThat(list, instanceOf(List.class));
queue = new Queue {1o, 2s, '\003'};
assertThat(queue, valueString("['\001', '\002', '\003']"));
assertThat(queue[0], instanceOf(Character.class));
assertThat(queue, instanceOf(Queue.class));
assertThat(list, instanceOf(List.class));
queue = new Queue {1o, 2s, '\003', 4i};
assertThat(queue, valueString('[1I, 2I, 3I, 4I]'));
assertThat(queue[0], instanceOf(Integer.class));
assertThat(queue, instanceOf(Queue.class));
assertThat(list, instanceOf(List.class));
queue = new Queue {1o, 2s, '\003', 4i, 5l};
assertThat(queue, valueString('[1L, 2L, 3L, 4L, 5L]'));
assertThat(queue[0], instanceOf(Long.class));
assertThat(queue, instanceOf(Queue.class));
assertThat(list, instanceOf(List.class));
queue = new Queue {1o, 2s, '\003', 4i, 5l, 6f};
assertThat(queue, valueString('[1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f]'));
assertThat(queue[0], instanceOf(Float.class));
assertThat(queue, instanceOf(Queue.class));
assertThat(list, instanceOf(List.class));
queue = new Queue {1o, 2s, '\003', 4i, 5l, 6f, 7d};
assertThat(queue, valueString('[1.0d, 2.0d, 3.0d, 4.0d, 5.0d, 6.0d, 7.0d]'));
assertThat(queue[0], instanceOf(Double.class));
assertThat(queue, instanceOf(Queue.class));
assertThat(list, instanceOf(List.class));
queue = new Queue {1o, 2s, '\003', 4i, 5l, 6f, 7d, 8w};
assertThat(queue, valueString('[1W, 2W, 3W, 4W, 5W, 6W, 7W, 8W]'));
assertThat(queue[0], instanceOf(BigInteger.class));
assertThat(queue, instanceOf(Queue.class));
assertThat(list, instanceOf(List.class));
queue = new Queue {1o, 2s, '\003', 4i, 5l, 6f, 7d, 8w, 9.0w};
assertThat(queue, valueString('[1.0w, 2.0w, 3.0w, 4.0w, 5.0w, 6.0w, 7.0w, 8.0w, 9.0w]'));
assertThat(queue[0], instanceOf(BigDecimal.class));
assertThat(queue, instanceOf(Queue.class));
assertThat(list, instanceOf(List.class));

//deque type inference
deque = new Deque {true, false};
assertThat(deque, valueString('[true, false]'));
assertThat(deque.peek(), instanceOf(Boolean.class));
assertThat(deque, instanceOf(Deque.class));
deque = new Deque {1o};
assertThat(deque, valueString('[1o]'));
assertThat(deque.peek(), instanceOf(Byte.class));
assertThat(deque, instanceOf(Deque.class));
deque = new Deque {1o, 2s};
assertThat(deque, valueString('[1s, 2s]'));
assertThat(deque.peek(), instanceOf(Short.class));
assertThat(deque, instanceOf(Deque.class));
deque = new Deque {1o, 2s, '\003'};
assertThat(deque, valueString("['\001', '\002', '\003']"));
assertThat(deque.peek(), instanceOf(Character.class));
assertThat(deque, instanceOf(Deque.class));
deque = new Deque {1o, 2s, '\003', 4i};
assertThat(deque, valueString('[1I, 2I, 3I, 4I]'));
assertThat(deque.peek(), instanceOf(Integer.class));
assertThat(deque, instanceOf(Deque.class));
deque = new Deque {1o, 2s, '\003', 4i, 5l};
assertThat(deque, valueString('[1L, 2L, 3L, 4L, 5L]'));
assertThat(deque.peek(), instanceOf(Long.class));
assertThat(deque, instanceOf(Deque.class));
deque = new Deque {1o, 2s, '\003', 4i, 5l, 6f};
assertThat(deque, valueString('[1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f]'));
assertThat(deque.peek(), instanceOf(Float.class));
assertThat(deque, instanceOf(Deque.class));
deque = new Deque {1o, 2s, '\003', 4i, 5l, 6f, 7d};
assertThat(deque, valueString('[1.0d, 2.0d, 3.0d, 4.0d, 5.0d, 6.0d, 7.0d]'));
assertThat(deque.peek(), instanceOf(Double.class));
assertThat(deque, instanceOf(Deque.class));
deque = new Deque {1o, 2s, '\003', 4i, 5l, 6f, 7d, 8w};
assertThat(deque, valueString('[1W, 2W, 3W, 4W, 5W, 6W, 7W, 8W]'));
assertThat(deque.peek(), instanceOf(BigInteger.class));
assertThat(deque, instanceOf(Deque.class));
deque = new Deque {1o, 2s, '\003', 4i, 5l, 6f, 7d, 8w, 9.0w};
assertThat(deque, valueString('[1.0w, 2.0w, 3.0w, 4.0w, 5.0w, 6.0w, 7.0w, 8.0w, 9.0w]'));
assertThat(deque.peek(), instanceOf(BigDecimal.class));
assertThat(deque, instanceOf(Deque.class));

// set type inference
set = new Set {true, false};
assertThat(set, valueString('[true, false]'));
assertThat(set.iterator().next(), instanceOf(Boolean.class));
assertThat(set, instanceOf(Set.class));
set = new Set {1o};
assertThat(set, valueString('[1o]'));
assertThat(set.iterator().next(), instanceOf(Byte.class));
assertThat(set, instanceOf(Set.class));
set = new Set {1o, 2s};
assertThat(set, valueString('[1s, 2s]'));
assertThat(set.iterator().next(), instanceOf(Short.class));
assertThat(set, instanceOf(Set.class));
set = new Set {1o, 2s, '\003'};
assertThat(set, valueString("['\001', '\002', '\003']"));
assertThat(set.iterator().next(), instanceOf(Character.class));
assertThat(set, instanceOf(Set.class));
set = new Set {1o, 2s, '\003', 4i};
assertThat(set, valueString('[1I, 2I, 3I, 4I]'));
assertThat(set.iterator().next(), instanceOf(Integer.class));
assertThat(set, instanceOf(Set.class));
set = new Set {1o, 2s, '\003', 4i, 5l};
assertThat(set, valueString('[1L, 2L, 3L, 4L, 5L]'));
assertThat(set.iterator().next(), instanceOf(Long.class));
assertThat(set, instanceOf(Set.class));
set = new Set {1o, 2s, '\003', 4i, 5l, 6f};
assertThat(set, valueString('[1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f]'));
assertThat(set.iterator().next(), instanceOf(Float.class));
assertThat(set, instanceOf(Set.class));
set = new Set {1o, 2s, '\003', 4i, 5l, 6f, 7d};
assertThat(set, valueString('[1.0d, 2.0d, 3.0d, 4.0d, 5.0d, 6.0d, 7.0d]'));
assertThat(set.iterator().next(), instanceOf(Double.class));
assertThat(set, instanceOf(Set.class));
set = new Set {1o, 2s, '\003', 4i, 5l, 6f, 7d, 8w};
assertThat(set, valueString('[1W, 2W, 3W, 4W, 5W, 6W, 7W, 8W]'));
assertThat(set.iterator().next(), instanceOf(BigInteger.class));
assertThat(set, instanceOf(Set.class));
set = new Set {1o, 2s, '\003', 4i, 5l, 6f, 7d, 8w, 9.0w};
assertThat(set, valueString('[1.0w, 2.0w, 3.0w, 4.0w, 5.0w, 6.0w, 7.0w, 8.0w, 9.0w]'));
assertThat(set.iterator().next(), instanceOf(BigDecimal.class));
assertThat(set, instanceOf(Set.class));


complete();
return;
