#!/bin/java bsh.Interpreter

source("TestHarness.bsh");
source("Assert.bsh");

//null == null;
//complete();
//return;

// null String
String s = null;

assertEquals("null1", null + "1");
assertEquals("null1", s + 1);
assertEquals("1null", "1" + null);
assertEquals("1null", 1 + s);
assertEquals("nullnull", s + null);
assertEquals("nullnull", null + s);
assertTrue(null == s);
assertTrue(s == null);
assertTrue(s == s);
assertFalse(null != s);
assertFalse(s != null);
assertFalse(s != null);
FileWriter f = null;
assert(isEvalError('incomparable types: String and FileWriter', 's == f'));
assert(isEvalError('bad operand types for binary operator "-"', 's - 1'));
assert(isEvalError('bad operand types for binary operator "/"', 's / 1'));
assert(isEvalError('bad operand types for binary operator "%"', 's % 1'));
assert(isEvalError('bad operand types for binary operator "@mod"', 's @mod 1'));
assert(isEvalError('bad operand types for binary operator "**"', 's ** 1'));
assert(isEvalError('bad operand types for binary operator "@pow"', 's @pow 1'));
assert(isEvalError('bad operand types for binary operator "<<"', 's << 1'));
assert(isEvalError('bad operand types for binary operator "@left_shift"', 's @left_shift 1'));
assert(isEvalError('bad operand types for binary operator ">>"', 's >> 1'));
assert(isEvalError('bad operand types for binary operator "@right_shift"', 's @right_shift 1'));
assert(isEvalError('bad operand types for binary operator ">>>"', 's >>> 1'));
assert(isEvalError('bad operand types for binary operator "@right_unsigned_shift"', 's @right_unsigned_shift 1'));
assert(isEvalError('bad operand types for binary operator "|"', 's | 1'));
assert(isEvalError('bad operand types for binary operator "@bitwise_or"', 's @bitwise_or 1'));
assert(isEvalError('bad operand types for binary operator "^"', 's ^ 1'));
assert(isEvalError('bad operand types for binary operator "@bitwise_xor"', 's @bitwise_xor 1'));
assert(isEvalError('bad operand types for binary operator "&"', 's & 1'));
assert(isEvalError('bad operand types for binary operator "@bitwise_and"', 's @bitwise_and 1'));
assert(isEvalError('bad operand types for binary operator "=="', 's == 1'));
assert(isEvalError('bad operand types for binary operator "!="', 's != 1'));
assert(isEvalError('bad operand types for binary operator "<"', 's < 1'));
assert(isEvalError('bad operand types for binary operator "@lt"', 's @lt 1'));
assert(isEvalError('bad operand types for binary operator ">"', 's > 1'));
assert(isEvalError('bad operand types for binary operator "@gt"', 's @gt 1'));
assert(isEvalError('bad operand types for binary operator "<="', 's <= 1'));
assert(isEvalError('bad operand types for binary operator "@lteq"', 's @lteq 1'));
assert(isEvalError('bad operand types for binary operator ">="', 's >= 1'));
assert(isEvalError('bad operand types for binary operator "@gteq"', 's @gteq 1'));
assert(isEvalError('bad operand types for binary operator "||"', 's || 1'));
assert(isEvalError('bad operand types for binary operator "@or"', 's @or 1'));
assert(isEvalError('bad operand types for binary operator "&&"', 's && 1'));
assert(isEvalError('bad operand types for binary operator "@and"', 's @and 1'));
assert(isEvalError('bad operand types for binary operator "-"', '1 - s'));
assert(isEvalError('bad operand types for binary operator "/"', '1 / s'));
assert(isEvalError('bad operand types for binary operator "%"', '1 % s'));
assert(isEvalError('bad operand types for binary operator "@mod"', '1 @mod s'));
assert(isEvalError('bad operand types for binary operator "**"', '1 ** s'));
assert(isEvalError('bad operand types for binary operator "@pow"', '1 @pow s'));
assert(isEvalError('bad operand types for binary operator "<<"', '1 << s'));
assert(isEvalError('bad operand types for binary operator "@left_shift"', '1 @left_shift s'));
assert(isEvalError('bad operand types for binary operator ">>"', '1 >> s'));
assert(isEvalError('bad operand types for binary operator "@right_shift"', '1 @right_shift s'));
assert(isEvalError('bad operand types for binary operator ">>>"', '1 >>> s'));
assert(isEvalError('bad operand types for binary operator "@right_unsigned_shift"', '1 @right_unsigned_shift s'));
assert(isEvalError('bad operand types for binary operator "|"', '1 | s'));
assert(isEvalError('bad operand types for binary operator "@bitwise_or"', '1 @bitwise_or s'));
assert(isEvalError('bad operand types for binary operator "^"', '1 ^ s'));
assert(isEvalError('bad operand types for binary operator "@bitwise_xor"', '1 @bitwise_xor s'));
assert(isEvalError('bad operand types for binary operator "&"', '1 & s'));
assert(isEvalError('bad operand types for binary operator "@bitwise_and"', '1 @bitwise_and s'));
assert(isEvalError('bad operand types for binary operator "=="', '1 == s'));
assert(isEvalError('bad operand types for binary operator "!="', '1 != s'));
assert(isEvalError('bad operand types for binary operator "<"', '1 < s'));
assert(isEvalError('bad operand types for binary operator "@lt"', '1 @lt s'));
assert(isEvalError('bad operand types for binary operator ">"', '1 > s'));
assert(isEvalError('bad operand types for binary operator "@gt"', '1 @gt s'));
assert(isEvalError('bad operand types for binary operator "<="', '1 <= s'));
assert(isEvalError('bad operand types for binary operator "@lteq"', '1 @lteq s'));
assert(isEvalError('bad operand types for binary operator ">="', '1 >= s'));
assert(isEvalError('bad operand types for binary operator "@gteq"', '1 @gteq s'));
assert(isEvalError('bad operand types for binary operator "||"', '1 || s'));
assert(isEvalError('bad operand types for binary operator "@or"', '1 @or s'));
assert(isEvalError('bad operand types for binary operator "&&"', '1 && s'));
assert(isEvalError('bad operand types for binary operator "@and"', '1 @and s'));


// null Object
Object o = null;
assertEquals("null1", o + "1");
assertEquals("1null", "1" + o);
assertEquals("nullnull", s + o);
assertEquals("nullnull", o + s);
assertTrue(s == o);
assertTrue(o == s);
assertTrue(null == o);
assertTrue(o == null);
assertTrue(o == o);
assertFalse(null != o);
assertFalse(o != null);
assertFalse(o != o);
o = new Object();
assertTrue(null != o);
assertTrue(o != null);
assertTrue(o == o);
assertFalse(null == o);
assertFalse(o == null);
assertFalse(o == new Object());
assertFalse(o != o);
o = null;
assert(isEvalError('bad operand types for binary operator "+"', 'o + 1'));
assert(isEvalError('bad operand types for binary operator "-"', 'o - 1'));
assert(isEvalError('bad operand types for binary operator "/"', 'o / 1'));
assert(isEvalError('bad operand types for binary operator "%"', 'o % 1'));
assert(isEvalError('bad operand types for binary operator "@mod"', 'o @mod 1'));
assert(isEvalError('bad operand types for binary operator "**"', 'o ** 1'));
assert(isEvalError('bad operand types for binary operator "@pow"', 'o @pow 1'));
assert(isEvalError('bad operand types for binary operator "<<"', 'o << 1'));
assert(isEvalError('bad operand types for binary operator "@left_shift"', 'o @left_shift 1'));
assert(isEvalError('bad operand types for binary operator ">>"', 'o >> 1'));
assert(isEvalError('bad operand types for binary operator "@right_shift"', 'o @right_shift 1'));
assert(isEvalError('bad operand types for binary operator ">>>"', 'o >>> 1'));
assert(isEvalError('bad operand types for binary operator "@right_unsigned_shift"', 'o @right_unsigned_shift 1'));
assert(isEvalError('bad operand types for binary operator "|"', 'o | 1'));
assert(isEvalError('bad operand types for binary operator "@bitwise_or"', 'o @bitwise_or 1'));
assert(isEvalError('bad operand types for binary operator "^"', 'o ^ 1'));
assert(isEvalError('bad operand types for binary operator "@bitwise_xor"', 'o @bitwise_xor 1'));
assert(isEvalError('bad operand types for binary operator "&"', 'o & 1'));
assert(isEvalError('bad operand types for binary operator "@bitwise_and"', 'o @bitwise_and 1'));
assert(isEvalError('bad operand types for binary operator "=="', 'o == 1'));
assert(isEvalError('bad operand types for binary operator "!="', 'o != 1'));
assert(isEvalError('bad operand types for binary operator "<"', 'o < 1'));
assert(isEvalError('bad operand types for binary operator "@lt"', 'o @lt 1'));
assert(isEvalError('bad operand types for binary operator ">"', 'o > 1'));
assert(isEvalError('bad operand types for binary operator "@gt"', 'o @gt 1'));
assert(isEvalError('bad operand types for binary operator "<="', 'o <= 1'));
assert(isEvalError('bad operand types for binary operator "@lteq"', 'o @lteq 1'));
assert(isEvalError('bad operand types for binary operator ">="', 'o >= 1'));
assert(isEvalError('bad operand types for binary operator "@gteq"', 'o @gteq 1'));
assert(isEvalError('bad operand types for binary operator "||"', 'o || 1'));
assert(isEvalError('bad operand types for binary operator "@or"', 'o @or 1'));
assert(isEvalError('bad operand types for binary operator "&&"', 'o && 1'));
assert(isEvalError('bad operand types for binary operator "@and"', 'o @and 1'));
assert(isEvalError('bad operand types for binary operator "+"', '1 + o'));
assert(isEvalError('bad operand types for binary operator "-"', '1 - o'));
assert(isEvalError('bad operand types for binary operator "/"', '1 / o'));
assert(isEvalError('bad operand types for binary operator "%"', '1 % o'));
assert(isEvalError('bad operand types for binary operator "@mod"', '1 @mod o'));
assert(isEvalError('bad operand types for binary operator "**"', '1 ** o'));
assert(isEvalError('bad operand types for binary operator "@pow"', '1 @pow o'));
assert(isEvalError('bad operand types for binary operator "<<"', '1 << o'));
assert(isEvalError('bad operand types for binary operator "@left_shift"', '1 @left_shift o'));
assert(isEvalError('bad operand types for binary operator ">>"', '1 >> o'));
assert(isEvalError('bad operand types for binary operator "@right_shift"', '1 @right_shift o'));
assert(isEvalError('bad operand types for binary operator ">>>"', '1 >>> o'));
assert(isEvalError('bad operand types for binary operator "@right_unsigned_shift"', '1 @right_unsigned_shift o'));
assert(isEvalError('bad operand types for binary operator "|"', '1 | o'));
assert(isEvalError('bad operand types for binary operator "@bitwise_or"', '1 @bitwise_or o'));
assert(isEvalError('bad operand types for binary operator "^"', '1 ^ o'));
assert(isEvalError('bad operand types for binary operator "@bitwise_xor"', '1 @bitwise_xor o'));
assert(isEvalError('bad operand types for binary operator "&"', '1 & o'));
assert(isEvalError('bad operand types for binary operator "@bitwise_and"', '1 @bitwise_and o'));
assert(isEvalError('bad operand types for binary operator "=="', '1 == o'));
assert(isEvalError('bad operand types for binary operator "!="', '1 != o'));
assert(isEvalError('bad operand types for binary operator "<"', '1 < o'));
assert(isEvalError('bad operand types for binary operator "@lt"', '1 @lt o'));
assert(isEvalError('bad operand types for binary operator ">"', '1 > o'));
assert(isEvalError('bad operand types for binary operator "@gt"', '1 @gt o'));
assert(isEvalError('bad operand types for binary operator "<="', '1 <= o'));
assert(isEvalError('bad operand types for binary operator "@lteq"', '1 @lteq o'));
assert(isEvalError('bad operand types for binary operator ">="', '1 >= o'));
assert(isEvalError('bad operand types for binary operator "@gteq"', '1 @gteq o'));
assert(isEvalError('bad operand types for binary operator "||"', '1 || o'));
assert(isEvalError('bad operand types for binary operator "@or"', '1 @or o'));
assert(isEvalError('bad operand types for binary operator "&&"', '1 && o'));
assert(isEvalError('bad operand types for binary operator "@and"', '1 @and o'));

// null Integer wrapper class
Integer i = null;
assert(isEvalError('incomparable types: String and Integer', 's == i'));
assertEquals("null1", i + "1");
assertEquals("1null", "1" + i);
assertEquals("nullnull", s + i);
assertEquals("nullnull", i + s);
assertTrue(o == i);
assertTrue(i == o);
assertTrue(null == i);
assertTrue(i == null);
assertTrue(i == i);
assertFalse(null != i);
assertFalse(i != null);
assertFalse(i != i);
i = 1;
assertTrue(null != i);
assertTrue(i != null);
assertTrue(i == i);
assertTrue(i == 1);
assertTrue(i == Integer.valueOf(1));
assertFalse(null == i);
assertFalse(i == null);
assertFalse(i == new Integer(1));
assertFalse(i != i);
i = null;
assert(isEvalError('null value with binary operator "+"', 'i + 1'));
assert(isEvalError('null value with binary operator "-"', 'i - 1'));
assert(isEvalError('null value with binary operator "/"', 'i / 1'));
assert(isEvalError('null value with binary operator "%"', 'i % 1'));
assert(isEvalError('null value with binary operator "@mod"', 'i @mod 1'));
assert(isEvalError('null value with binary operator "**"', 'i ** 1'));
assert(isEvalError('null value with binary operator "@pow"', 'i @pow 1'));
assert(isEvalError('null value with binary operator "<<"', 'i << 1'));
assert(isEvalError('null value with binary operator "@left_shift"', 'i @left_shift 1'));
assert(isEvalError('null value with binary operator ">>"', 'i >> 1'));
assert(isEvalError('null value with binary operator "@right_shift"', 'i @right_shift 1'));
assert(isEvalError('null value with binary operator ">>>"', 'i >>> 1'));
assert(isEvalError('null value with binary operator "@right_unsigned_shift"', 'i @right_unsigned_shift 1'));
assert(isEvalError('null value with binary operator "|"', 'i | 1'));
assert(isEvalError('null value with binary operator "@bitwise_or"', 'i @bitwise_or 1'));
assert(isEvalError('null value with binary operator "^"', 'i ^ 1'));
assert(isEvalError('null value with binary operator "@bitwise_xor"', 'i @bitwise_xor 1'));
assert(isEvalError('null value with binary operator "&"', 'i & 1'));
assert(isEvalError('null value with binary operator "@bitwise_and"', 'i @bitwise_and 1'));
assert(isEvalError('null value with binary operator "=="', 'i == 1'));
assert(isEvalError('null value with binary operator "!="', 'i != 1'));
assert(isEvalError('null value with binary operator "<"', 'i < 1'));
assert(isEvalError('null value with binary operator "@lt"', 'i @lt 1'));
assert(isEvalError('null value with binary operator ">"', 'i > 1'));
assert(isEvalError('null value with binary operator "@gt"', 'i @gt 1'));
assert(isEvalError('null value with binary operator "<="', 'i <= 1'));
assert(isEvalError('null value with binary operator "@lteq"', 'i @lteq 1'));
assert(isEvalError('null value with binary operator ">="', 'i >= 1'));
assert(isEvalError('null value with binary operator "@gteq"', 'i @gteq 1'));
assert(isEvalError('bad operand types for binary operator "||"', 'i || 1'));
assert(isEvalError('bad operand types for binary operator "@or"', 'i @or 1'));
assert(isEvalError('bad operand types for binary operator "&&"', 'i && 1'));
assert(isEvalError('bad operand types for binary operator "@and"', 'i @and 1'));
assert(isEvalError('null value with binary operator "+"', '1 + i'));
assert(isEvalError('null value with binary operator "-"', '1 - i'));
assert(isEvalError('null value with binary operator "/"', '1 / i'));
assert(isEvalError('null value with binary operator "%"', '1 % i'));
assert(isEvalError('null value with binary operator "@mod"', '1 @mod i'));
assert(isEvalError('null value with binary operator "**"', '1 ** i'));
assert(isEvalError('null value with binary operator "@pow"', '1 @pow i'));
assert(isEvalError('null value with binary operator "<<"', '1 << i'));
assert(isEvalError('null value with binary operator "@left_shift"', '1 @left_shift i'));
assert(isEvalError('null value with binary operator ">>"', '1 >> i'));
assert(isEvalError('null value with binary operator "@right_shift"', '1 @right_shift i'));
assert(isEvalError('null value with binary operator ">>>"', '1 >>> i'));
assert(isEvalError('null value with binary operator "@right_unsigned_shift"', '1 @right_unsigned_shift i'));
assert(isEvalError('null value with binary operator "|"', '1 | i'));
assert(isEvalError('null value with binary operator "@bitwise_or"', '1 @bitwise_or i'));
assert(isEvalError('null value with binary operator "^"', '1 ^ i'));
assert(isEvalError('null value with binary operator "@bitwise_xor"', '1 @bitwise_xor i'));
assert(isEvalError('null value with binary operator "&"', '1 & i'));
assert(isEvalError('null value with binary operator "@bitwise_and"', '1 @bitwise_and i'));
assert(isEvalError('null value with binary operator "=="', '1 == i'));
assert(isEvalError('null value with binary operator "!="', '1 != i'));
assert(isEvalError('null value with binary operator "<"', '1 < i'));
assert(isEvalError('null value with binary operator "@lt"', '1 @lt i'));
assert(isEvalError('null value with binary operator ">"', '1 > i'));
assert(isEvalError('null value with binary operator "@gt"', '1 @gt i'));
assert(isEvalError('null value with binary operator "<="', '1 <= i'));
assert(isEvalError('null value with binary operator "@lteq"', '1 @lteq i'));
assert(isEvalError('null value with binary operator ">="', '1 >= i'));
assert(isEvalError('null value with binary operator "@gteq"', '1 @gteq i'));
assert(isEvalError('bad operand types for binary operator "||"', '1 || i'));
assert(isEvalError('bad operand types for binary operator "@or"', '1 @or i'));
assert(isEvalError('bad operand types for binary operator "&&"', '1 && i'));
assert(isEvalError('bad operand types for binary operator "@and"', '1 @and i'));
try {
    i + 1;
} catch (NullPointerException e) {
    assert(true);
} catch (ee) {
    fail();
}


// null Character wrapper
Character c = null;
assert(isEvalError('incomparable types: Integer and Character', 'i == c'));
assertEquals("null1", c + "1");
assertEquals("1null", "1" + c);
assertEquals("nullnull", s + c);
assertEquals("nullnull", c + s);
assertTrue(null == c);
assertTrue(c == null);
assertTrue(c == c);
assertFalse(null != c);
assertFalse(c != null);
assertFalse(c != c);
c = 'a';
assertTrue(null != c);
assertTrue(c != null);
assertTrue(c == c);
assertTrue(c == 97);
assertTrue(c == Character.valueOf('a'));
assertFalse(null == c);
assertFalse(c == null);
assertFalse(c == new Character('a'));
assertFalse(c != c);
c = null;
assert(isEvalError('null value with binary operator "+"', 'c + 1'));
assert(isEvalError('null value with binary operator "-"', 'c - 1'));
assert(isEvalError('null value with binary operator "/"', 'c / 1'));
assert(isEvalError('null value with binary operator "%"', 'c % 1'));
assert(isEvalError('null value with binary operator "@mod"', 'c @mod 1'));
assert(isEvalError('null value with binary operator "**"', 'c ** 1'));
assert(isEvalError('null value with binary operator "@pow"', 'c @pow 1'));
assert(isEvalError('null value with binary operator "<<"', 'c << 1'));
assert(isEvalError('null value with binary operator "@left_shift"', 'c @left_shift 1'));
assert(isEvalError('null value with binary operator ">>"', 'c >> 1'));
assert(isEvalError('null value with binary operator "@right_shift"', 'c @right_shift 1'));
assert(isEvalError('null value with binary operator ">>>"', 'c >>> 1'));
assert(isEvalError('null value with binary operator "@right_unsigned_shift"', 'c @right_unsigned_shift 1'));
assert(isEvalError('null value with binary operator "|"', 'c | 1'));
assert(isEvalError('null value with binary operator "@bitwise_or"', 'c @bitwise_or 1'));
assert(isEvalError('null value with binary operator "^"', 'c ^ 1'));
assert(isEvalError('null value with binary operator "@bitwise_xor"', 'c @bitwise_xor 1'));
assert(isEvalError('null value with binary operator "&"', 'c & 1'));
assert(isEvalError('null value with binary operator "@bitwise_and"', 'c @bitwise_and 1'));
assert(isEvalError('null value with binary operator "=="', 'c == 1'));
assert(isEvalError('null value with binary operator "!="', 'c != 1'));
assert(isEvalError('null value with binary operator "<"', 'c < 1'));
assert(isEvalError('null value with binary operator "@lt"', 'c @lt 1'));
assert(isEvalError('null value with binary operator ">"', 'c > 1'));
assert(isEvalError('null value with binary operator "@gt"', 'c @gt 1'));
assert(isEvalError('null value with binary operator "<="', 'c <= 1'));
assert(isEvalError('null value with binary operator "@lteq"', 'c @lteq 1'));
assert(isEvalError('null value with binary operator ">="', 'c >= 1'));
assert(isEvalError('null value with binary operator "@gteq"', 'c @gteq 1'));
assert(isEvalError('bad operand types for binary operator "||"', 'c || 1'));
assert(isEvalError('bad operand types for binary operator "@or"', 'c @or 1'));
assert(isEvalError('bad operand types for binary operator "&&"', 'c && 1'));
assert(isEvalError('bad operand types for binary operator "@and"', 'c @and 1'));
assert(isEvalError('null value with binary operator "+"', '1 + c'));
assert(isEvalError('null value with binary operator "-"', '1 - c'));
assert(isEvalError('null value with binary operator "/"', '1 / c'));
assert(isEvalError('null value with binary operator "%"', '1 % c'));
assert(isEvalError('null value with binary operator "@mod"', '1 @mod c'));
assert(isEvalError('null value with binary operator "**"', '1 ** c'));
assert(isEvalError('null value with binary operator "@pow"', '1 @pow c'));
assert(isEvalError('null value with binary operator "<<"', '1 << c'));
assert(isEvalError('null value with binary operator "@left_shift"', '1 @left_shift c'));
assert(isEvalError('null value with binary operator ">>"', '1 >> c'));
assert(isEvalError('null value with binary operator "@right_shift"', '1 @right_shift c'));
assert(isEvalError('null value with binary operator ">>>"', '1 >>> c'));
assert(isEvalError('null value with binary operator "@right_unsigned_shift"', '1 @right_unsigned_shift c'));
assert(isEvalError('null value with binary operator "|"', '1 | c'));
assert(isEvalError('null value with binary operator "@bitwise_or"', '1 @bitwise_or c'));
assert(isEvalError('null value with binary operator "^"', '1 ^ c'));
assert(isEvalError('null value with binary operator "@bitwise_xor"', '1 @bitwise_xor c'));
assert(isEvalError('null value with binary operator "&"', '1 & c'));
assert(isEvalError('null value with binary operator "@bitwise_and"', '1 @bitwise_and c'));
assert(isEvalError('null value with binary operator "=="', '1 == c'));
assert(isEvalError('null value with binary operator "!="', '1 != c'));
assert(isEvalError('null value with binary operator "<"', '1 < c'));
assert(isEvalError('null value with binary operator "@lt"', '1 @lt c'));
assert(isEvalError('null value with binary operator ">"', '1 > c'));
assert(isEvalError('null value with binary operator "@gt"', '1 @gt c'));
assert(isEvalError('null value with binary operator "<="', '1 <= c'));
assert(isEvalError('null value with binary operator "@lteq"', '1 @lteq c'));
assert(isEvalError('null value with binary operator ">="', '1 >= c'));
assert(isEvalError('null value with binary operator "@gteq"', '1 @gteq c'));
assert(isEvalError('bad operand types for binary operator "||"', '1 || c'));
assert(isEvalError('bad operand types for binary operator "@or"', '1 @or c'));
assert(isEvalError('bad operand types for binary operator "&&"', '1 && c'));
assert(isEvalError('bad operand types for binary operator "@and"', '1 @and c'));
try {
    c + 1;
} catch (NullPointerException e) {
    assert(true);
} catch (ee) {
    fail();
}

//null Character wrapper
Boolean b = null;
assert(isEvalError('incomparable types: Boolean and Character', 'b == c'));
assertEquals("null1", b + "1");
assertEquals("1null", "1" + b);
assertEquals("nullnull", s + b);
assertEquals("nullnull", b + s);
assertTrue(null == b);
assertTrue(b == null);
assertTrue(b == b);
assertFalse(null != b);
assertFalse(b != null);
assertFalse(b != b);
assertTrue(true || b);
b = true;
assertTrue(null != b);
assertTrue(b != null);
assertTrue(b == b);
assertTrue(b == true);
assertTrue(b == Boolean.valueOf(true));
assertTrue(b == Boolean.TRUE);
assertFalse(null == b);
assertFalse(b == null);
assertFalse(b == new Boolean(true));
assertFalse(b != b);
b = null;
assert(isEvalError('bad operand types for binary operator "+"', 'b + true'));
assert(isEvalError('bad operand types for binary operator "-"', 'b - true'));
assert(isEvalError('bad operand types for binary operator "/"', 'b / true'));
assert(isEvalError('bad operand types for binary operator "%"', 'b % true'));
assert(isEvalError('bad operand types for binary operator "@mod"', 'b @mod true'));
assert(isEvalError('bad operand types for binary operator "**"', 'b ** true'));
assert(isEvalError('bad operand types for binary operator "@pow"', 'b @pow true'));
assert(isEvalError('bad operand types for binary operator "<<"', 'b << true'));
assert(isEvalError('bad operand types for binary operator "@left_shift"', 'b @left_shift true'));
assert(isEvalError('bad operand types for binary operator ">>"', 'b >> true'));
assert(isEvalError('bad operand types for binary operator "@right_shift"', 'b @right_shift true'));
assert(isEvalError('bad operand types for binary operator ">>>"', 'b >>> true'));
assert(isEvalError('bad operand types for binary operator "@right_unsigned_shift"', 'b @right_unsigned_shift true'));
assert(isEvalError('null value with binary operator "|"', 'b | true'));
assert(isEvalError('null value with binary operator "@bitwise_or"', 'b @bitwise_or true'));
assert(isEvalError('null value with binary operator "^"', 'b ^ true'));
assert(isEvalError('null value with binary operator "@bitwise_xor"', 'b @bitwise_xor true'));
assert(isEvalError('null value with binary operator "&"', 'b & true'));
assert(isEvalError('null value with binary operator "@bitwise_and"', 'b @bitwise_and true'));
assert(isEvalError('null value with binary operator "=="', 'b == true'));
assert(isEvalError('null value with binary operator "!="', 'b != true'));
assert(isEvalError('bad operand types for binary operator "<"', 'b < true'));
assert(isEvalError('bad operand types for binary operator "@lt"', 'b @lt true'));
assert(isEvalError('bad operand types for binary operator ">"', 'b > true'));
assert(isEvalError('bad operand types for binary operator "@gt"', 'b @gt true'));
assert(isEvalError('bad operand types for binary operator "<="', 'b <= true'));
assert(isEvalError('bad operand types for binary operator "@lteq"', 'b @lteq true'));
assert(isEvalError('bad operand types for binary operator ">="', 'b >= true'));
assert(isEvalError('bad operand types for binary operator "@gteq"', 'b @gteq true'));
assert(isEvalError('null value with binary operator "||"', 'b || true'));
assert(isEvalError('null value with binary operator "@or"', 'b @or true'));
assert(isEvalError('null value with binary operator "&&"', 'b && true'));
assert(isEvalError('null value with binary operator "@and"', 'b @and true'));
assert(isEvalError('bad operand types for binary operator "+"', 'true + b'));
assert(isEvalError('bad operand types for binary operator "-"', 'true - b'));
assert(isEvalError('bad operand types for binary operator "/"', 'true / b'));
assert(isEvalError('bad operand types for binary operator "%"', 'true % b'));
assert(isEvalError('bad operand types for binary operator "@mod"', 'true @mod b'));
assert(isEvalError('bad operand types for binary operator "**"', 'true ** b'));
assert(isEvalError('bad operand types for binary operator "@pow"', 'true @pow b'));
assert(isEvalError('bad operand types for binary operator "<<"', 'true << b'));
assert(isEvalError('bad operand types for binary operator "@left_shift"', 'true @left_shift b'));
assert(isEvalError('bad operand types for binary operator ">>"', 'true >> b'));
assert(isEvalError('bad operand types for binary operator "@right_shift"', 'true @right_shift b'));
assert(isEvalError('bad operand types for binary operator ">>>"', 'true >>> b'));
assert(isEvalError('bad operand types for binary operator "@right_unsigned_shift"', 'true @right_unsigned_shift b'));
assert(isEvalError('null value with binary operator "|"', 'true | b'));
assert(isEvalError('null value with binary operator "@bitwise_or"', 'true @bitwise_or b'));
assert(isEvalError('null value with binary operator "^"', 'true ^ b'));
assert(isEvalError('null value with binary operator "@bitwise_xor"', 'true @bitwise_xor b'));
assert(isEvalError('null value with binary operator "&"', 'true & b'));
assert(isEvalError('null value with binary operator "@bitwise_and"', 'true @bitwise_and b'));
assert(isEvalError('null value with binary operator "=="', 'true == b'));
assert(isEvalError('null value with binary operator "!="', 'true != b'));
assert(isEvalError('bad operand types for binary operator "<"', 'true < b'));
assert(isEvalError('bad operand types for binary operator "@lt"', 'true @lt b'));
assert(isEvalError('bad operand types for binary operator ">"', 'true > b'));
assert(isEvalError('bad operand types for binary operator "@gt"', 'true @gt b'));
assert(isEvalError('bad operand types for binary operator "<="', 'true <= b'));
assert(isEvalError('bad operand types for binary operator "@lteq"', 'true @lteq b'));
assert(isEvalError('bad operand types for binary operator ">="', 'true >= b'));
assert(isEvalError('bad operand types for binary operator "@gteq"', 'true @gteq b'));
assert(isEvalError('null value with binary operator "&&"', 'true && b'));
assert(isEvalError('null value with binary operator "@and"', 'true @and b'));
try {
    b & true;
} catch (NullPointerException e) {
 assert(true);
} catch (ee) {
 fail();
}


complete();





