#!/bin/java bsh.Interpreter

source("TestHarness.bsh");
source("Assert.bsh");

// array full declaration (strict java)
int[][] ia1 = new int[][] {{1, 2}, {3, 4}};
assertThat(ia1, valueString('{{1I, 2I}, {3I, 4I}}'));
assertThat(ia1, instanceOf(int[][].class));
int ia3[][] = new int[][] {{1, 2}, {3, 4}};
assertThat(ia3, valueString('{{1I, 2I}, {3I, 4I}}'));
assertThat(ia3, instanceOf(int[][].class));
ia5 = new int[][] {{1, 2}, {3, 4}};
assertThat(ia5, valueString('{{1I, 2I}, {3I, 4I}}'));
assertThat(ia5, instanceOf(int[][].class));

//array short hand declaration (strict java)
int[][] ia2 = {{1, 2}, {3, 4}};
assertThat(ia2, valueString('{{1I, 2I}, {3I, 4I}}'));
assertThat(ia2, instanceOf(int[][].class));
int ia4[][] = {{1, 2}, {3, 4}};
assertThat(ia4, valueString('{{1I, 2I}, {3I, 4I}}'));
assertThat(ia4, instanceOf(int[][].class));
ia6 = {{1, 2}, {3, 4}};
assertThat(ia6, valueString('{{1I, 2I}, {3I, 4I}}'));
assertThat(ia6, instanceOf(int[][].class));

// array empty
arr = new int[0];
assertThat(arr, valueString('{}'));
assertThat(arr, instanceOf(int[].class));
arr = new int[0][0];
assertThat(arr, valueString('{}'));
assertThat(arr, instanceOf(int[][].class));
arr = new int[] {};
assertThat(arr, valueString('{}'));
assertThat(arr, instanceOf(int[].class));
arr = new int {};
assertThat(arr, valueString('{}'));
assertThat(arr, instanceOf(int[].class));
arr = new {};
assertThat(arr, valueString('{}'));
assertThat(arr, instanceOf(Object[].class));
arr = {};
assertThat(arr, valueString('{}'));
assertThat(arr, instanceOf(Object[].class));
arr = {{}};
assertThat(arr, valueString('{{}}'));
assertThat(arr, instanceOf(Object[][].class));
arr = {{{}}};
assertThat(arr, valueString('{{{}}}'));
assertThat(arr, instanceOf(Object[][][].class));

// array null dimensions
arr = new int[2][];
assertThat(arr, valueString('{null, null}'));
assertThat(arr, instanceOf(int[][].class));
Object[][] arrbb = {null};
assertThat(arrbb, valueString('{null}'));
assertThat(arrbb, instanceOf(Object[][].class));
Object arrbbb[][] = {null};
assertThat(arrbbb, valueString('{null}'));
assertThat(arrbbb, instanceOf(Object[][].class));
arr = new Object[][] {null};
assertThat(arr, valueString('{null}'));
assertThat(arr, instanceOf(Object[][].class));
arr = new {null};
assertThat(arr, valueString('{null}'));
assertThat(arr, instanceOf(Object[][].class));
arr = {null};
assertThat(arr, valueString('{null}'));
assertThat(arr, instanceOf(Object[][].class));
arr = new {{null}};
assertThat(arr, valueString('{{null}}'));
assertThat(arr, instanceOf(Object[][][].class));
arr = new {{{null}}, {{null}}};
assertThat(arr, valueString('{{{null}}, {{null}}}'));
assertThat(arr, instanceOf(Object[][][][].class));
arr = new {{{null}}, new {null}};
assertThat(arr, valueString('{{{null}}, {null}}'));
assertThat(arr, instanceOf(Object[][][].class));
arr = {null, {null, {null}}};
assertThat(arr, valueString('{null, {null, {null}}}'));
assertThat(arr, instanceOf(Object[][][][].class));
arr = {null, null, {null, {null}}};
assertThat(arr, valueString('{null, null, {null, {null}}}'));
assertThat(arr, instanceOf(Object[][][][].class));
arr = {null, null, null, null, {null, null, null, {null, null, null}}};
assertThat(arr, valueString('{null, null, null, null, {null, null, null, {null, null, null}}}'));
assertThat(arr, instanceOf(Object[][][][].class));
arr = {null, null, {null, {{}, null}}};
assertThat(arr, valueString('{null, null, {null, {{}, null}}}'));
assertThat(arr, instanceOf(Object[][][][].class));
arr = {null, null, {null, {{1}, null}}};
assertThat(arr, valueString('{null, null, {null, {{1I}, null}}}'));
assertThat(arr, instanceOf(int[][][][].class));
arr = {{1, 2}, null};
assertThat(arr, valueString('{{1I, 2I}, null}'));
assertThat(arr, instanceOf(int[][].class));

// array element type cast
arr = new Object {1o, 2s, 3I, 4L};
assertThat(arr, valueString('{1o, 2s, 3I, 4L}'));
assertThat(arr, instanceOf(Object[].class));
arr = new short {1o, 2s, 3I, 4L};
assertThat(arr, valueString('{1s, 2s, 3s, 4s}'));
assertThat(arr, instanceOf(short[].class));
arr = new List {1o, 2s, 3I, 4L};
assertThat(arr, valueString('[1L, 2L, 3L, 4L]'));
assertThat(arr, instanceOf(List.class));

// array type inference
arr = new {{false}, {true, false}};
assertThat(arr, valueString('{{false}, {true, false}}'));
assertThat(arr, instanceOf(boolean[][].class));
arr = {1o};
assertThat(arr, valueString('{1o}'));
assertThat(arr, instanceOf(byte[].class));
arr = {1o, 2s};
assertThat(arr, valueString('{1s, 2s}'));
assertThat(arr, instanceOf(short[].class));
arr = {1o, 2s, '\003'};
assertThat(arr, valueString("{'\001', '\002', '\003'}"));
assertThat(arr, instanceOf(char[].class));
arr = {1o, 2s, '\003', 4i};
assertThat(arr, valueString('{1I, 2I, 3I, 4I}'));
assertThat(arr, instanceOf(int[].class));
arr = {1o, 2s, '\003', 4i, 5l};
assertThat(arr, valueString('{1L, 2L, 3L, 4L, 5L}'));
assertThat(arr, instanceOf(long[].class));
arr = {1o, 2s, '\003', 4i, 5l, 6f};
assertThat(arr, valueString('{1.0f, 2.0f, 3.0f, 4.0f, 5.0f, 6.0f}'));
assertThat(arr, instanceOf(float[].class));
arr = {1o, 2s, '\003', 4i, 5l, 6f, 7d};
assertThat(arr, valueString('{1.0d, 2.0d, 3.0d, 4.0d, 5.0d, 6.0d, 7.0d}'));
assertThat(arr, instanceOf(double[].class));
arr = {1o, 2s, '\003', 4i, 5l, 6f, 7d, 8w};
assertThat(arr, valueString('{1W, 2W, 3W, 4W, 5W, 6W, 7W, 8W}'));
assertThat(arr, instanceOf(BigInteger[].class));
arr = {1o, 2s, '\003', 4i, 5l, 6f, 7d, 8w, 9.0w};
assertThat(arr, valueString('{1.0w, 2.0w, 3.0w, 4.0w, 5.0w, 6.0w, 7.0w, 8.0w, 9.0w}'));
assertThat(arr, instanceOf(BigDecimal[].class));

//array type inference mixed dimensions
arr = {{1o}, {2s}, {4i}, {5l}};
assertThat(arr, instanceOf(long[][].class));
arr = {{1o, 2s}, {4i, 5l}};
assertThat(arr, instanceOf(long[][].class));
arr = {{{1o}}, {{2s}}, {{4i}}, {{5l}}};
assertThat(arr, instanceOf(long[][][].class));
arr = {{{1o, 2s}}, {{4i, 5l}}};
assertThat(arr, instanceOf(long[][][].class));
arr = {{{1o}, {2s}}, {{4i}, {5l}}};
assertThat(arr, instanceOf(long[][][].class));
arr = {{{{1o}, {2s}}}, {{{4i}, {5l}}}};
assertThat(arr, instanceOf(long[][][][].class));
arr = {{{{{1o}}, {{2s}}}}, {{{{4i}}, {{5l}}}}};
assertThat(arr, instanceOf(long[][][][][].class));
arr = {{{1o}, {"2"}}, {{4i}, {5l}}};
assertThat(arr, instanceOf(Object[][][].class));
arr = {{1, 2, 3}};
assertThat(arr, instanceOf(int[][].class));


//array type inference new array
a = new {1};
assertThat(a, instanceOf(int[].class));
assertArrayEquals(new int[] {1}, a);
a = new {(Object) 1};
assertThat(a, arrayWithSize(1));
assertThat(a, instanceOf(Integer[].class));
assertArrayEquals(new Integer[] {1}, a);
a = new {1o};
assertThat(a, instanceOf(byte[].class));
assertArrayEquals(new byte[] {1}, a);
a = new {(Object) 1o};
assertThat(a, arrayWithSize(1));
assertThat(a, instanceOf(Byte[].class));
assertArrayEquals(new Byte[] {1}, a);
a = new {1s};
assertThat(a, instanceOf(short[].class));
assertArrayEquals(new short[] {1}, a);
a = new {(Object) 1s};
assertThat(a, arrayWithSize(1));
assertThat(a, instanceOf(Short[].class));
assertArrayEquals(new Short[] {1}, a);
a = new {1i};
assertThat(a, instanceOf(int[].class));
assertArrayEquals(new int[] {1}, a);
a = new {(Object) 1i};
assertThat(a, arrayWithSize(1));
assertThat(a, instanceOf(Integer[].class));
assertArrayEquals(new Integer[] {1}, a);
a = new {1l};
assertThat(a, instanceOf(long[].class));
assertArrayEquals(new long[] {1}, a);
a = new {(Object) 1l};
assertThat(a, arrayWithSize(1));
assertThat(a, instanceOf(Long[].class));
assertArrayEquals(new Long[] {1}, a);
a = new {1f};
assertThat(a, instanceOf(float[].class));
assertArrayEquals(new float[] {1.0}, a, 0.0f);
a = new {(Object) 1f};
assertThat(a, arrayWithSize(1));
assertThat(a, instanceOf(Float[].class));
assertArrayEquals(new Float[] {1.0}, a);
a = new {1d};
assertThat(a, instanceOf(double[].class));
assertArrayEquals(new double[] {1.0}, a, 0.0);
a = new {(Object) 1d};
assertThat(a, arrayWithSize(1));
assertThat(a, instanceOf(Double[].class));
assertArrayEquals(new Double[] {1.0}, a);
a = new {1w};
assertThat(a, arrayWithSize(1));
assertArrayEquals(new BigInteger[] {1}, a);
a = new {1.0w};
assertThat(a, arrayWithSize(1));
assertArrayEquals(new BigDecimal[] {1}, a);

//array type inference new array
arr = new {1o};
assertThat(arr, instanceOf(byte[].class));
arr = new {1o, 2s};
assertThat(arr, instanceOf(short[].class));
arr = new {1o, 2s, 4i};
assertThat(arr, instanceOf(int[].class));
arr = new {1o, 2s, 4i, 5l};
assertThat(arr, instanceOf(long[].class));
arr = new {1o, 2s, 4i, 5l, 6w};
assertThat(arr, instanceOf(BigInteger[].class));
arr = new {1o, 2s, 4i, 5l, 6f};
assertThat(arr, instanceOf(float[].class));
arr = new {1o, 2s, 4i, 5l, 6f, 7d};
assertThat(arr, instanceOf(double[].class));
arr = new {1o, 2s, 4i, 5l, 6f, 7d, 8.0w};
assertThat(arr, instanceOf(BigDecimal[].class));

//array type inference mixed dimensions new array
arr = new {{1o}, {2s}, {4i}, {5l}};
assertThat(arr, instanceOf(long[][].class));
arr = new {{1o, 2s}, {4i, 5l}};
assertThat(arr, instanceOf(long[][].class));
arr = new {{{1o}}, {{2s}}, {{4i}}, {{5l}}};
assertThat(arr, instanceOf(long[][][].class));
arr = new {{{1o, 2s}}, {{4i, 5l}}};
assertThat(arr, instanceOf(long[][][].class));
arr = new {{{1o}, {2s}}, {{4i}, {5l}}};
assertThat(arr, instanceOf(long[][][].class));
arr = new {{{{1o}, {2s}}}, {{{4i}, {5l}}}};
assertThat(arr, instanceOf(long[][][][].class));
arr = new {{{{{1o}}, {{2s}}}}, {{{{4i}}, {{5l}}}}};
assertThat(arr, instanceOf(long[][][][][].class));
arr = new {{{1o}, {"2"}}, {{4i}, {5l}}};
assertThat(arr, instanceOf(Object[][].class));
arr = new {new {1, 2, 3}};
assertThat(arr, instanceOf(int[][].class));

// multi new instance
arr = new {new {1o}, new {2s}, new {4i}, new {5l}};
assertThat(arr, valueString('{{1L}, {2L}, {4L}, {5L}}'));
assertThat(arr, instanceOf(long[][].class));
arr = new {new {1o, 2s}, new {4i, 5l}};
assertThat(arr, valueString('{{1L, 2L}, {4L, 5L}}'));
assertThat(arr, instanceOf(long[][].class));
arr = new {new {new {1o}}, new {new {2s}}, new {new {4i}}, new {new {5l}}};
assertThat(arr, valueString('{{{1L}}, {{2L}}, {{4L}}, {{5L}}}'));
assertThat(arr, instanceOf(long[][][].class));
arr = new {new {new {1o, 2s}}, new {new {4i, 5l}}};
assertThat(arr, valueString('{{{1L, 2L}}, {{4L, 5L}}}'));
assertThat(arr, instanceOf(long[][][].class));
arr = new {new {new {1o}, new {2s}}, new {new {4i}, new {5l}}};
assertThat(arr, valueString('{{{1L}, {2L}}, {{4L}, {5L}}}'));
assertThat(arr, instanceOf(long[][][].class));
arr = new {new {new {new {1o}, new {2s}}}, new {new {new {4i}, new {5l}}}};
assertThat(arr, valueString('{{{{1L}, {2L}}}, {{{4L}, {5L}}}}'));
assertThat(arr, instanceOf(long[][][][].class));
arr = new {new {new {new {new {1o}}, new {new {2s}}}}, new {new {new {new {4i}}, new {new {5l}}}}};
assertThat(arr, valueString('{{{{{1L}}, {{2L}}}}, {{{{4L}}, {{5L}}}}}'));
assertThat(arr, instanceOf(long[][][][][].class));
arr = new {new {new {1o}, new {"2"}}, new {new {4i}, new {5l}}};
assertThat(arr, valueString('{{{1o}, {"2"}}, {{4L}, {5L}}}'));
assertThat(arr, instanceOf(Object[][].class));
arr = new {new {1, 2, 3}};
assertThat(arr, valueString('{{1I, 2I, 3I}}'));
assertThat(arr, instanceOf(int[][].class));

assert(isEvalError("Error array set index: Index 3 out-of-bounds for length 2", "{1,2}[3]=5;"));
assert(isEvalError("Error array set index: Index 3 out-of-bounds for length 2", "((List) {1,2})[3]=5;"));
assert(isEvalError("Error array get index: Index 3 out-of-bounds for length 2", "{1,2}[3];"));
assert(isEvalError("Error array get index: Index 3 out-of-bounds for length 2", "((List) {1,2})[3];"));
assert(isEvalError("Not an array or List type", "''[1];"));
assert(isEvalError("Class: Unknow.ObjectType not found in namespace", "new Unknow.ObjectType[0];"));
assert(isEvalError("Array index: 0 does not evaluate to an integer", 'new int["0"];'));
assert(isEvalError("Incompatible initializer. Allocation calls for a 2 dimensional array, but initializer is a 1 dimensional array", "new int[][] {};"));
assert(isEvalError("Incompatible type: Boolean in initializer of array type: boolean", "new {{false}, true};"));
assert(isEvalError("Incompatible type: Object[] in initializer of array type: Object at position: 1", "new {{{new Object()}}, new {new Object()}};"));
assert(isEvalError("Error in array initializer: Cannot cast boolean to int", "new int {true};"));
assert(isEvalError("Error in array initializer: Cannot cast String to int", "new int {'11'};"));
assert(isEvalError("Void in array initializer, position 0", "new Object {void};"));
assert(isEvalError("Invalid Intializer for int, at position: 0", "new int[] {{1}};"));
assert(isEvalError("array element type mismatch", 'store={"foo"}; store[0]=1;'));


complete();
return;
