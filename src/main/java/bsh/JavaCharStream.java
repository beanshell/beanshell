/*****************************************************************************
 * Licensed to the Apache Software Foundation (ASF) under one                *
 * or more contributor license agreements.  See the NOTICE file              *
 * distributed with this work for additional information                     *
 * regarding copyright ownership.  The ASF licenses this file                *
 * to you under the Apache License, Version 2.0 (the                         *
 * "License"); you may not use this file except in compliance                *
 * with the License.  You may obtain a copy of the License at                *
 *                                                                           *
 *     http://www.apache.org/licenses/LICENSE-2.0                            *
 *                                                                           *
 * Unless required by applicable law or agreed to in writing,                *
 * software distributed under the License is distributed on an               *
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY                    *
 * KIND, either express or implied.  See the License for the                 *
 * specific language governing permissions and limitations                   *
 * under the License.                                                        *
 *                                                                           *
 *                                                                           *
 * This file is part of the BeanShell Java Scripting distribution.           *
 * Documentation and updates may be found at http://www.beanshell.org/       *
 * Patrick Niemeyer (pat@pat.net)                                            *
 * Author of Learning Java, O'Reilly & Associates                            *
 *                                                                           *
 *****************************************************************************/
/* Generated By:JavaCC: Do not edit this line. JavaCharStream.java Version 3.0 */
package bsh;

import java.io.IOException;

/**
 * An implementation of interface CharStream, where the stream is assumed to
 * contain only ASCII characters (with java-like unicode escape processing).
 */
public class JavaCharStream {

    /** The Constant staticFlag. */
    public static final boolean staticFlag = false;

    /**
     * Hexval.
     *
     * @param c
     *            the c
     * @return the int
     * @throws IOException
     *             Signals that an I/O exception has occurred.
     */
    static final int hexval(final char c) throws IOException {
        switch (c) {
            case '0':
                return 0;
            case '1':
                return 1;
            case '2':
                return 2;
            case '3':
                return 3;
            case '4':
                return 4;
            case '5':
                return 5;
            case '6':
                return 6;
            case '7':
                return 7;
            case '8':
                return 8;
            case '9':
                return 9;
            case 'a':
            case 'A':
                return 10;
            case 'b':
            case 'B':
                return 11;
            case 'c':
            case 'C':
                return 12;
            case 'd':
            case 'D':
                return 13;
            case 'e':
            case 'E':
                return 14;
            case 'f':
            case 'F':
                return 15;
        }
        throw new IOException(); // Should never come here
    }

    /** The bufpos. */
    public int bufpos = -1;
    /** The bufsize. */
    int bufsize;
    /** The available. */
    int available;
    /** The token begin. */
    int tokenBegin;
    /** The bufline. */
    protected int bufline[];
    /** The bufcolumn. */
    protected int bufcolumn[];
    /** The column. */
    protected int column = 0;
    /** The line. */
    protected int line = 1;
    /** The prev char is CR. */
    protected boolean prevCharIsCR = false;
    /** The prev char is LF. */
    protected boolean prevCharIsLF = false;
    /** The input stream. */
    protected java.io.Reader inputStream;
    /** The next char buf. */
    protected char[] nextCharBuf;
    /** The buffer. */
    protected char[] buffer;
    /** The max next char ind. */
    protected int maxNextCharInd = 0;
    /** The next char ind. */
    protected int nextCharInd = -1;
    /** The in buf. */
    protected int inBuf = 0;

    /**
     * Expand buff.
     *
     * @param wrapAround
     *            the wrap around
     */
    protected void ExpandBuff(final boolean wrapAround) {
        final char[] newbuffer = new char[this.bufsize + 2048];
        final int newbufline[] = new int[this.bufsize + 2048];
        final int newbufcolumn[] = new int[this.bufsize + 2048];
        try {
            if (wrapAround) {
                System.arraycopy(this.buffer, this.tokenBegin, newbuffer, 0,
                        this.bufsize - this.tokenBegin);
                System.arraycopy(this.buffer, 0, newbuffer,
                        this.bufsize - this.tokenBegin, this.bufpos);
                this.buffer = newbuffer;
                System.arraycopy(this.bufline, this.tokenBegin, newbufline, 0,
                        this.bufsize - this.tokenBegin);
                System.arraycopy(this.bufline, 0, newbufline,
                        this.bufsize - this.tokenBegin, this.bufpos);
                this.bufline = newbufline;
                System.arraycopy(this.bufcolumn, this.tokenBegin, newbufcolumn,
                        0, this.bufsize - this.tokenBegin);
                System.arraycopy(this.bufcolumn, 0, newbufcolumn,
                        this.bufsize - this.tokenBegin, this.bufpos);
                this.bufcolumn = newbufcolumn;
                this.bufpos += this.bufsize - this.tokenBegin;
            } else {
                System.arraycopy(this.buffer, this.tokenBegin, newbuffer, 0,
                        this.bufsize - this.tokenBegin);
                this.buffer = newbuffer;
                System.arraycopy(this.bufline, this.tokenBegin, newbufline, 0,
                        this.bufsize - this.tokenBegin);
                this.bufline = newbufline;
                System.arraycopy(this.bufcolumn, this.tokenBegin, newbufcolumn,
                        0, this.bufsize - this.tokenBegin);
                this.bufcolumn = newbufcolumn;
                this.bufpos -= this.tokenBegin;
            }
        } catch (final Throwable t) {
            throw new Error(t.getMessage());
        }
        this.available = this.bufsize += 2048;
        this.tokenBegin = 0;
    }

    /**
     * Fill buff.
     *
     * @throws IOException
     *             Signals that an I/O exception has occurred.
     */
    protected void FillBuff() throws IOException {
        int i;
        if (this.maxNextCharInd == 4096)
            this.maxNextCharInd = this.nextCharInd = 0;
        try {
            if ((i = this.inputStream.read(this.nextCharBuf,
                    this.maxNextCharInd, 4096 - this.maxNextCharInd)) == -1) {
                this.inputStream.close();
                throw new IOException();
            } else
                this.maxNextCharInd += i;
            return;
        } catch (final IOException e) {
            if (this.bufpos != 0) {
                --this.bufpos;
                this.backup(0);
            } else {
                this.bufline[this.bufpos] = this.line;
                this.bufcolumn[this.bufpos] = this.column;
            }
            throw e;
        }
    }

    /**
     * Read byte.
     *
     * @return the char
     * @throws IOException
     *             Signals that an I/O exception has occurred.
     */
    protected char ReadByte() throws IOException {
        if (++this.nextCharInd >= this.maxNextCharInd)
            this.FillBuff();
        return this.nextCharBuf[this.nextCharInd];
    }

    /**
     * Begin token.
     *
     * @return the char
     * @throws IOException
     *             Signals that an I/O exception has occurred.
     */
    public char BeginToken() throws IOException {
        if (this.inBuf > 0) {
            --this.inBuf;
            if (++this.bufpos == this.bufsize)
                this.bufpos = 0;
            this.tokenBegin = this.bufpos;
            return this.buffer[this.bufpos];
        }
        this.tokenBegin = 0;
        this.bufpos = -1;
        return this.readChar();
    }

    /**
     * Adjust buff size.
     */
    protected void AdjustBuffSize() {
        if (this.available == this.bufsize) {
            if (this.tokenBegin > 2048) {
                this.bufpos = 0;
                this.available = this.tokenBegin;
            } else
                this.ExpandBuff(false);
        } else if (this.available > this.tokenBegin)
            this.available = this.bufsize;
        else if (this.tokenBegin - this.available < 2048)
            this.ExpandBuff(true);
        else
            this.available = this.tokenBegin;
    }

    /**
     * Update line column.
     *
     * @param c
     *            the c
     */
    protected void UpdateLineColumn(final char c) {
        this.column++;
        if (this.prevCharIsLF) {
            this.prevCharIsLF = false;
            this.line += this.column = 1;
        } else if (this.prevCharIsCR) {
            this.prevCharIsCR = false;
            if (c == '\n')
                this.prevCharIsLF = true;
            else
                this.line += this.column = 1;
        }
        switch (c) {
            case '\r':
                this.prevCharIsCR = true;
                break;
            case '\n':
                this.prevCharIsLF = true;
                break;
            case '\t':
                this.column--;
                this.column += 8 - (this.column & 07);
                break;
            default:
                break;
        }
        this.bufline[this.bufpos] = this.line;
        this.bufcolumn[this.bufpos] = this.column;
    }

    /**
     * Read char.
     *
     * @return the char
     * @throws IOException
     *             Signals that an I/O exception has occurred.
     */
    public char readChar() throws IOException {
        if (this.inBuf > 0) {
            --this.inBuf;
            if (++this.bufpos == this.bufsize)
                this.bufpos = 0;
            return this.buffer[this.bufpos];
        }
        char c;
        if (++this.bufpos == this.available)
            this.AdjustBuffSize();
        if ((this.buffer[this.bufpos] = c = this.ReadByte()) == '\\') {
            this.UpdateLineColumn(c);
            int backSlashCnt = 1;
            for (;;) { // Read all the backslashes
                if (++this.bufpos == this.available)
                    this.AdjustBuffSize();
                try {
                    if ((this.buffer[this.bufpos] = c = this
                            .ReadByte()) != '\\') {
                        this.UpdateLineColumn(c);
                        // found a non-backslash char.
                        if (c == 'u' && (backSlashCnt & 1) == 1) {
                            if (--this.bufpos < 0)
                                this.bufpos = this.bufsize - 1;
                            break;
                        }
                        this.backup(backSlashCnt);
                        return '\\';
                    }
                } catch (final IOException e) {
                    if (backSlashCnt > 1)
                        this.backup(backSlashCnt);
                    return '\\';
                }
                this.UpdateLineColumn(c);
                backSlashCnt++;
            }
            // Here, we have seen an odd number of backslash's followed by a 'u'
            try {
                while ((c = this.ReadByte()) == 'u')
                    ++this.column;
                this.buffer[this.bufpos] = c = (char) (hexval(c) << 12
                        | hexval(this.ReadByte()) << 8
                        | hexval(this.ReadByte()) << 4
                        | hexval(this.ReadByte()));
                this.column += 4;
            } catch (final IOException e) {
                throw new Error("Invalid escape character at line " + this.line
                        + " column " + this.column + ".");
            }
            if (backSlashCnt == 1)
                return c;
            else {
                this.backup(backSlashCnt - 1);
                return '\\';
            }
        } else {
            this.UpdateLineColumn(c);
            return c;
        }
    }

    /**
     * Gets the column.
     *
     * @return the column
     * @see #getEndColumn
     * @deprecated
     */
    @Deprecated
    public int getColumn() {
        return this.bufcolumn[this.bufpos];
    }

    /**
     * Gets the line.
     *
     * @return the line
     * @see #getEndLine
     * @deprecated
     */
    @Deprecated
    public int getLine() {
        return this.bufline[this.bufpos];
    }

    /**
     * Gets the end column.
     *
     * @return the end column
     */
    public int getEndColumn() {
        return this.bufcolumn[this.bufpos];
    }

    /**
     * Gets the end line.
     *
     * @return the end line
     */
    public int getEndLine() {
        return this.bufline[this.bufpos];
    }

    /**
     * Gets the begin column.
     *
     * @return the begin column
     */
    public int getBeginColumn() {
        return this.bufcolumn[this.tokenBegin];
    }

    /**
     * Gets the begin line.
     *
     * @return the begin line
     */
    public int getBeginLine() {
        return this.bufline[this.tokenBegin];
    }

    /**
     * Backup.
     *
     * @param amount
     *            the amount
     */
    public void backup(final int amount) {
        this.inBuf += amount;
        if ((this.bufpos -= amount) < 0)
            this.bufpos += this.bufsize;
    }

    /**
     * Instantiates a new java char stream.
     *
     * @param dstream
     *            the dstream
     * @param startline
     *            the startline
     * @param startcolumn
     *            the startcolumn
     * @param buffersize
     *            the buffersize
     */
    public JavaCharStream(final java.io.Reader dstream, final int startline,
            final int startcolumn, final int buffersize) {
        this.inputStream = dstream;
        this.line = startline;
        this.column = startcolumn - 1;
        this.available = this.bufsize = buffersize;
        this.buffer = new char[buffersize];
        this.bufline = new int[buffersize];
        this.bufcolumn = new int[buffersize];
        this.nextCharBuf = new char[4096];
    }

    /**
     * Instantiates a new java char stream.
     *
     * @param dstream
     *            the dstream
     * @param startline
     *            the startline
     * @param startcolumn
     *            the startcolumn
     */
    public JavaCharStream(final java.io.Reader dstream, final int startline,
            final int startcolumn) {
        this(dstream, startline, startcolumn, 4096);
    }

    /**
     * Instantiates a new java char stream.
     *
     * @param dstream
     *            the dstream
     */
    public JavaCharStream(final java.io.Reader dstream) {
        this(dstream, 1, 1, 4096);
    }

    /**
     * Re init.
     *
     * @param dstream
     *            the dstream
     * @param startline
     *            the startline
     * @param startcolumn
     *            the startcolumn
     * @param buffersize
     *            the buffersize
     */
    public void ReInit(final java.io.Reader dstream, final int startline,
            final int startcolumn, final int buffersize) {
        this.inputStream = dstream;
        this.line = startline;
        this.column = startcolumn - 1;
        if (this.buffer == null || buffersize != this.buffer.length) {
            this.available = this.bufsize = buffersize;
            this.buffer = new char[buffersize];
            this.bufline = new int[buffersize];
            this.bufcolumn = new int[buffersize];
            this.nextCharBuf = new char[4096];
        }
        this.prevCharIsLF = this.prevCharIsCR = false;
        this.tokenBegin = this.inBuf = this.maxNextCharInd = 0;
        this.nextCharInd = this.bufpos = -1;
    }

    /**
     * Re init.
     *
     * @param dstream
     *            the dstream
     * @param startline
     *            the startline
     * @param startcolumn
     *            the startcolumn
     */
    public void ReInit(final java.io.Reader dstream, final int startline,
            final int startcolumn) {
        this.ReInit(dstream, startline, startcolumn, 4096);
    }

    /**
     * Re init.
     *
     * @param dstream
     *            the dstream
     */
    public void ReInit(final java.io.Reader dstream) {
        this.ReInit(dstream, 1, 1, 4096);
    }

    /**
     * Instantiates a new java char stream.
     *
     * @param dstream
     *            the dstream
     * @param startline
     *            the startline
     * @param startcolumn
     *            the startcolumn
     * @param buffersize
     *            the buffersize
     */
    public JavaCharStream(final java.io.InputStream dstream,
            final int startline, final int startcolumn, final int buffersize) {
        this(new java.io.InputStreamReader(dstream), startline, startcolumn,
                4096);
    }

    /**
     * Instantiates a new java char stream.
     *
     * @param dstream
     *            the dstream
     * @param startline
     *            the startline
     * @param startcolumn
     *            the startcolumn
     */
    public JavaCharStream(final java.io.InputStream dstream,
            final int startline, final int startcolumn) {
        this(dstream, startline, startcolumn, 4096);
    }

    /**
     * Instantiates a new java char stream.
     *
     * @param dstream
     *            the dstream
     */
    public JavaCharStream(final java.io.InputStream dstream) {
        this(dstream, 1, 1, 4096);
    }

    /**
     * Re init.
     *
     * @param dstream
     *            the dstream
     * @param startline
     *            the startline
     * @param startcolumn
     *            the startcolumn
     * @param buffersize
     *            the buffersize
     */
    public void ReInit(final java.io.InputStream dstream, final int startline,
            final int startcolumn, final int buffersize) {
        this.ReInit(new java.io.InputStreamReader(dstream), startline,
                startcolumn, 4096);
    }

    /**
     * Re init.
     *
     * @param dstream
     *            the dstream
     * @param startline
     *            the startline
     * @param startcolumn
     *            the startcolumn
     */
    public void ReInit(final java.io.InputStream dstream, final int startline,
            final int startcolumn) {
        this.ReInit(dstream, startline, startcolumn, 4096);
    }

    /**
     * Re init.
     *
     * @param dstream
     *            the dstream
     */
    public void ReInit(final java.io.InputStream dstream) {
        this.ReInit(dstream, 1, 1, 4096);
    }

    /**
     * Gets the image.
     *
     * @return the string
     */
    public String GetImage() {
        if (this.bufpos >= this.tokenBegin)
            return new String(this.buffer, this.tokenBegin,
                    this.bufpos - this.tokenBegin + 1);
        else
            return new String(this.buffer, this.tokenBegin,
                    this.bufsize - this.tokenBegin)
                    + new String(this.buffer, 0, this.bufpos + 1);
    }

    /**
     * Gets the suffix.
     *
     * @param len
     *            the len
     * @return the char[]
     */
    public char[] GetSuffix(final int len) {
        final char[] ret = new char[len];
        if (this.bufpos + 1 >= len)
            System.arraycopy(this.buffer, this.bufpos - len + 1, ret, 0, len);
        else {
            System.arraycopy(this.buffer,
                    this.bufsize - (len - this.bufpos - 1), ret, 0,
                    len - this.bufpos - 1);
            System.arraycopy(this.buffer, 0, ret, len - this.bufpos - 1,
                    this.bufpos + 1);
        }
        return ret;
    }

    /**
     * Done.
     */
    public void Done() {
        this.nextCharBuf = null;
        this.buffer = null;
        this.bufline = null;
        this.bufcolumn = null;
    }

    /**
     * Method to adjust line and column numbers for the start of a token.<BR>
     *
     * @param newLine
     *            the new line
     * @param newCol
     *            the new col
     */
    public void adjustBeginLineColumn(int newLine, final int newCol) {
        int start = this.tokenBegin;
        int len;
        if (this.bufpos >= this.tokenBegin)
            len = this.bufpos - this.tokenBegin + this.inBuf + 1;
        else
            len = this.bufsize - this.tokenBegin + this.bufpos + 1 + this.inBuf;
        int i = 0, j = 0, k = 0;
        int nextColDiff = 0, columnDiff = 0;
        while (i < len && this.bufline[j = start
                % this.bufsize] == this.bufline[k = ++start % this.bufsize]) {
            this.bufline[j] = newLine;
            nextColDiff = columnDiff + this.bufcolumn[k] - this.bufcolumn[j];
            this.bufcolumn[j] = newCol + columnDiff;
            columnDiff = nextColDiff;
            i++;
        }
        if (i < len) {
            this.bufline[j] = newLine++;
            this.bufcolumn[j] = newCol + columnDiff;
            while (i++ < len)
                if (this.bufline[j = start
                        % this.bufsize] != this.bufline[++start % this.bufsize])
                    this.bufline[j] = newLine++;
                else
                    this.bufline[j] = newLine;
        }
        this.line = this.bufline[j];
        this.column = this.bufcolumn[j];
    }
}
