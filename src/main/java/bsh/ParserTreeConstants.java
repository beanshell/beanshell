/*****************************************************************************
 * Licensed to the Apache Software Foundation (ASF) under one                *
 * or more contributor license agreements.  See the NOTICE file              *
 * distributed with this work for additional information                     *
 * regarding copyright ownership.  The ASF licenses this file                *
 * to you under the Apache License, Version 2.0 (the                         *
 * "License"); you may not use this file except in compliance                *
 * with the License.  You may obtain a copy of the License at                *
 *                                                                           *
 *     http://www.apache.org/licenses/LICENSE-2.0                            *
 *                                                                           *
 * Unless required by applicable law or agreed to in writing,                *
 * software distributed under the License is distributed on an               *
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY                    *
 * KIND, either express or implied.  See the License for the                 *
 * specific language governing permissions and limitations                   *
 * under the License.                                                        *
 *                                                                           *
 *                                                                           *
 * This file is part of the BeanShell Java Scripting distribution.           *
 * Documentation and updates may be found at http://www.beanshell.org/       *
 * Patrick Niemeyer (pat@pat.net)                                            *
 * Author of Learning Java, O'Reilly & Associates                            *
 *                                                                           *
 *****************************************************************************/
/* Generated By:JJTree: Do not edit this line. src/bsh\ParserTreeConstants.java */

package bsh;

public interface ParserTreeConstants
{
  public int JJTVOID = 0;
  public int JJTCLASSDECLARATION = 1;
  public int JJTMETHODDECLARATION = 2;
  public int JJTPACKAGEDECLARATION = 3;
  public int JJTIMPORTDECLARATION = 4;
  public int JJTVARIABLEDECLARATOR = 5;
  public int JJTARRAYINITIALIZER = 6;
  public int JJTFORMALPARAMETERS = 7;
  public int JJTFORMALPARAMETER = 8;
  public int JJTTYPE = 9;
  public int JJTRETURNTYPE = 10;
  public int JJTPRIMITIVETYPE = 11;
  public int JJTAMBIGUOUSNAME = 12;
  public int JJTASSIGNMENT = 13;
  public int JJTTERNARYEXPRESSION = 14;
  public int JJTBINARYEXPRESSION = 15;
  public int JJTUNARYEXPRESSION = 16;
  public int JJTCASTEXPRESSION = 17;
  public int JJTPRIMARYEXPRESSION = 18;
  public int JJTMETHODINVOCATION = 19;
  public int JJTPRIMARYSUFFIX = 20;
  public int JJTLITERAL = 21;
  public int JJTARGUMENTS = 22;
  public int JJTALLOCATIONEXPRESSION = 23;
  public int JJTARRAYDIMENSIONS = 24;
  public int JJTBLOCK = 25;
  public int JJTFORMALCOMMENT = 26;
  public int JJTSWITCHSTATEMENT = 27;
  public int JJTSWITCHLABEL = 28;
  public int JJTIFSTATEMENT = 29;
  public int JJTWHILESTATEMENT = 30;
  public int JJTFORSTATEMENT = 31;
  public int JJTENHANCEDFORSTATEMENT = 32;
  public int JJTTYPEDVARIABLEDECLARATION = 33;
  public int JJTSTATEMENTEXPRESSIONLIST = 34;
  public int JJTRETURNSTATEMENT = 35;
  public int JJTTHROWSTATEMENT = 36;
  public int JJTTRYSTATEMENT = 37;


  public String[] jjtNodeName = {
    "void",
    "ClassDeclaration",
    "MethodDeclaration",
    "PackageDeclaration",
    "ImportDeclaration",
    "VariableDeclarator",
    "ArrayInitializer",
    "FormalParameters",
    "FormalParameter",
    "Type",
    "ReturnType",
    "PrimitiveType",
    "AmbiguousName",
    "Assignment",
    "TernaryExpression",
    "BinaryExpression",
    "UnaryExpression",
    "CastExpression",
    "PrimaryExpression",
    "MethodInvocation",
    "PrimarySuffix",
    "Literal",
    "Arguments",
    "AllocationExpression",
    "ArrayDimensions",
    "Block",
    "FormalComment",
    "SwitchStatement",
    "SwitchLabel",
    "IfStatement",
    "WhileStatement",
    "ForStatement",
    "EnhancedForStatement",
    "TypedVariableDeclaration",
    "StatementExpressionList",
    "ReturnStatement",
    "ThrowStatement",
    "TryStatement",
  };
}
