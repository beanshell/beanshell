/* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java *****************************************************************************
 * Licensed to the Apache Software Foundation (ASF) under one                *
 * or more contributor license agreements.  See the NOTICE file              *
 * distributed with this work for additional information                     *
 * regarding copyright ownership.  The ASF licenses this file                *
 * to you under the Apache License, Version 2.0 (the                         *
 * "License"); you may not use this file except in compliance                *
 * with the License.  You may obtain a copy of the License at                *
 *                                                                           *
 *     http://www.apache.org/licenses/LICENSE-2.0                            *
 *                                                                           *
 * Unless required by applicable law or agreed to in writing,                *
 * software distributed under the License is distributed on an               *
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY                    *
 * KIND, either express or implied.  See the License for the                 *
 * specific language governing permissions and limitations                   *
 * under the License.                                                        *
 *                                                                           *
 *                                                                           *
 * This file is part of the BeanShell Java Scripting distribution.           *
 * Documentation and updates may be found at http://www.beanshell.org/       *
 * Patrick Niemeyer (pat@pat.net)                                            *
 * Author of Learning Java, O'Reilly & Associates                            *
 *                                                                           *
 *****************************************************************************/
package bsh;

/**
 * The Interface ParserConstants.
 */
public interface ParserConstants {

    /** The eof. */
    int EOF = 0;
    /** The nonprintable. */
    int NONPRINTABLE = 6;
    /** The single line comment. */
    int SINGLE_LINE_COMMENT = 7;
    /** The hash bang comment. */
    int HASH_BANG_COMMENT = 8;
    /** The multi line comment. */
    int MULTI_LINE_COMMENT = 9;
    /** The abstract. */
    int ABSTRACT = 10;
    /** The boolean. */
    int BOOLEAN = 11;
    /** The break. */
    int BREAK = 12;
    /** The class. */
    int CLASS = 13;
    /** The byte. */
    int BYTE = 14;
    /** The case. */
    int CASE = 15;
    /** The catch. */
    int CATCH = 16;
    /** The char. */
    int CHAR = 17;
    /** The const. */
    int CONST = 18;
    /** The continue. */
    int CONTINUE = 19;
    /** The default. */
    int _DEFAULT = 20;
    /** The do. */
    int DO = 21;
    /** The double. */
    int DOUBLE = 22;
    /** The else. */
    int ELSE = 23;
    /** The enum. */
    int ENUM = 24;
    /** The extends. */
    int EXTENDS = 25;
    /** The false. */
    int FALSE = 26;
    /** The final. */
    int FINAL = 27;
    /** The finally. */
    int FINALLY = 28;
    /** The float. */
    int FLOAT = 29;
    /** The for. */
    int FOR = 30;
    /** The goto. */
    int GOTO = 31;
    /** The if. */
    int IF = 32;
    /** The implements. */
    int IMPLEMENTS = 33;
    /** The import. */
    int IMPORT = 34;
    /** The instanceof. */
    int INSTANCEOF = 35;
    /** The int. */
    int INT = 36;
    /** The interface. */
    int INTERFACE = 37;
    /** The long. */
    int LONG = 38;
    /** The native. */
    int NATIVE = 39;
    /** The new. */
    int NEW = 40;
    /** The null. */
    int NULL = 41;
    /** The package. */
    int PACKAGE = 42;
    /** The private. */
    int PRIVATE = 43;
    /** The protected. */
    int PROTECTED = 44;
    /** The public. */
    int PUBLIC = 45;
    /** The return. */
    int RETURN = 46;
    /** The short. */
    int SHORT = 47;
    /** The static. */
    int STATIC = 48;
    /** The strictfp. */
    int STRICTFP = 49;
    /** The switch. */
    int SWITCH = 50;
    /** The synchronized. */
    int SYNCHRONIZED = 51;
    /** The transient. */
    int TRANSIENT = 52;
    /** The throw. */
    int THROW = 53;
    /** The throws. */
    int THROWS = 54;
    /** The true. */
    int TRUE = 55;
    /** The try. */
    int TRY = 56;
    /** The void. */
    int VOID = 57;
    /** The volatile. */
    int VOLATILE = 58;
    /** The while. */
    int WHILE = 59;
    /** The integer literal. */
    int INTEGER_LITERAL = 60;
    /** The decimal literal. */
    int DECIMAL_LITERAL = 61;
    /** The hex literal. */
    int HEX_LITERAL = 62;
    /** The octal literal. */
    int OCTAL_LITERAL = 63;
    /** The floating point literal. */
    int FLOATING_POINT_LITERAL = 64;
    /** The exponent. */
    int EXPONENT = 65;
    /** The character literal. */
    int CHARACTER_LITERAL = 66;
    /** The string literal. */
    int STRING_LITERAL = 67;
    /** The formal comment. */
    int FORMAL_COMMENT = 68;
    /** The identifier. */
    int IDENTIFIER = 69;
    /** The letter. */
    int LETTER = 70;
    /** The digit. */
    int DIGIT = 71;
    /** The lparen. */
    int LPAREN = 72;
    /** The rparen. */
    int RPAREN = 73;
    /** The lbrace. */
    int LBRACE = 74;
    /** The rbrace. */
    int RBRACE = 75;
    /** The lbracket. */
    int LBRACKET = 76;
    /** The rbracket. */
    int RBRACKET = 77;
    /** The semicolon. */
    int SEMICOLON = 78;
    /** The comma. */
    int COMMA = 79;
    /** The dot. */
    int DOT = 80;
    /** The assign. */
    int ASSIGN = 81;
    /** The gt. */
    int GT = 82;
    /** The gtx. */
    int GTX = 83;
    /** The lt. */
    int LT = 84;
    /** The ltx. */
    int LTX = 85;
    /** The bang. */
    int BANG = 86;
    /** The tilde. */
    int TILDE = 87;
    /** The hook. */
    int HOOK = 88;
    /** The colon. */
    int COLON = 89;
    /** The eq. */
    int EQ = 90;
    /** The le. */
    int LE = 91;
    /** The lex. */
    int LEX = 92;
    /** The ge. */
    int GE = 93;
    /** The gex. */
    int GEX = 94;
    /** The ne. */
    int NE = 95;
    /** The bool or. */
    int BOOL_OR = 96;
    /** The bool orx. */
    int BOOL_ORX = 97;
    /** The bool and. */
    int BOOL_AND = 98;
    /** The bool andx. */
    int BOOL_ANDX = 99;
    /** The incr. */
    int INCR = 100;
    /** The decr. */
    int DECR = 101;
    /** The plus. */
    int PLUS = 102;
    /** The minus. */
    int MINUS = 103;
    /** The star. */
    int STAR = 104;
    /** The slash. */
    int SLASH = 105;
    /** The bit and. */
    int BIT_AND = 106;
    /** The bit andx. */
    int BIT_ANDX = 107;
    /** The bit or. */
    int BIT_OR = 108;
    /** The bit orx. */
    int BIT_ORX = 109;
    /** The xor. */
    int XOR = 110;
    /** The mod. */
    int MOD = 111;
    /** The lshift. */
    int LSHIFT = 112;
    /** The lshiftx. */
    int LSHIFTX = 113;
    /** The rsignedshift. */
    int RSIGNEDSHIFT = 114;
    /** The rsignedshiftx. */
    int RSIGNEDSHIFTX = 115;
    /** The runsignedshift. */
    int RUNSIGNEDSHIFT = 116;
    /** The runsignedshiftx. */
    int RUNSIGNEDSHIFTX = 117;
    /** The plusassign. */
    int PLUSASSIGN = 118;
    /** The minusassign. */
    int MINUSASSIGN = 119;
    /** The starassign. */
    int STARASSIGN = 120;
    /** The slashassign. */
    int SLASHASSIGN = 121;
    /** The andassign. */
    int ANDASSIGN = 122;
    /** The andassignx. */
    int ANDASSIGNX = 123;
    /** The orassign. */
    int ORASSIGN = 124;
    /** The orassignx. */
    int ORASSIGNX = 125;
    /** The xorassign. */
    int XORASSIGN = 126;
    /** The modassign. */
    int MODASSIGN = 127;
    /** The lshiftassign. */
    int LSHIFTASSIGN = 128;
    /** The lshiftassignx. */
    int LSHIFTASSIGNX = 129;
    /** The rsignedshiftassign. */
    int RSIGNEDSHIFTASSIGN = 130;
    /** The rsignedshiftassignx. */
    int RSIGNEDSHIFTASSIGNX = 131;
    /** The runsignedshiftassign. */
    int RUNSIGNEDSHIFTASSIGN = 132;
    /** The runsignedshiftassignx. */
    int RUNSIGNEDSHIFTASSIGNX = 133;
    /** The default. */
    int DEFAULT = 0;
    /** The token image. */
    String[] tokenImage = {/* 0 */ "<EOF>", /* 1 */ "\" \"", /* 2 */ "\"\\t\"",
            /* 3 */ "\"\\r\"", /* 4 */ "\"\\f\"", /* 5 */ "\"\\n\"",
            /* 6 */ "<NONPRINTABLE>", /* 7 */ "<SINGLE_LINE_COMMENT>",
            /* 8 */ "<HASH_BANG_COMMENT>", /* 9 */ "<MULTI_LINE_COMMENT>",
            /* 10 */ "\"abstract\"", /* 11 */ "\"boolean\"",
            /* 12 */ "\"break\"", /* 13 */ "\"class\"", /* 14 */ "\"byte\"",
            /* 15 */ "\"case\"", /* 16 */ "\"catch\"", /* 17 */ "\"char\"",
            /* 18 */ "\"const\"", /* 19 */ "\"continue\"",
            /* 20 */ "\"default\"", /* 21 */ "\"do\"", /* 22 */ "\"double\"",
            /* 23 */ "\"else\"", /* 24 */ "\"enum\"", /* 25 */ "\"extends\"",
            /* 26 */ "\"false\"", /* 27 */ "\"final\"", /* 28 */ "\"finally\"",
            /* 29 */ "\"float\"", /* 30 */ "\"for\"", /* 31 */ "\"goto\"",
            /* 32 */ "\"if\"", /* 33 */ "\"implements\"", /* 34 */ "\"import\"",
            /* 35 */ "\"instanceof\"", /* 36 */ "\"int\"",
            /* 37 */ "\"interface\"", /* 38 */ "\"long\"",
            /* 39 */ "\"native\"", /* 40 */ "\"new\"", /* 41 */ "\"null\"",
            /* 42 */ "\"package\"", /* 43 */ "\"private\"",
            /* 44 */ "\"protected\"", /* 45 */ "\"public\"",
            /* 46 */ "\"return\"", /* 47 */ "\"short\"", /* 48 */ "\"static\"",
            /* 49 */ "\"strictfp\"", /* 50 */ "\"switch\"",
            /* 51 */ "\"synchronized\"", /* 52 */ "\"transient\"",
            /* 53 */ "\"throw\"", /* 54 */ "\"throws\"", /* 55 */ "\"true\"",
            /* 56 */ "\"try\"", /* 57 */ "\"void\"", /* 58 */ "\"volatile\"",
            /* 59 */ "\"while\"", /* 60 */ "<INTEGER_LITERAL>",
            /* 61 */ "<DECIMAL_LITERAL>", /* 62 */ "<HEX_LITERAL>",
            /* 63 */ "<OCTAL_LITERAL>", /* 64 */ "<FLOATING_POINT_LITERAL>",
            /* 65 */ "<EXPONENT>", /* 66 */ "<CHARACTER_LITERAL>",
            /* 67 */ "<STRING_LITERAL>", /* 68 */ "<FORMAL_COMMENT>",
            /* 69 */ "<IDENTIFIER>", /* 70 */ "<LETTER>", /* 71 */ "<DIGIT>",
            /* 72 */ "\"(\"", /* 73 */ "\")\"", /* 74 */ "\"{\"",
            /* 75 */ "\"}\"", /* 76 */ "\"[\"", /* 77 */ "\"]\"",
            /* 78 */ "\";\"", /* 79 */ "\",\"", /* 80 */ "\".\"",
            /* 81 */ "\"=\"", /* 82 */ "\">\"", /* 83 */ "\"@gt\"",
            /* 84 */ "\"<\"", /* 85 */ "\"@lt\"", /* 86 */ "\"!\"",
            /* 87 */ "\"~\"", /* 88 */ "\"?\"", /* 89 */ "\":\"",
            /* 90 */ "\"==\"", /* 91 */ "\"<=\"", /* 92 */ "\"@lteq\"",
            /* 93 */ "\">=\"", /* 94 */ "\"@gteq\"", /* 95 */ "\"!=\"",
            /* 96 */ "\"||\"", /* 97 */ "\"@or\"", /* 98 */ "\"&&\"",
            /* 99 */ "\"@and\"", /* 100 */ "\"++\"", /* 101 */ "\"--\"",
            /* 102 */ "\"+\"", /* 103 */ "\"-\"", /* 104 */ "\"*\"",
            /* 105 */ "\"/\"", /* 106 */ "\"&\"", /* 107 */ "\"@bitwise_and\"",
            /* 108 */ "\"|\"", /* 109 */ "\"@bitwise_or\"", /* 110 */ "\"^\"",
            /* 111 */ "\"%\"", /* 112 */ "\"<<\"", /* 113 */ "\"@left_shift\"",
            /* 114 */ "\">>\"", /* 115 */ "\"@right_shift\"",
            /* 116 */ "\">>>\"", /* 117 */ "\"@right_unsigned_shift\"",
            /* 118 */ "\"+=\"", /* 119 */ "\"-=\"", /* 120 */ "\"*=\"",
            /* 121 */ "\"/=\"", /* 122 */ "\"&=\"", /* 123 */ "\"@and_assign\"",
            /* 124 */ "\"|=\"", /* 125 */ "\"@or_assign\"", /* 126 */ "\"^=\"",
            /* 127 */ "\"%=\"", /* 128 */ "\"<<=\"",
            /* 129 */ "\"@left_shift_assign\"", /* 130 */ "\">>=\"",
            /* 131 */ "\"@right_shift_assign\"", /* 132 */ "\">>>=\"",
            /* 133 */ "\"@right_unsigned_shift_assign\""};
}
