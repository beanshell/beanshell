/* Generated By:JJTree&JavaCC: Do not edit this line. Parser.java *****************************************************************************
 * Licensed to the Apache Software Foundation (ASF) under one                *
 * or more contributor license agreements.  See the NOTICE file              *
 * distributed with this work for additional information                     *
 * regarding copyright ownership.  The ASF licenses this file                *
 * to you under the Apache License, Version 2.0 (the                         *
 * "License"); you may not use this file except in compliance                *
 * with the License.  You may obtain a copy of the License at                *
 *                                                                           *
 *     http://www.apache.org/licenses/LICENSE-2.0                            *
 *                                                                           *
 * Unless required by applicable law or agreed to in writing,                *
 * software distributed under the License is distributed on an               *
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY                    *
 * KIND, either express or implied.  See the License for the                 *
 * specific language governing permissions and limitations                   *
 * under the License.                                                        *
 *                                                                           *
 *                                                                           *
 * This file is part of the BeanShell Java Scripting distribution.           *
 * Documentation and updates may be found at http://www.beanshell.org/       *
 * Patrick Niemeyer (pat@pat.net)                                            *
 * Author of Learning Java, O'Reilly & Associates                            *
 *                                                                           *
 *****************************************************************************/
package bsh;

import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;

/**
 * This is the BeanShell parser. It is used internally by the Interpreter
 * class (which is probably what you are looking for). The parser knows
 * only how to parse the structure of the language, it does not understand
 * names, commands, etc.
 * <p>
 * You can use the Parser from the command line to do basic structural
 * validation of BeanShell files without actually executing them. e.g.
 * <code><pre>
     java bsh.Parser [ -p ] file [ file ] [ ... ]
 </pre></code>
 * <p>
 * The -p option causes the abstract syntax to be printed.
 * </p>
 *
 * From code you'd use the Parser like this:
 * <code><pre>
     Parser parser = new Parser(in);
     while(!(eof=parser.Line())) {
         SimpleNode node = parser.popNode();
         // use the node, etc. (See bsh.BSH* classes)
     }
 </pre></code>
 */
public class Parser/* @bgen(jjtree) */ implements ParserTreeConstants,
        ParserConstants {/* @bgen(jjtree) */

    /** The jjtree. */
    protected JJTParserState jjtree = new JJTParserState();
    /** The retain comments. */
    boolean retainComments = false;

    /**
     * Sets the retain comments.
     *
     * @param b
     *            the new retain comments
     */
    public void setRetainComments(final boolean b) {
        this.retainComments = b;
    }

    /**
     * Jjtree open node scope.
     *
     * @param n
     *            the n
     */
    void jjtreeOpenNodeScope(final Node n) {
        ((SimpleNode) n).firstToken = this.getToken(1);
    }

    /**
     * Jjtree close node scope.
     *
     * @param n
     *            the n
     */
    void jjtreeCloseNodeScope(final Node n) {
        ((SimpleNode) n).lastToken = this.getToken(0);
    }

    /**
     * Re-initialize the input stream and token source.
     *
     * @param in
     *            the in
     */
    void reInitInput(final Reader in) {
        this.ReInit(in);
    }

    /**
     * Pop node.
     *
     * @return the simple node
     */
    public SimpleNode popNode() {
        if (this.jjtree.nodeArity() > 0) // number of child nodes
            return (SimpleNode) this.jjtree.popNode();
        else
            return null;
    }

    /**
     * Explicitly re-initialize just the token reader.
     * This seems to be necessary to avoid certain looping errors when
     * reading bogus input. See Interpreter.
     *
     * @param in
     *            the in
     */
    void reInitTokenInput(final Reader in) {
        this.jj_input_stream.ReInit(in, this.jj_input_stream.getEndLine(),
                this.jj_input_stream.getEndColumn());
    }

    /**
     * The main method.
     *
     * @param args
     *            the arguments
     * @throws IOException
     *             Signals that an I/O exception has occurred.
     * @throws ParseException
     *             the parse exception
     */
    public static void main(final String[] args)
            throws IOException, ParseException {
        boolean print = false;
        int i = 0;
        if (args[0].equals("-p")) {
            i++;
            print = true;
        }
        for (; i < args.length; i++) {
            final Reader in = new FileReader(args[i]);
            final Parser parser = new Parser(in);
            parser.setRetainComments(true);
            while (!parser.Line()/* eof */)
                if (print)
                    System.out.println(parser.popNode());
        }
    }

    /**
     * Lookahead for the enhanced for statement.
     * Expect "for" "(" and then see whether we hit ":" or a ";" first.
     *
     * @return true, if is regular for statement
     */
    boolean isRegularForStatement() {
        int curTok = 1;
        Token tok;
        tok = this.getToken(curTok++);
        if (tok.kind != FOR)
            return false;
        tok = this.getToken(curTok++);
        if (tok.kind != LPAREN)
            return false;
        while (true) {
            tok = this.getToken(curTok++);
            switch (tok.kind) {
                case COLON:
                    return false;
                case SEMICOLON:
                    return true;
                case EOF:
                    return false;
            }
        }
    }

    /**
     * Generate a ParseException with the specified message, pointing to the
     * current token.
     * The auto-generated Parser.generateParseException() method does not
     * provide line number info, therefore we do this.
     *
     * @param message
     *            the message
     * @return the parses the exception
     */
    ParseException createParseException(final String message) {
        final Token errortok = this.token;
        final int line = errortok.beginLine, column = errortok.beginColumn;
        return new ParseException("Parse error at line " + line + ", column "
                + column + " : " + message);
    }

    /**
     * Line.
     *
     * @return true, if successful
     * @throws ParseException
     *             the parse exception
     *
     * Thanks to Sreenivasa Viswanadha for suggesting how to get rid of
     * expensive
     * lookahead here.
     */
    public final boolean Line() throws ParseException {
        switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
            case 0:
                this.jj_consume_token(0);
                Interpreter.debug("End of File!"); {
                if (true)
                    return true;
            }
                break;
            default:
                this.jj_la1[0] = this.jj_gen;
                if (this.jj_2_1(1)) {
                    this.BlockStatement();
                    {
                        if (true)
                            return false;
                    }
                } else {
                    this.jj_consume_token(-1);
                    throw new ParseException();
                }
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * ***************************************
     * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
     * ***************************************.
     *
     * @param context
     *            the context
     * @param lookahead
     *            the lookahead
     * @return the modifiers
     * @throws ParseException
     *             the parse exception
     *
     * Gather modifiers for a class, method, or field.
     * I lookahead is true then we are being called as part of a lookahead and
     * we
     * should not enforce any rules. Otherwise we validate based on context
     * (field, method, class)
     */
    public final Modifiers Modifiers(final int context, final boolean lookahead)
            throws ParseException {
        Modifiers mods = null;
        label_1: while (true) {
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case ABSTRACT:
                case FINAL:
                case NATIVE:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case STATIC:
                case STRICTFP:
                case SYNCHRONIZED:
                case TRANSIENT:
                case VOLATILE:;
                    break;
                default:
                    this.jj_la1[1] = this.jj_gen;
                    break label_1;
            }
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case PRIVATE:
                    this.jj_consume_token(PRIVATE);
                    break;
                case PROTECTED:
                    this.jj_consume_token(PROTECTED);
                    break;
                case PUBLIC:
                    this.jj_consume_token(PUBLIC);
                    break;
                case SYNCHRONIZED:
                    this.jj_consume_token(SYNCHRONIZED);
                    break;
                case FINAL:
                    this.jj_consume_token(FINAL);
                    break;
                case NATIVE:
                    this.jj_consume_token(NATIVE);
                    break;
                case TRANSIENT:
                    this.jj_consume_token(TRANSIENT);
                    break;
                case VOLATILE:
                    this.jj_consume_token(VOLATILE);
                    break;
                case ABSTRACT:
                    this.jj_consume_token(ABSTRACT);
                    break;
                case STATIC:
                    this.jj_consume_token(STATIC);
                    break;
                case STRICTFP:
                    this.jj_consume_token(STRICTFP);
                    break;
                default:
                    this.jj_la1[2] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
            }
            if (!lookahead)
                try {
                    if (mods == null)
                        mods = new Modifiers();
                    mods.addModifier(context, this.getToken(0).image);
                } catch (final IllegalStateException e) {
                    {
                        if (true)
                            throw this.createParseException(e.getMessage());
                    }
                }
        }
        {
            if (true)
                return mods;
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Class declaration.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void ClassDeclaration() throws ParseException {
        /* @bgen(jjtree) ClassDeclaration */
        final BSHClassDeclaration jjtn000 = new BSHClassDeclaration(
                JJTCLASSDECLARATION);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        Modifiers mods;
        Token name;
        int numInterfaces;
        try {
            mods = this.Modifiers(Modifiers.CLASS, false);
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case CLASS:
                    this.jj_consume_token(CLASS);
                    break;
                case INTERFACE:
                    this.jj_consume_token(INTERFACE);
                    jjtn000.isInterface = true;
                    break;
                default:
                    this.jj_la1[3] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
            }
            name = this.jj_consume_token(IDENTIFIER);
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case EXTENDS:
                    this.jj_consume_token(EXTENDS);
                    this.AmbiguousName();
                    jjtn000.extend = true;
                    break;
                default:
                    this.jj_la1[4] = this.jj_gen;;
            }
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case IMPLEMENTS:
                    this.jj_consume_token(IMPLEMENTS);
                    numInterfaces = this.NameList();
                    jjtn000.numInterfaces = numInterfaces;
                    break;
                default:
                    this.jj_la1[5] = this.jj_gen;;
            }
            this.Block();
            this.jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            this.jjtreeCloseNodeScope(jjtn000);
            jjtn000.modifiers = mods;
            jjtn000.name = name.image;
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Method declaration.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void MethodDeclaration() throws ParseException {
        /* @bgen(jjtree) MethodDeclaration */
        final BSHMethodDeclaration jjtn000 = new BSHMethodDeclaration(
                JJTMETHODDECLARATION);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        Token t = null;
        Modifiers mods;
        int count;
        try {
            mods = this.Modifiers(Modifiers.METHOD, false);
            jjtn000.modifiers = mods;
            if (this.jj_2_2(2147483647)) {
                t = this.jj_consume_token(IDENTIFIER);
                jjtn000.name = t.image;
            } else
                switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                    case BOOLEAN:
                    case BYTE:
                    case CHAR:
                    case DOUBLE:
                    case FLOAT:
                    case INT:
                    case LONG:
                    case SHORT:
                    case VOID:
                    case IDENTIFIER:
                        this.ReturnType();
                        t = this.jj_consume_token(IDENTIFIER);
                        jjtn000.name = t.image;
                        break;
                    default:
                        this.jj_la1[6] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();
                }
            this.FormalParameters();
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case THROWS:
                    this.jj_consume_token(THROWS);
                    count = this.NameList();
                    jjtn000.numThrows = count;
                    break;
                default:
                    this.jj_la1[7] = this.jj_gen;;
            }
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case STATIC:
                case LBRACE:
                    this.Block();
                    break;
                case SEMICOLON:
                    this.jj_consume_token(SEMICOLON);
                    break;
                default:
                    this.jj_la1[8] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Package declaration.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void PackageDeclaration() throws ParseException {
        /* @bgen(jjtree) PackageDeclaration */
        final BSHPackageDeclaration jjtn000 = new BSHPackageDeclaration(
                JJTPACKAGEDECLARATION);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        try {
            this.jj_consume_token(PACKAGE);
            this.AmbiguousName();
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Import declaration.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void ImportDeclaration() throws ParseException {
        /* @bgen(jjtree) ImportDeclaration */
        final BSHImportDeclaration jjtn000 = new BSHImportDeclaration(
                JJTIMPORTDECLARATION);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        Token s = null;
        Token t = null;
        try {
            if (this.jj_2_3(3)) {
                this.jj_consume_token(IMPORT);
                switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                    case STATIC:
                        s = this.jj_consume_token(STATIC);
                        break;
                    default:
                        this.jj_la1[9] = this.jj_gen;;
                }
                this.AmbiguousName();
                switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                    case DOT:
                        t = this.jj_consume_token(DOT);
                        this.jj_consume_token(STAR);
                        break;
                    default:
                        this.jj_la1[10] = this.jj_gen;;
                }
                this.jj_consume_token(SEMICOLON);
                this.jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                this.jjtreeCloseNodeScope(jjtn000);
                if (s != null)
                    jjtn000.staticImport = true;
                if (t != null)
                    jjtn000.importPackage = true;
            } else
                switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                    case IMPORT:
                        this.jj_consume_token(IMPORT);
                        this.jj_consume_token(STAR);
                        this.jj_consume_token(SEMICOLON);
                        this.jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        this.jjtreeCloseNodeScope(jjtn000);
                        jjtn000.superImport = true;
                        break;
                    default:
                        this.jj_la1[11] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();
                }
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Variable declarator.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void VariableDeclarator() throws ParseException {
        /* @bgen(jjtree) VariableDeclarator */
        final BSHVariableDeclarator jjtn000 = new BSHVariableDeclarator(
                JJTVARIABLEDECLARATOR);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        Token t;
        try {
            t = this.jj_consume_token(IDENTIFIER);
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case ASSIGN:
                    this.jj_consume_token(ASSIGN);
                    this.VariableInitializer();
                    break;
                default:
                    this.jj_la1[12] = this.jj_gen;;
            }
            this.jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            this.jjtreeCloseNodeScope(jjtn000);
            jjtn000.name = t.image;
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Variable initializer.
     *
     * @throws ParseException
     *             the parse exception
     *
     * this originally handled postfix array dimensions...
     * void VariableDeclaratorId() #VariableDeclaratorId :
     * { Token t; }
     * {
     * t=<IDENTIFIER> { jjtThis.name = t.image; }
     * ("[" "]" { jjtThis.addUndefinedDimension(); })*
     * }
     */
    public final void VariableInitializer() throws ParseException {
        switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
            case LBRACE:
                this.ArrayInitializer();
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case TRUE:
            case VOID:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case BANG:
            case TILDE:
            case INCR:
            case DECR:
            case PLUS:
            case MINUS:
                this.Expression();
                break;
            default:
                this.jj_la1[13] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
        }
    }

    /**
     * Array initializer.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void ArrayInitializer() throws ParseException {
        /* @bgen(jjtree) ArrayInitializer */
        final BSHArrayInitializer jjtn000 = new BSHArrayInitializer(
                JJTARRAYINITIALIZER);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        try {
            this.jj_consume_token(LBRACE);
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case TRUE:
                case VOID:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case LBRACE:
                case BANG:
                case TILDE:
                case INCR:
                case DECR:
                case PLUS:
                case MINUS:
                    this.VariableInitializer();
                    label_2: while (true) {
                        if (this.jj_2_4(2))
                            ;
                        else
                            break label_2;
                        this.jj_consume_token(COMMA);
                        this.VariableInitializer();
                    }
                    break;
                default:
                    this.jj_la1[14] = this.jj_gen;;
            }
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case COMMA:
                    this.jj_consume_token(COMMA);
                    break;
                default:
                    this.jj_la1[15] = this.jj_gen;;
            }
            this.jj_consume_token(RBRACE);
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Formal parameters.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void FormalParameters() throws ParseException {
        /* @bgen(jjtree) FormalParameters */
        final BSHFormalParameters jjtn000 = new BSHFormalParameters(
                JJTFORMALPARAMETERS);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        try {
            this.jj_consume_token(LPAREN);
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FLOAT:
                case INT:
                case LONG:
                case SHORT:
                case IDENTIFIER:
                    this.FormalParameter();
                    label_3: while (true) {
                        switch (this.jj_ntk == -1 ? this.jj_ntk()
                                : this.jj_ntk) {
                            case COMMA:;
                                break;
                            default:
                                this.jj_la1[16] = this.jj_gen;
                                break label_3;
                        }
                        this.jj_consume_token(COMMA);
                        this.FormalParameter();
                    }
                    break;
                default:
                    this.jj_la1[17] = this.jj_gen;;
            }
            this.jj_consume_token(RPAREN);
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Formal parameter.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void FormalParameter() throws ParseException {
        /* @bgen(jjtree) FormalParameter */
        final BSHFormalParameter jjtn000 = new BSHFormalParameter(
                JJTFORMALPARAMETER);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        Token t;
        try {
            if (this.jj_2_5(2)) {
                this.Type();
                t = this.jj_consume_token(IDENTIFIER);
                this.jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                this.jjtreeCloseNodeScope(jjtn000);
                jjtn000.name = t.image;
            } else
                switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                    case IDENTIFIER:
                        t = this.jj_consume_token(IDENTIFIER);
                        this.jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        this.jjtreeCloseNodeScope(jjtn000);
                        jjtn000.name = t.image;
                        break;
                    default:
                        this.jj_la1[18] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();
                }
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Type.
     *
     * @throws ParseException
     *             the parse exception
     *
     * Type, name and expression syntax follows.
     */
    public final void Type() throws ParseException {
        /* @bgen(jjtree) Type */
        final BSHType jjtn000 = new BSHType(JJTTYPE);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        try {
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FLOAT:
                case INT:
                case LONG:
                case SHORT:
                    this.PrimitiveType();
                    break;
                case IDENTIFIER:
                    this.AmbiguousName();
                    break;
                default:
                    this.jj_la1[19] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
            }
            label_4: while (true) {
                if (this.jj_2_6(2))
                    ;
                else
                    break label_4;
                this.jj_consume_token(LBRACKET);
                this.jj_consume_token(RBRACKET);
                jjtn000.addArrayDimension();
            }
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Return type.
     *
     * @throws ParseException
     *             the parse exception
     *
     * Originally called ResultType in the grammar
     */
    public final void ReturnType() throws ParseException {
        /* @bgen(jjtree) ReturnType */
        final BSHReturnType jjtn000 = new BSHReturnType(JJTRETURNTYPE);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        try {
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case VOID:
                    this.jj_consume_token(VOID);
                    this.jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    this.jjtreeCloseNodeScope(jjtn000);
                    jjtn000.isVoid = true;
                    break;
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FLOAT:
                case INT:
                case LONG:
                case SHORT:
                case IDENTIFIER:
                    this.Type();
                    break;
                default:
                    this.jj_la1[20] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Primitive type.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void PrimitiveType() throws ParseException {
        /* @bgen(jjtree) PrimitiveType */
        final BSHPrimitiveType jjtn000 = new BSHPrimitiveType(JJTPRIMITIVETYPE);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        try {
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case BOOLEAN:
                    this.jj_consume_token(BOOLEAN);
                    this.jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    this.jjtreeCloseNodeScope(jjtn000);
                    jjtn000.type = Boolean.TYPE;
                    break;
                case CHAR:
                    this.jj_consume_token(CHAR);
                    this.jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    this.jjtreeCloseNodeScope(jjtn000);
                    jjtn000.type = Character.TYPE;
                    break;
                case BYTE:
                    this.jj_consume_token(BYTE);
                    this.jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    this.jjtreeCloseNodeScope(jjtn000);
                    jjtn000.type = Byte.TYPE;
                    break;
                case SHORT:
                    this.jj_consume_token(SHORT);
                    this.jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    this.jjtreeCloseNodeScope(jjtn000);
                    jjtn000.type = Short.TYPE;
                    break;
                case INT:
                    this.jj_consume_token(INT);
                    this.jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    this.jjtreeCloseNodeScope(jjtn000);
                    jjtn000.type = Integer.TYPE;
                    break;
                case LONG:
                    this.jj_consume_token(LONG);
                    this.jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    this.jjtreeCloseNodeScope(jjtn000);
                    jjtn000.type = Long.TYPE;
                    break;
                case FLOAT:
                    this.jj_consume_token(FLOAT);
                    this.jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    this.jjtreeCloseNodeScope(jjtn000);
                    jjtn000.type = Float.TYPE;
                    break;
                case DOUBLE:
                    this.jj_consume_token(DOUBLE);
                    this.jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    this.jjtreeCloseNodeScope(jjtn000);
                    jjtn000.type = Double.TYPE;
                    break;
                default:
                    this.jj_la1[21] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Ambiguous name.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void AmbiguousName() throws ParseException {
        /* @bgen(jjtree) AmbiguousName */
        final BSHAmbiguousName jjtn000 = new BSHAmbiguousName(JJTAMBIGUOUSNAME);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        Token t;
        StringBuffer s;
        try {
            t = this.jj_consume_token(IDENTIFIER);
            s = new StringBuffer(t.image);
            label_5: while (true) {
                if (this.jj_2_7(2))
                    ;
                else
                    break label_5;
                this.jj_consume_token(DOT);
                t = this.jj_consume_token(IDENTIFIER);
                s.append("." + t.image);
            }
            this.jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            this.jjtreeCloseNodeScope(jjtn000);
            jjtn000.text = s.toString();
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Name list.
     *
     * @return the int
     * @throws ParseException
     *             the parse exception
     */
    public final int NameList() throws ParseException {
        int count = 0;
        this.AmbiguousName();
        ++count;
        label_6: while (true) {
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case COMMA:;
                    break;
                default:
                    this.jj_la1[22] = this.jj_gen;
                    break label_6;
            }
            this.jj_consume_token(COMMA);
            this.AmbiguousName();
            ++count;
        }
        {
            if (true)
                return count;
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Expression.
     *
     * @throws ParseException
     *             the parse exception
     *
     * Expression syntax follows.
     */
    public final void Expression() throws ParseException {
        if (this.jj_2_8(2147483647))
            this.Assignment();
        else
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case TRUE:
                case VOID:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case BANG:
                case TILDE:
                case INCR:
                case DECR:
                case PLUS:
                case MINUS:
                    this.ConditionalExpression();
                    break;
                default:
                    this.jj_la1[23] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
            }
    }

    /**
     * Assignment.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void Assignment() throws ParseException {
        /* @bgen(jjtree) Assignment */
        final BSHAssignment jjtn000 = new BSHAssignment(JJTASSIGNMENT);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        int op;
        try {
            this.PrimaryExpression();
            op = this.AssignmentOperator();
            jjtn000.operator = op;
            this.Expression();
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Assignment operator.
     *
     * @return the int
     * @throws ParseException
     *             the parse exception
     */
    public final int AssignmentOperator() throws ParseException {
        Token t;
        switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
            case ASSIGN:
                this.jj_consume_token(ASSIGN);
                break;
            case STARASSIGN:
                this.jj_consume_token(STARASSIGN);
                break;
            case SLASHASSIGN:
                this.jj_consume_token(SLASHASSIGN);
                break;
            case MODASSIGN:
                this.jj_consume_token(MODASSIGN);
                break;
            case PLUSASSIGN:
                this.jj_consume_token(PLUSASSIGN);
                break;
            case MINUSASSIGN:
                this.jj_consume_token(MINUSASSIGN);
                break;
            case ANDASSIGN:
                this.jj_consume_token(ANDASSIGN);
                break;
            case XORASSIGN:
                this.jj_consume_token(XORASSIGN);
                break;
            case ORASSIGN:
                this.jj_consume_token(ORASSIGN);
                break;
            case LSHIFTASSIGN:
                this.jj_consume_token(LSHIFTASSIGN);
                break;
            case LSHIFTASSIGNX:
                this.jj_consume_token(LSHIFTASSIGNX);
                break;
            case RSIGNEDSHIFTASSIGN:
                this.jj_consume_token(RSIGNEDSHIFTASSIGN);
                break;
            case RSIGNEDSHIFTASSIGNX:
                this.jj_consume_token(RSIGNEDSHIFTASSIGNX);
                break;
            case RUNSIGNEDSHIFTASSIGN:
                this.jj_consume_token(RUNSIGNEDSHIFTASSIGN);
                break;
            case RUNSIGNEDSHIFTASSIGNX:
                this.jj_consume_token(RUNSIGNEDSHIFTASSIGNX);
                break;
            default:
                this.jj_la1[24] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
        }
        t = this.getToken(0);
        {
            if (true)
                return t.kind;
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Conditional expression.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void ConditionalExpression() throws ParseException {
        this.ConditionalOrExpression();
        switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
            case HOOK:
                this.jj_consume_token(HOOK);
                this.Expression();
                this.jj_consume_token(COLON);
                final BSHTernaryExpression jjtn001 = new BSHTernaryExpression(
                        JJTTERNARYEXPRESSION);
                boolean jjtc001 = true;
                this.jjtree.openNodeScope(jjtn001);
                this.jjtreeOpenNodeScope(jjtn001);
                try {
                    this.ConditionalExpression();
                } catch (final Throwable jjte001) {
                    if (jjtc001) {
                        this.jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                    } else
                        this.jjtree.popNode();
                    if (jjte001 instanceof RuntimeException)
                        if (true)
                            throw (RuntimeException) jjte001;
                    if (jjte001 instanceof ParseException)
                        if (true)
                            throw (ParseException) jjte001;
                    {
                        if (true)
                            throw (Error) jjte001;
                    }
                } finally {
                    if (jjtc001) {
                        this.jjtree.closeNodeScope(jjtn001, 3);
                        this.jjtreeCloseNodeScope(jjtn001);
                    }
                }
                break;
            default:
                this.jj_la1[25] = this.jj_gen;;
        }
    }

    /**
     * Conditional or expression.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void ConditionalOrExpression() throws ParseException {
        Token t = null;
        this.ConditionalAndExpression();
        label_7: while (true) {
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case BOOL_OR:
                case BOOL_ORX:;
                    break;
                default:
                    this.jj_la1[26] = this.jj_gen;
                    break label_7;
            }
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case BOOL_OR:
                    t = this.jj_consume_token(BOOL_OR);
                    break;
                case BOOL_ORX:
                    t = this.jj_consume_token(BOOL_ORX);
                    break;
                default:
                    this.jj_la1[27] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
            }
            this.ConditionalAndExpression();
            final BSHBinaryExpression jjtn001 = new BSHBinaryExpression(
                    JJTBINARYEXPRESSION);
            boolean jjtc001 = true;
            this.jjtree.openNodeScope(jjtn001);
            this.jjtreeOpenNodeScope(jjtn001);
            try {
                this.jjtree.closeNodeScope(jjtn001, 2);
                jjtc001 = false;
                this.jjtreeCloseNodeScope(jjtn001);
                jjtn001.kind = t.kind;
            } finally {
                if (jjtc001) {
                    this.jjtree.closeNodeScope(jjtn001, 2);
                    this.jjtreeCloseNodeScope(jjtn001);
                }
            }
        }
    }

    /**
     * Conditional and expression.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void ConditionalAndExpression() throws ParseException {
        Token t = null;
        this.InclusiveOrExpression();
        label_8: while (true) {
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case BOOL_AND:
                case BOOL_ANDX:;
                    break;
                default:
                    this.jj_la1[28] = this.jj_gen;
                    break label_8;
            }
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case BOOL_AND:
                    t = this.jj_consume_token(BOOL_AND);
                    break;
                case BOOL_ANDX:
                    t = this.jj_consume_token(BOOL_ANDX);
                    break;
                default:
                    this.jj_la1[29] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
            }
            this.InclusiveOrExpression();
            final BSHBinaryExpression jjtn001 = new BSHBinaryExpression(
                    JJTBINARYEXPRESSION);
            boolean jjtc001 = true;
            this.jjtree.openNodeScope(jjtn001);
            this.jjtreeOpenNodeScope(jjtn001);
            try {
                this.jjtree.closeNodeScope(jjtn001, 2);
                jjtc001 = false;
                this.jjtreeCloseNodeScope(jjtn001);
                jjtn001.kind = t.kind;
            } finally {
                if (jjtc001) {
                    this.jjtree.closeNodeScope(jjtn001, 2);
                    this.jjtreeCloseNodeScope(jjtn001);
                }
            }
        }
    }

    /**
     * Inclusive or expression.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void InclusiveOrExpression() throws ParseException {
        Token t = null;
        this.ExclusiveOrExpression();
        label_9: while (true) {
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case BIT_OR:
                case BIT_ORX:;
                    break;
                default:
                    this.jj_la1[30] = this.jj_gen;
                    break label_9;
            }
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case BIT_OR:
                    t = this.jj_consume_token(BIT_OR);
                    break;
                case BIT_ORX:
                    t = this.jj_consume_token(BIT_ORX);
                    break;
                default:
                    this.jj_la1[31] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
            }
            this.ExclusiveOrExpression();
            final BSHBinaryExpression jjtn001 = new BSHBinaryExpression(
                    JJTBINARYEXPRESSION);
            boolean jjtc001 = true;
            this.jjtree.openNodeScope(jjtn001);
            this.jjtreeOpenNodeScope(jjtn001);
            try {
                this.jjtree.closeNodeScope(jjtn001, 2);
                jjtc001 = false;
                this.jjtreeCloseNodeScope(jjtn001);
                jjtn001.kind = t.kind;
            } finally {
                if (jjtc001) {
                    this.jjtree.closeNodeScope(jjtn001, 2);
                    this.jjtreeCloseNodeScope(jjtn001);
                }
            }
        }
    }

    /**
     * Exclusive or expression.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void ExclusiveOrExpression() throws ParseException {
        Token t = null;
        this.AndExpression();
        label_10: while (true) {
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case XOR:;
                    break;
                default:
                    this.jj_la1[32] = this.jj_gen;
                    break label_10;
            }
            t = this.jj_consume_token(XOR);
            this.AndExpression();
            final BSHBinaryExpression jjtn001 = new BSHBinaryExpression(
                    JJTBINARYEXPRESSION);
            boolean jjtc001 = true;
            this.jjtree.openNodeScope(jjtn001);
            this.jjtreeOpenNodeScope(jjtn001);
            try {
                this.jjtree.closeNodeScope(jjtn001, 2);
                jjtc001 = false;
                this.jjtreeCloseNodeScope(jjtn001);
                jjtn001.kind = t.kind;
            } finally {
                if (jjtc001) {
                    this.jjtree.closeNodeScope(jjtn001, 2);
                    this.jjtreeCloseNodeScope(jjtn001);
                }
            }
        }
    }

    /**
     * And expression.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void AndExpression() throws ParseException {
        Token t = null;
        this.EqualityExpression();
        label_11: while (true) {
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case BIT_AND:
                case BIT_ANDX:;
                    break;
                default:
                    this.jj_la1[33] = this.jj_gen;
                    break label_11;
            }
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case BIT_AND:
                    t = this.jj_consume_token(BIT_AND);
                    break;
                case BIT_ANDX:
                    t = this.jj_consume_token(BIT_ANDX);
                    break;
                default:
                    this.jj_la1[34] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
            }
            this.EqualityExpression();
            final BSHBinaryExpression jjtn001 = new BSHBinaryExpression(
                    JJTBINARYEXPRESSION);
            boolean jjtc001 = true;
            this.jjtree.openNodeScope(jjtn001);
            this.jjtreeOpenNodeScope(jjtn001);
            try {
                this.jjtree.closeNodeScope(jjtn001, 2);
                jjtc001 = false;
                this.jjtreeCloseNodeScope(jjtn001);
                jjtn001.kind = t.kind;
            } finally {
                if (jjtc001) {
                    this.jjtree.closeNodeScope(jjtn001, 2);
                    this.jjtreeCloseNodeScope(jjtn001);
                }
            }
        }
    }

    /**
     * Equality expression.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void EqualityExpression() throws ParseException {
        Token t = null;
        this.InstanceOfExpression();
        label_12: while (true) {
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case EQ:
                case NE:;
                    break;
                default:
                    this.jj_la1[35] = this.jj_gen;
                    break label_12;
            }
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case EQ:
                    t = this.jj_consume_token(EQ);
                    break;
                case NE:
                    t = this.jj_consume_token(NE);
                    break;
                default:
                    this.jj_la1[36] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
            }
            this.InstanceOfExpression();
            final BSHBinaryExpression jjtn001 = new BSHBinaryExpression(
                    JJTBINARYEXPRESSION);
            boolean jjtc001 = true;
            this.jjtree.openNodeScope(jjtn001);
            this.jjtreeOpenNodeScope(jjtn001);
            try {
                this.jjtree.closeNodeScope(jjtn001, 2);
                jjtc001 = false;
                this.jjtreeCloseNodeScope(jjtn001);
                jjtn001.kind = t.kind;
            } finally {
                if (jjtc001) {
                    this.jjtree.closeNodeScope(jjtn001, 2);
                    this.jjtreeCloseNodeScope(jjtn001);
                }
            }
        }
    }

    /**
     * Instance of expression.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void InstanceOfExpression() throws ParseException {
        Token t = null;
        this.RelationalExpression();
        switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
            case INSTANCEOF:
                t = this.jj_consume_token(INSTANCEOF);
                this.Type();
                final BSHBinaryExpression jjtn001 = new BSHBinaryExpression(
                        JJTBINARYEXPRESSION);
                boolean jjtc001 = true;
                this.jjtree.openNodeScope(jjtn001);
                this.jjtreeOpenNodeScope(jjtn001);
                try {
                    this.jjtree.closeNodeScope(jjtn001, 2);
                    jjtc001 = false;
                    this.jjtreeCloseNodeScope(jjtn001);
                    jjtn001.kind = t.kind;
                } finally {
                    if (jjtc001) {
                        this.jjtree.closeNodeScope(jjtn001, 2);
                        this.jjtreeCloseNodeScope(jjtn001);
                    }
                }
                break;
            default:
                this.jj_la1[37] = this.jj_gen;;
        }
    }

    /**
     * Relational expression.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void RelationalExpression() throws ParseException {
        Token t = null;
        this.ShiftExpression();
        label_13: while (true) {
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case GT:
                case GTX:
                case LT:
                case LTX:
                case LE:
                case LEX:
                case GE:
                case GEX:;
                    break;
                default:
                    this.jj_la1[38] = this.jj_gen;
                    break label_13;
            }
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case LT:
                    t = this.jj_consume_token(LT);
                    break;
                case LTX:
                    t = this.jj_consume_token(LTX);
                    break;
                case GT:
                    t = this.jj_consume_token(GT);
                    break;
                case GTX:
                    t = this.jj_consume_token(GTX);
                    break;
                case LE:
                    t = this.jj_consume_token(LE);
                    break;
                case LEX:
                    t = this.jj_consume_token(LEX);
                    break;
                case GE:
                    t = this.jj_consume_token(GE);
                    break;
                case GEX:
                    t = this.jj_consume_token(GEX);
                    break;
                default:
                    this.jj_la1[39] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
            }
            this.ShiftExpression();
            final BSHBinaryExpression jjtn001 = new BSHBinaryExpression(
                    JJTBINARYEXPRESSION);
            boolean jjtc001 = true;
            this.jjtree.openNodeScope(jjtn001);
            this.jjtreeOpenNodeScope(jjtn001);
            try {
                this.jjtree.closeNodeScope(jjtn001, 2);
                jjtc001 = false;
                this.jjtreeCloseNodeScope(jjtn001);
                jjtn001.kind = t.kind;
            } finally {
                if (jjtc001) {
                    this.jjtree.closeNodeScope(jjtn001, 2);
                    this.jjtreeCloseNodeScope(jjtn001);
                }
            }
        }
    }

    /**
     * Shift expression.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void ShiftExpression() throws ParseException {
        Token t = null;
        this.AdditiveExpression();
        label_14: while (true) {
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case LSHIFT:
                case LSHIFTX:
                case RSIGNEDSHIFT:
                case RSIGNEDSHIFTX:
                case RUNSIGNEDSHIFT:
                case RUNSIGNEDSHIFTX:;
                    break;
                default:
                    this.jj_la1[40] = this.jj_gen;
                    break label_14;
            }
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case LSHIFT:
                    t = this.jj_consume_token(LSHIFT);
                    break;
                case LSHIFTX:
                    t = this.jj_consume_token(LSHIFTX);
                    break;
                case RSIGNEDSHIFT:
                    t = this.jj_consume_token(RSIGNEDSHIFT);
                    break;
                case RSIGNEDSHIFTX:
                    t = this.jj_consume_token(RSIGNEDSHIFTX);
                    break;
                case RUNSIGNEDSHIFT:
                    t = this.jj_consume_token(RUNSIGNEDSHIFT);
                    break;
                case RUNSIGNEDSHIFTX:
                    t = this.jj_consume_token(RUNSIGNEDSHIFTX);
                    break;
                default:
                    this.jj_la1[41] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
            }
            this.AdditiveExpression();
            final BSHBinaryExpression jjtn001 = new BSHBinaryExpression(
                    JJTBINARYEXPRESSION);
            boolean jjtc001 = true;
            this.jjtree.openNodeScope(jjtn001);
            this.jjtreeOpenNodeScope(jjtn001);
            try {
                this.jjtree.closeNodeScope(jjtn001, 2);
                jjtc001 = false;
                this.jjtreeCloseNodeScope(jjtn001);
                jjtn001.kind = t.kind;
            } finally {
                if (jjtc001) {
                    this.jjtree.closeNodeScope(jjtn001, 2);
                    this.jjtreeCloseNodeScope(jjtn001);
                }
            }
        }
    }

    /**
     * Additive expression.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void AdditiveExpression() throws ParseException {
        Token t = null;
        this.MultiplicativeExpression();
        label_15: while (true) {
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case PLUS:
                case MINUS:;
                    break;
                default:
                    this.jj_la1[42] = this.jj_gen;
                    break label_15;
            }
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case PLUS:
                    t = this.jj_consume_token(PLUS);
                    break;
                case MINUS:
                    t = this.jj_consume_token(MINUS);
                    break;
                default:
                    this.jj_la1[43] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
            }
            this.MultiplicativeExpression();
            final BSHBinaryExpression jjtn001 = new BSHBinaryExpression(
                    JJTBINARYEXPRESSION);
            boolean jjtc001 = true;
            this.jjtree.openNodeScope(jjtn001);
            this.jjtreeOpenNodeScope(jjtn001);
            try {
                this.jjtree.closeNodeScope(jjtn001, 2);
                jjtc001 = false;
                this.jjtreeCloseNodeScope(jjtn001);
                jjtn001.kind = t.kind;
            } finally {
                if (jjtc001) {
                    this.jjtree.closeNodeScope(jjtn001, 2);
                    this.jjtreeCloseNodeScope(jjtn001);
                }
            }
        }
    }

    /**
     * Multiplicative expression.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void MultiplicativeExpression() throws ParseException {
        Token t = null;
        this.UnaryExpression();
        label_16: while (true) {
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case STAR:
                case SLASH:
                case MOD:;
                    break;
                default:
                    this.jj_la1[44] = this.jj_gen;
                    break label_16;
            }
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case STAR:
                    t = this.jj_consume_token(STAR);
                    break;
                case SLASH:
                    t = this.jj_consume_token(SLASH);
                    break;
                case MOD:
                    t = this.jj_consume_token(MOD);
                    break;
                default:
                    this.jj_la1[45] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
            }
            this.UnaryExpression();
            final BSHBinaryExpression jjtn001 = new BSHBinaryExpression(
                    JJTBINARYEXPRESSION);
            boolean jjtc001 = true;
            this.jjtree.openNodeScope(jjtn001);
            this.jjtreeOpenNodeScope(jjtn001);
            try {
                this.jjtree.closeNodeScope(jjtn001, 2);
                jjtc001 = false;
                this.jjtreeCloseNodeScope(jjtn001);
                jjtn001.kind = t.kind;
            } finally {
                if (jjtc001) {
                    this.jjtree.closeNodeScope(jjtn001, 2);
                    this.jjtreeCloseNodeScope(jjtn001);
                }
            }
        }
    }

    /**
     * Unary expression.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void UnaryExpression() throws ParseException {
        Token t = null;
        switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
            case PLUS:
            case MINUS:
                switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                    case PLUS:
                        t = this.jj_consume_token(PLUS);
                        break;
                    case MINUS:
                        t = this.jj_consume_token(MINUS);
                        break;
                    default:
                        this.jj_la1[46] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();
                }
                this.UnaryExpression();
                final BSHUnaryExpression jjtn001 = new BSHUnaryExpression(
                        JJTUNARYEXPRESSION);
                boolean jjtc001 = true;
                this.jjtree.openNodeScope(jjtn001);
                this.jjtreeOpenNodeScope(jjtn001);
                try {
                    this.jjtree.closeNodeScope(jjtn001, 1);
                    jjtc001 = false;
                    this.jjtreeCloseNodeScope(jjtn001);
                    jjtn001.kind = t.kind;
                } finally {
                    if (jjtc001) {
                        this.jjtree.closeNodeScope(jjtn001, 1);
                        this.jjtreeCloseNodeScope(jjtn001);
                    }
                }
                break;
            case INCR:
                this.PreIncrementExpression();
                break;
            case DECR:
                this.PreDecrementExpression();
                break;
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FALSE:
            case FLOAT:
            case INT:
            case LONG:
            case NEW:
            case NULL:
            case SHORT:
            case TRUE:
            case VOID:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
            case IDENTIFIER:
            case LPAREN:
            case BANG:
            case TILDE:
                this.UnaryExpressionNotPlusMinus();
                break;
            default:
                this.jj_la1[47] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
        }
    }

    /**
     * Pre increment expression.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void PreIncrementExpression() throws ParseException {
        Token t = null;
        t = this.jj_consume_token(INCR);
        this.PrimaryExpression();
        final BSHUnaryExpression jjtn001 = new BSHUnaryExpression(
                JJTUNARYEXPRESSION);
        boolean jjtc001 = true;
        this.jjtree.openNodeScope(jjtn001);
        this.jjtreeOpenNodeScope(jjtn001);
        try {
            this.jjtree.closeNodeScope(jjtn001, 1);
            jjtc001 = false;
            this.jjtreeCloseNodeScope(jjtn001);
            jjtn001.kind = t.kind;
        } finally {
            if (jjtc001) {
                this.jjtree.closeNodeScope(jjtn001, 1);
                this.jjtreeCloseNodeScope(jjtn001);
            }
        }
    }

    /**
     * Pre decrement expression.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void PreDecrementExpression() throws ParseException {
        Token t = null;
        t = this.jj_consume_token(DECR);
        this.PrimaryExpression();
        final BSHUnaryExpression jjtn001 = new BSHUnaryExpression(
                JJTUNARYEXPRESSION);
        boolean jjtc001 = true;
        this.jjtree.openNodeScope(jjtn001);
        this.jjtreeOpenNodeScope(jjtn001);
        try {
            this.jjtree.closeNodeScope(jjtn001, 1);
            jjtc001 = false;
            this.jjtreeCloseNodeScope(jjtn001);
            jjtn001.kind = t.kind;
        } finally {
            if (jjtc001) {
                this.jjtree.closeNodeScope(jjtn001, 1);
                this.jjtreeCloseNodeScope(jjtn001);
            }
        }
    }

    /**
     * Unary expression not plus minus.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void UnaryExpressionNotPlusMinus() throws ParseException {
        Token t = null;
        switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
            case BANG:
            case TILDE:
                switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                    case TILDE:
                        t = this.jj_consume_token(TILDE);
                        break;
                    case BANG:
                        t = this.jj_consume_token(BANG);
                        break;
                    default:
                        this.jj_la1[48] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();
                }
                this.UnaryExpression();
                final BSHUnaryExpression jjtn001 = new BSHUnaryExpression(
                        JJTUNARYEXPRESSION);
                boolean jjtc001 = true;
                this.jjtree.openNodeScope(jjtn001);
                this.jjtreeOpenNodeScope(jjtn001);
                try {
                    this.jjtree.closeNodeScope(jjtn001, 1);
                    jjtc001 = false;
                    this.jjtreeCloseNodeScope(jjtn001);
                    jjtn001.kind = t.kind;
                } finally {
                    if (jjtc001) {
                        this.jjtree.closeNodeScope(jjtn001, 1);
                        this.jjtreeCloseNodeScope(jjtn001);
                    }
                }
                break;
            default:
                this.jj_la1[49] = this.jj_gen;
                if (this.jj_2_9(2147483647))
                    this.CastExpression();
                else
                    switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                        case BOOLEAN:
                        case BYTE:
                        case CHAR:
                        case DOUBLE:
                        case FALSE:
                        case FLOAT:
                        case INT:
                        case LONG:
                        case NEW:
                        case NULL:
                        case SHORT:
                        case TRUE:
                        case VOID:
                        case INTEGER_LITERAL:
                        case FLOATING_POINT_LITERAL:
                        case CHARACTER_LITERAL:
                        case STRING_LITERAL:
                        case IDENTIFIER:
                        case LPAREN:
                            this.PostfixExpression();
                            break;
                        default:
                            this.jj_la1[50] = this.jj_gen;
                            this.jj_consume_token(-1);
                            throw new ParseException();
                    }
        }
    }

    /**
     * Cast lookahead.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void PostfixExpression() throws ParseException {
        Token t = null;
        if (this.jj_2_12(2147483647)) {
            this.PrimaryExpression();
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case INCR:
                    t = this.jj_consume_token(INCR);
                    break;
                case DECR:
                    t = this.jj_consume_token(DECR);
                    break;
                default:
                    this.jj_la1[53] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
            }
            final BSHUnaryExpression jjtn001 = new BSHUnaryExpression(
                    JJTUNARYEXPRESSION);
            boolean jjtc001 = true;
            this.jjtree.openNodeScope(jjtn001);
            this.jjtreeOpenNodeScope(jjtn001);
            try {
                this.jjtree.closeNodeScope(jjtn001, 1);
                jjtc001 = false;
                this.jjtreeCloseNodeScope(jjtn001);
                jjtn001.kind = t.kind;
                jjtn001.postfix = true;
            } finally {
                if (jjtc001) {
                    this.jjtree.closeNodeScope(jjtn001, 1);
                    this.jjtreeCloseNodeScope(jjtn001);
                }
            }
        } else
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case TRUE:
                case VOID:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                    this.PrimaryExpression();
                    break;
                default:
                    this.jj_la1[54] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
            }
    }

    /**
     * Cast expression.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void CastExpression() throws ParseException {
        /* @bgen(jjtree) CastExpression */
        final BSHCastExpression jjtn000 = new BSHCastExpression(
                JJTCASTEXPRESSION);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        try {
            if (this.jj_2_13(2147483647)) {
                this.jj_consume_token(LPAREN);
                this.Type();
                this.jj_consume_token(RPAREN);
                this.UnaryExpression();
            } else
                switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                    case LPAREN:
                        this.jj_consume_token(LPAREN);
                        this.Type();
                        this.jj_consume_token(RPAREN);
                        this.UnaryExpressionNotPlusMinus();
                        break;
                    default:
                        this.jj_la1[55] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();
                }
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Primary expression.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void PrimaryExpression() throws ParseException {
        /* @bgen(jjtree) PrimaryExpression */
        final BSHPrimaryExpression jjtn000 = new BSHPrimaryExpression(
                JJTPRIMARYEXPRESSION);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        try {
            this.PrimaryPrefix();
            label_17: while (true) {
                switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                    case LBRACE:
                    case LBRACKET:
                    case DOT:;
                        break;
                    default:
                        this.jj_la1[56] = this.jj_gen;
                        break label_17;
                }
                this.PrimarySuffix();
            }
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Method invocation.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void MethodInvocation() throws ParseException {
        /* @bgen(jjtree) MethodInvocation */
        final BSHMethodInvocation jjtn000 = new BSHMethodInvocation(
                JJTMETHODINVOCATION);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        try {
            this.AmbiguousName();
            this.Arguments();
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Primary prefix.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void PrimaryPrefix() throws ParseException {
        switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
            case FALSE:
            case NULL:
            case TRUE:
            case VOID:
            case INTEGER_LITERAL:
            case FLOATING_POINT_LITERAL:
            case CHARACTER_LITERAL:
            case STRING_LITERAL:
                this.Literal();
                break;
            case LPAREN:
                this.jj_consume_token(LPAREN);
                this.Expression();
                this.jj_consume_token(RPAREN);
                break;
            case NEW:
                this.AllocationExpression();
                break;
            default:
                this.jj_la1[57] = this.jj_gen;
                if (this.jj_2_14(2147483647))
                    this.MethodInvocation();
                else if (this.jj_2_15(2147483647))
                    this.Type();
                else
                    switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                        case IDENTIFIER:
                            this.AmbiguousName();
                            break;
                        default:
                            this.jj_la1[58] = this.jj_gen;
                            this.jj_consume_token(-1);
                            throw new ParseException();
                    }
        }
    }

    /**
     * Primary suffix.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void PrimarySuffix() throws ParseException {
        /* @bgen(jjtree) PrimarySuffix */
        final BSHPrimarySuffix jjtn000 = new BSHPrimarySuffix(JJTPRIMARYSUFFIX);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        Token t = null;
        try {
            if (this.jj_2_16(2)) {
                this.jj_consume_token(DOT);
                this.jj_consume_token(CLASS);
                this.jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                this.jjtreeCloseNodeScope(jjtn000);
                jjtn000.operation = BSHPrimarySuffix.CLASS;
            } else
                switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                    case LBRACKET:
                        this.jj_consume_token(LBRACKET);
                        this.Expression();
                        this.jj_consume_token(RBRACKET);
                        this.jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        this.jjtreeCloseNodeScope(jjtn000);
                        jjtn000.operation = BSHPrimarySuffix.INDEX;
                        break;
                    case DOT:
                        this.jj_consume_token(DOT);
                        t = this.jj_consume_token(IDENTIFIER);
                        switch (this.jj_ntk == -1 ? this.jj_ntk()
                                : this.jj_ntk) {
                            case LPAREN:
                                this.Arguments();
                                break;
                            default:
                                this.jj_la1[59] = this.jj_gen;;
                        }
                        this.jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        this.jjtreeCloseNodeScope(jjtn000);
                        jjtn000.operation = BSHPrimarySuffix.NAME;
                        jjtn000.field = t.image;
                        break;
                    case LBRACE:
                        this.jj_consume_token(LBRACE);
                        this.Expression();
                        this.jj_consume_token(RBRACE);
                        this.jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        this.jjtreeCloseNodeScope(jjtn000);
                        jjtn000.operation = BSHPrimarySuffix.PROPERTY;
                        break;
                    default:
                        this.jj_la1[60] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();
                }
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Literal.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void Literal() throws ParseException {
        /* @bgen(jjtree) Literal */
        final BSHLiteral jjtn000 = new BSHLiteral(JJTLITERAL);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        Token x;
        boolean b;
        String literal;
        char ch;
        try {
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case INTEGER_LITERAL:
                    x = this.jj_consume_token(INTEGER_LITERAL);
                    this.jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    this.jjtreeCloseNodeScope(jjtn000);
                    literal = x.image;
                    ch = literal.charAt(literal.length() - 1);
                    if (ch == 'l' || ch == 'L') {
                        literal = literal.substring(0, literal.length() - 1);
                        jjtn000.value = new Primitive(
                                Long.decode(literal).longValue());
                    } else
                        try {
                            jjtn000.value = new Primitive(
                                    Integer.decode(literal).intValue());
                        } catch (final NumberFormatException e) {
                            {
                                if (true)
                                    throw this.createParseException(
                                            "Error or number too big for integer type: "
                                                    + literal);
                            }
                        }
                    break;
                case FLOATING_POINT_LITERAL:
                    x = this.jj_consume_token(FLOATING_POINT_LITERAL);
                    this.jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    this.jjtreeCloseNodeScope(jjtn000);
                    literal = x.image;
                    ch = literal.charAt(literal.length() - 1);
                    if (ch == 'f' || ch == 'F') {
                        literal = literal.substring(0, literal.length() - 1);
                        jjtn000.value = new Primitive(
                                new Float(literal).floatValue());
                    } else {
                        if (ch == 'd' || ch == 'D')
                            literal = literal.substring(0,
                                    literal.length() - 1);
                        jjtn000.value = new Primitive(
                                new Double(literal).doubleValue());
                    }
                    break;
                case CHARACTER_LITERAL:
                    x = this.jj_consume_token(CHARACTER_LITERAL);
                    this.jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    this.jjtreeCloseNodeScope(jjtn000);
                    try {
                        jjtn000.charSetup(
                                x.image.substring(1, x.image.length() - 1));
                    } catch (final Exception e) {
                        {
                            if (true)
                                throw this.createParseException(
                                        "Error parsing character: " + x.image);
                        }
                    }
                    break;
                case STRING_LITERAL:
                    x = this.jj_consume_token(STRING_LITERAL);
                    this.jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    this.jjtreeCloseNodeScope(jjtn000);
                    try {
                        jjtn000.stringSetup(
                                x.image.substring(1, x.image.length() - 1));
                    } catch (final Exception e) {
                        {
                            if (true)
                                throw this.createParseException(
                                        "Error parsing string: " + x.image);
                        }
                    }
                    break;
                case FALSE:
                case TRUE:
                    b = this.BooleanLiteral();
                    this.jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    this.jjtreeCloseNodeScope(jjtn000);
                    jjtn000.value = b ? Primitive.TRUE : Primitive.FALSE;
                    break;
                case NULL:
                    this.NullLiteral();
                    this.jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    this.jjtreeCloseNodeScope(jjtn000);
                    jjtn000.value = Primitive.NULL;
                    break;
                case VOID:
                    this.VoidLiteral();
                    this.jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    this.jjtreeCloseNodeScope(jjtn000);
                    jjtn000.value = Primitive.VOID;
                    break;
                default:
                    this.jj_la1[61] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Boolean literal.
     *
     * @return true, if successful
     * @throws ParseException
     *             the parse exception
     */
    public final boolean BooleanLiteral() throws ParseException {
        switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
            case TRUE:
                this.jj_consume_token(TRUE); {
                if (true)
                    return true;
            }
                break;
            case FALSE:
                this.jj_consume_token(FALSE); {
                if (true)
                    return false;
            }
                break;
            default:
                this.jj_la1[62] = this.jj_gen;
                this.jj_consume_token(-1);
                throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    /**
     * Null literal.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void NullLiteral() throws ParseException {
        this.jj_consume_token(NULL);
    }

    /**
     * Void literal.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void VoidLiteral() throws ParseException {
        this.jj_consume_token(VOID);
    }

    /**
     * Arguments.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void Arguments() throws ParseException {
        /* @bgen(jjtree) Arguments */
        final BSHArguments jjtn000 = new BSHArguments(JJTARGUMENTS);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        try {
            this.jj_consume_token(LPAREN);
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case TRUE:
                case VOID:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case BANG:
                case TILDE:
                case INCR:
                case DECR:
                case PLUS:
                case MINUS:
                    this.ArgumentList();
                    break;
                default:
                    this.jj_la1[63] = this.jj_gen;;
            }
            this.jj_consume_token(RPAREN);
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    // leave these on the stack for Arguments() to handle
    /**
     * Argument list.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void ArgumentList() throws ParseException {
        this.Expression();
        label_18: while (true) {
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case COMMA:;
                    break;
                default:
                    this.jj_la1[64] = this.jj_gen;
                    break label_18;
            }
            this.jj_consume_token(COMMA);
            this.Expression();
        }
    }

    /**
     * Allocation expression.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void AllocationExpression() throws ParseException {
        /* @bgen(jjtree) AllocationExpression */
        final BSHAllocationExpression jjtn000 = new BSHAllocationExpression(
                JJTALLOCATIONEXPRESSION);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        try {
            if (this.jj_2_18(2)) {
                this.jj_consume_token(NEW);
                this.PrimitiveType();
                this.ArrayDimensions();
            } else
                switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                    case NEW:
                        this.jj_consume_token(NEW);
                        this.AmbiguousName();
                        switch (this.jj_ntk == -1 ? this.jj_ntk()
                                : this.jj_ntk) {
                            case LBRACKET:
                                this.ArrayDimensions();
                                break;
                            case LPAREN:
                                this.Arguments();
                                if (this.jj_2_17(2))
                                    this.Block();
                                else
                                    ;
                                break;
                            default:
                                this.jj_la1[65] = this.jj_gen;
                                this.jj_consume_token(-1);
                                throw new ParseException();
                        }
                        break;
                    default:
                        this.jj_la1[66] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();
                }
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Array dimensions.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void ArrayDimensions() throws ParseException {
        /* @bgen(jjtree) ArrayDimensions */
        final BSHArrayDimensions jjtn000 = new BSHArrayDimensions(
                JJTARRAYDIMENSIONS);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        try {
            if (this.jj_2_21(2)) {
                label_19: while (true) {
                    this.jj_consume_token(LBRACKET);
                    this.Expression();
                    this.jj_consume_token(RBRACKET);
                    jjtn000.addDefinedDimension();
                    if (this.jj_2_19(2))
                        ;
                    else
                        break label_19;
                }
                label_20: while (true) {
                    if (this.jj_2_20(2))
                        ;
                    else
                        break label_20;
                    this.jj_consume_token(LBRACKET);
                    this.jj_consume_token(RBRACKET);
                    jjtn000.addUndefinedDimension();
                }
            } else
                switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                    case LBRACKET:
                        label_21: while (true) {
                            this.jj_consume_token(LBRACKET);
                            this.jj_consume_token(RBRACKET);
                            jjtn000.addUndefinedDimension();
                            switch (this.jj_ntk == -1 ? this.jj_ntk()
                                    : this.jj_ntk) {
                                case LBRACKET:;
                                    break;
                                default:
                                    this.jj_la1[67] = this.jj_gen;
                                    break label_21;
                            }
                        }
                        this.ArrayInitializer();
                        break;
                    default:
                        this.jj_la1[68] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();
                }
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Statement.
     *
     * @throws ParseException
     *             the parse exception
     *
     * Statement syntax follows.
     */
    public final void Statement() throws ParseException {
        if (this.jj_2_22(2))
            this.LabeledStatement();
        else
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case STATIC:
                case LBRACE:
                    this.Block();
                    break;
                case SEMICOLON:
                    this.EmptyStatement();
                    break;
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case TRUE:
                case VOID:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case BANG:
                case TILDE:
                case INCR:
                case DECR:
                case PLUS:
                case MINUS:
                    this.StatementExpression();
                    this.jj_consume_token(SEMICOLON);
                    break;
                case SWITCH:
                    this.SwitchStatement();
                    break;
                case IF:
                    this.IfStatement();
                    break;
                case WHILE:
                    this.WhileStatement();
                    break;
                case DO:
                    this.DoStatement();
                    break;
                default:
                    this.jj_la1[69] = this.jj_gen;
                    if (this.isRegularForStatement())
                        this.ForStatement();
                    else
                        switch (this.jj_ntk == -1 ? this.jj_ntk()
                                : this.jj_ntk) {
                            case FOR:
                                this.EnhancedForStatement();
                                break;
                            case BREAK:
                                this.BreakStatement();
                                break;
                            case CONTINUE:
                                this.ContinueStatement();
                                break;
                            case RETURN:
                                this.ReturnStatement();
                                break;
                            case SYNCHRONIZED:
                                this.SynchronizedStatement();
                                break;
                            case THROW:
                                this.ThrowStatement();
                                break;
                            case TRY:
                                this.TryStatement();
                                break;
                            default:
                                this.jj_la1[70] = this.jj_gen;
                                this.jj_consume_token(-1);
                                throw new ParseException();
                        }
            }
    }

    /**
     * Labeled statement.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void LabeledStatement() throws ParseException {
        this.jj_consume_token(IDENTIFIER);
        this.jj_consume_token(COLON);
        this.Statement();
    }

    /**
     * Block.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void Block() throws ParseException {
        /* @bgen(jjtree) Block */
        final BSHBlock jjtn000 = new BSHBlock(JJTBLOCK);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        Token s = null;
        try {
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case STATIC:
                    s = this.jj_consume_token(STATIC);
                    break;
                default:
                    this.jj_la1[71] = this.jj_gen;;
            }
            this.jj_consume_token(LBRACE);
            label_22: while (true) {
                if (this.jj_2_23(1))
                    ;
                else
                    break label_22;
                this.BlockStatement();
            }
            this.jj_consume_token(RBRACE);
            this.jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            this.jjtreeCloseNodeScope(jjtn000);
            if (s != null)
                jjtn000.isStatic = true;
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Block statement.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void BlockStatement() throws ParseException {
        if (this.jj_2_24(2147483647))
            this.ClassDeclaration();
        else if (this.jj_2_25(2147483647))
            this.MethodDeclaration();
        else if (this.jj_2_26(2147483647))
            this.MethodDeclaration();
        else if (this.jj_2_27(2147483647)) {
            this.TypedVariableDeclaration();
            this.jj_consume_token(SEMICOLON);
        } else if (this.jj_2_28(1))
            this.Statement();
        else
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case IMPORT:
                    this.ImportDeclaration();
                    break;
                case PACKAGE:
                    this.PackageDeclaration();
                    break;
                case FORMAL_COMMENT:
                    this.FormalComment();
                    break;
                default:
                    this.jj_la1[72] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
            }
    }

    /**
     * Formal comment.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void FormalComment() throws ParseException {
        /* @bgen(jjtree) #FormalComment(retainComments) */
        final BSHFormalComment jjtn000 = new BSHFormalComment(JJTFORMALCOMMENT);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        Token t;
        try {
            t = this.jj_consume_token(FORMAL_COMMENT);
            this.jjtree.closeNodeScope(jjtn000, this.retainComments);
            jjtc000 = false;
            this.jjtreeCloseNodeScope(jjtn000);
            jjtn000.text = t.image;
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, this.retainComments);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Empty statement.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void EmptyStatement() throws ParseException {
        this.jj_consume_token(SEMICOLON);
    }

    /**
     * Statement expression.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void StatementExpression() throws ParseException {
        this.Expression();
    }

    /**
     * Switch statement.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void SwitchStatement() throws ParseException {
        /* @bgen(jjtree) SwitchStatement */
        final BSHSwitchStatement jjtn000 = new BSHSwitchStatement(
                JJTSWITCHSTATEMENT);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        try {
            this.jj_consume_token(SWITCH);
            this.jj_consume_token(LPAREN);
            this.Expression();
            this.jj_consume_token(RPAREN);
            this.jj_consume_token(LBRACE);
            label_23: while (true) {
                switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                    case CASE:
                    case _DEFAULT:;
                        break;
                    default:
                        this.jj_la1[73] = this.jj_gen;
                        break label_23;
                }
                this.SwitchLabel();
                label_24: while (true) {
                    if (this.jj_2_29(1))
                        ;
                    else
                        break label_24;
                    this.BlockStatement();
                }
            }
            this.jj_consume_token(RBRACE);
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Switch label.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void SwitchLabel() throws ParseException {
        /* @bgen(jjtree) SwitchLabel */
        final BSHSwitchLabel jjtn000 = new BSHSwitchLabel(JJTSWITCHLABEL);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        try {
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case CASE:
                    this.jj_consume_token(CASE);
                    this.Expression();
                    this.jj_consume_token(COLON);
                    break;
                case _DEFAULT:
                    this.jj_consume_token(_DEFAULT);
                    this.jj_consume_token(COLON);
                    this.jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                    this.jjtreeCloseNodeScope(jjtn000);
                    jjtn000.isDefault = true;
                    break;
                default:
                    this.jj_la1[74] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * If statement.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void IfStatement() throws ParseException {
        /* @bgen(jjtree) IfStatement */
        final BSHIfStatement jjtn000 = new BSHIfStatement(JJTIFSTATEMENT);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        try {
            this.jj_consume_token(IF);
            this.jj_consume_token(LPAREN);
            this.Expression();
            this.jj_consume_token(RPAREN);
            this.Statement();
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case ELSE:
                    this.jj_consume_token(ELSE);
                    this.Statement();
                    break;
                default:
                    this.jj_la1[75] = this.jj_gen;;
            }
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * While statement.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void WhileStatement() throws ParseException {
        /* @bgen(jjtree) WhileStatement */
        final BSHWhileStatement jjtn000 = new BSHWhileStatement(
                JJTWHILESTATEMENT);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        try {
            this.jj_consume_token(WHILE);
            this.jj_consume_token(LPAREN);
            this.Expression();
            this.jj_consume_token(RPAREN);
            this.Statement();
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Do statement.
     *
     * @throws ParseException
     *             the parse exception
     *
     * Do statement is just a While statement with a special hook to execute
     * at least once.
     */
    public final void DoStatement() throws ParseException {
        /* @bgen(jjtree) WhileStatement */
        final BSHWhileStatement jjtn000 = new BSHWhileStatement(
                JJTWHILESTATEMENT);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        try {
            this.jj_consume_token(DO);
            this.Statement();
            this.jj_consume_token(WHILE);
            this.jj_consume_token(LPAREN);
            this.Expression();
            this.jj_consume_token(RPAREN);
            this.jj_consume_token(SEMICOLON);
            this.jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            this.jjtreeCloseNodeScope(jjtn000);
            jjtn000.isDoStatement = true;
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * For statement.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void ForStatement() throws ParseException {
        /* @bgen(jjtree) ForStatement */
        final BSHForStatement jjtn000 = new BSHForStatement(JJTFORSTATEMENT);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        try {
            this.jj_consume_token(FOR);
            this.jj_consume_token(LPAREN);
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case ABSTRACT:
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FALSE:
                case FINAL:
                case FLOAT:
                case INT:
                case LONG:
                case NATIVE:
                case NEW:
                case NULL:
                case PRIVATE:
                case PROTECTED:
                case PUBLIC:
                case SHORT:
                case STATIC:
                case STRICTFP:
                case SYNCHRONIZED:
                case TRANSIENT:
                case TRUE:
                case VOID:
                case VOLATILE:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case BANG:
                case TILDE:
                case INCR:
                case DECR:
                case PLUS:
                case MINUS:
                    this.ForInit();
                    jjtn000.hasForInit = true;
                    break;
                default:
                    this.jj_la1[76] = this.jj_gen;;
            }
            this.jj_consume_token(SEMICOLON);
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case TRUE:
                case VOID:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case BANG:
                case TILDE:
                case INCR:
                case DECR:
                case PLUS:
                case MINUS:
                    this.Expression();
                    jjtn000.hasExpression = true;
                    break;
                default:
                    this.jj_la1[77] = this.jj_gen;;
            }
            this.jj_consume_token(SEMICOLON);
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case TRUE:
                case VOID:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case BANG:
                case TILDE:
                case INCR:
                case DECR:
                case PLUS:
                case MINUS:
                    this.ForUpdate();
                    jjtn000.hasForUpdate = true;
                    break;
                default:
                    this.jj_la1[78] = this.jj_gen;;
            }
            this.jj_consume_token(RPAREN);
            this.Statement();
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Enhanced for statement.
     *
     * @throws ParseException
     *             the parse exception
     *
     * The new JDK1.5 enhanced for statement.
     * e.g. for(int a : arrayOfInts) { }
     * We also support loose typing of the iterator var for BeanShell
     * e.g. for(a : arrayOfInts) { }
     */
    public final void EnhancedForStatement() throws ParseException {
        /* @bgen(jjtree) EnhancedForStatement */
        final BSHEnhancedForStatement jjtn000 = new BSHEnhancedForStatement(
                JJTENHANCEDFORSTATEMENT);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        Token t = null;
        try {
            if (this.jj_2_30(4)) {
                this.jj_consume_token(FOR);
                this.jj_consume_token(LPAREN);
                t = this.jj_consume_token(IDENTIFIER);
                this.jj_consume_token(COLON);
                this.Expression();
                this.jj_consume_token(RPAREN);
                this.Statement();
                this.jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                this.jjtreeCloseNodeScope(jjtn000);
                jjtn000.varName = t.image;
            } else
                switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                    case FOR:
                        this.jj_consume_token(FOR);
                        this.jj_consume_token(LPAREN);
                        this.Type();
                        t = this.jj_consume_token(IDENTIFIER);
                        this.jj_consume_token(COLON);
                        this.Expression();
                        this.jj_consume_token(RPAREN);
                        this.Statement();
                        this.jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                        this.jjtreeCloseNodeScope(jjtn000);
                        jjtn000.varName = t.image;
                        break;
                    default:
                        this.jj_la1[79] = this.jj_gen;
                        this.jj_consume_token(-1);
                        throw new ParseException();
                }
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * For init.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void ForInit() throws ParseException {
        if (this.jj_2_31(2147483647))
            this.TypedVariableDeclaration();
        else
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case TRUE:
                case VOID:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case BANG:
                case TILDE:
                case INCR:
                case DECR:
                case PLUS:
                case MINUS:
                    this.StatementExpressionList();
                    break;
                default:
                    this.jj_la1[80] = this.jj_gen;
                    this.jj_consume_token(-1);
                    throw new ParseException();
            }
    }

    /**
     * Declared a typed variable.
     * Untyped variables are not declared per-se but are handled by the part
     * of the grammar that deals with assignments.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void TypedVariableDeclaration() throws ParseException {
        /* @bgen(jjtree) TypedVariableDeclaration */
        final BSHTypedVariableDeclaration jjtn000 = new BSHTypedVariableDeclaration(
                JJTTYPEDVARIABLEDECLARATION);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        Modifiers mods;
        try {
            mods = this.Modifiers(Modifiers.FIELD, false);
            this.Type();
            this.VariableDeclarator();
            label_25: while (true) {
                switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                    case COMMA:;
                        break;
                    default:
                        this.jj_la1[81] = this.jj_gen;
                        break label_25;
                }
                this.jj_consume_token(COMMA);
                this.VariableDeclarator();
            }
            this.jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            this.jjtreeCloseNodeScope(jjtn000);
            jjtn000.modifiers = mods;
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Statement expression list.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void StatementExpressionList() throws ParseException {
        /* @bgen(jjtree) StatementExpressionList */
        final BSHStatementExpressionList jjtn000 = new BSHStatementExpressionList(
                JJTSTATEMENTEXPRESSIONLIST);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        try {
            this.StatementExpression();
            label_26: while (true) {
                switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                    case COMMA:;
                        break;
                    default:
                        this.jj_la1[82] = this.jj_gen;
                        break label_26;
                }
                this.jj_consume_token(COMMA);
                this.StatementExpression();
            }
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * For update.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void ForUpdate() throws ParseException {
        this.StatementExpressionList();
    }

    /**
     * Break statement.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void BreakStatement() throws ParseException {
        /* @bgen(jjtree) ReturnStatement */
        final BSHReturnStatement jjtn000 = new BSHReturnStatement(
                JJTRETURNSTATEMENT);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        try {
            this.jj_consume_token(BREAK);
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case IDENTIFIER:
                    this.jj_consume_token(IDENTIFIER);
                    break;
                default:
                    this.jj_la1[83] = this.jj_gen;;
            }
            this.jj_consume_token(SEMICOLON);
            this.jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            this.jjtreeCloseNodeScope(jjtn000);
            jjtn000.kind = BREAK;
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Continue statement.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void ContinueStatement() throws ParseException {
        /* @bgen(jjtree) ReturnStatement */
        final BSHReturnStatement jjtn000 = new BSHReturnStatement(
                JJTRETURNSTATEMENT);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        try {
            this.jj_consume_token(CONTINUE);
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case IDENTIFIER:
                    this.jj_consume_token(IDENTIFIER);
                    break;
                default:
                    this.jj_la1[84] = this.jj_gen;;
            }
            this.jj_consume_token(SEMICOLON);
            this.jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            this.jjtreeCloseNodeScope(jjtn000);
            jjtn000.kind = CONTINUE;
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Return statement.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void ReturnStatement() throws ParseException {
        /* @bgen(jjtree) ReturnStatement */
        final BSHReturnStatement jjtn000 = new BSHReturnStatement(
                JJTRETURNSTATEMENT);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        try {
            this.jj_consume_token(RETURN);
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case BOOLEAN:
                case BYTE:
                case CHAR:
                case DOUBLE:
                case FALSE:
                case FLOAT:
                case INT:
                case LONG:
                case NEW:
                case NULL:
                case SHORT:
                case TRUE:
                case VOID:
                case INTEGER_LITERAL:
                case FLOATING_POINT_LITERAL:
                case CHARACTER_LITERAL:
                case STRING_LITERAL:
                case IDENTIFIER:
                case LPAREN:
                case BANG:
                case TILDE:
                case INCR:
                case DECR:
                case PLUS:
                case MINUS:
                    this.Expression();
                    break;
                default:
                    this.jj_la1[85] = this.jj_gen;;
            }
            this.jj_consume_token(SEMICOLON);
            this.jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            this.jjtreeCloseNodeScope(jjtn000);
            jjtn000.kind = RETURN;
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Synchronized statement.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void SynchronizedStatement() throws ParseException {
        /* @bgen(jjtree) Block */
        final BSHBlock jjtn000 = new BSHBlock(JJTBLOCK);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        try {
            this.jj_consume_token(SYNCHRONIZED);
            this.jj_consume_token(LPAREN);
            this.Expression();
            this.jj_consume_token(RPAREN);
            this.Block();
            this.jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            this.jjtreeCloseNodeScope(jjtn000);
            jjtn000.isSynchronized = true;
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Throw statement.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void ThrowStatement() throws ParseException {
        /* @bgen(jjtree) ThrowStatement */
        final BSHThrowStatement jjtn000 = new BSHThrowStatement(
                JJTTHROWSTATEMENT);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        try {
            this.jj_consume_token(THROW);
            this.Expression();
            this.jj_consume_token(SEMICOLON);
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Try statement.
     *
     * @throws ParseException
     *             the parse exception
     */
    public final void TryStatement() throws ParseException {
        /* @bgen(jjtree) TryStatement */
        final BSHTryStatement jjtn000 = new BSHTryStatement(JJTTRYSTATEMENT);
        boolean jjtc000 = true;
        this.jjtree.openNodeScope(jjtn000);
        this.jjtreeOpenNodeScope(jjtn000);
        boolean closed = false;
        try {
            this.jj_consume_token(TRY);
            this.Block();
            label_27: while (true) {
                switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                    case CATCH:;
                        break;
                    default:
                        this.jj_la1[86] = this.jj_gen;
                        break label_27;
                }
                this.jj_consume_token(CATCH);
                this.jj_consume_token(LPAREN);
                this.FormalParameter();
                this.jj_consume_token(RPAREN);
                this.Block();
                closed = true;
            }
            switch (this.jj_ntk == -1 ? this.jj_ntk() : this.jj_ntk) {
                case FINALLY:
                    this.jj_consume_token(FINALLY);
                    this.Block();
                    closed = true;
                    break;
                default:
                    this.jj_la1[87] = this.jj_gen;;
            }
            this.jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            this.jjtreeCloseNodeScope(jjtn000);
            if (!closed)
                if (true)
                    throw this.generateParseException();
        } catch (final Throwable jjte000) {
            if (jjtc000) {
                this.jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else
                this.jjtree.popNode();
            if (jjte000 instanceof RuntimeException)
                if (true)
                    throw (RuntimeException) jjte000;
            if (jjte000 instanceof ParseException)
                if (true)
                    throw (ParseException) jjte000;
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                this.jjtree.closeNodeScope(jjtn000, true);
                this.jjtreeCloseNodeScope(jjtn000);
            }
        }
    }

    /**
     * Jj 2 1.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_1(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_1();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(0, xla);
        }
    }

    /**
     * Jj 2 2.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_2(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_2();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(1, xla);
        }
    }

    /**
     * Jj 2 3.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_3(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_3();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(2, xla);
        }
    }

    /**
     * Jj 2 4.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_4(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_4();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(3, xla);
        }
    }

    /**
     * Jj 2 5.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_5(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_5();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(4, xla);
        }
    }

    /**
     * Jj 2 6.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_6(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_6();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(5, xla);
        }
    }

    /**
     * Jj 2 7.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_7(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_7();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(6, xla);
        }
    }

    /**
     * Jj 2 8.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_8(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_8();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(7, xla);
        }
    }

    /**
     * Jj 2 9.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_9(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_9();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(8, xla);
        }
    }

    /**
     * Jj 2 10.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_10(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_10();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(9, xla);
        }
    }

    /**
     * Jj 2 11.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_11(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_11();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(10, xla);
        }
    }

    /**
     * Jj 2 12.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_12(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_12();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(11, xla);
        }
    }

    /**
     * Jj 2 13.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_13(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_13();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(12, xla);
        }
    }

    /**
     * Jj 2 14.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_14(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_14();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(13, xla);
        }
    }

    /**
     * Jj 2 15.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_15(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_15();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(14, xla);
        }
    }

    /**
     * Jj 2 16.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_16(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_16();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(15, xla);
        }
    }

    /**
     * Jj 2 17.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_17(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_17();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(16, xla);
        }
    }

    /**
     * Jj 2 18.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_18(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_18();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(17, xla);
        }
    }

    /**
     * Jj 2 19.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_19(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_19();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(18, xla);
        }
    }

    /**
     * Jj 2 20.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_20(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_20();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(19, xla);
        }
    }

    /**
     * Jj 2 21.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_21(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_21();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(20, xla);
        }
    }

    /**
     * Jj 2 22.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_22(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_22();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(21, xla);
        }
    }

    /**
     * Jj 2 23.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_23(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_23();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(22, xla);
        }
    }

    /**
     * Jj 2 24.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_24(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_24();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(23, xla);
        }
    }

    /**
     * Jj 2 25.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_25(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_25();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(24, xla);
        }
    }

    /**
     * Jj 2 26.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_26(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_26();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(25, xla);
        }
    }

    /**
     * Jj 2 27.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_27(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_27();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(26, xla);
        }
    }

    /**
     * Jj 2 28.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_28(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_28();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(27, xla);
        }
    }

    /**
     * Jj 2 29.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_29(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_29();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(28, xla);
        }
    }

    /**
     * Jj 2 30.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_30(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_30();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(29, xla);
        }
    }

    /**
     * Jj 2 31.
     *
     * @param xla
     *            the xla
     * @return true, if successful
     */
    private final boolean jj_2_31(final int xla) {
        this.jj_la = xla;
        this.jj_lastpos = this.jj_scanpos = this.token;
        try {
            return !this.jj_3_31();
        } catch (final LookaheadSuccess ls) {
            return true;
        } finally {
            this.jj_save(30, xla);
        }
    }

    /**
     * Jj 3 R 148.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_148() {
        if (this.jj_3R_153())
            return true;
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (this.jj_3R_162()) {
                this.jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    /**
     * Jj 3 R 87.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_87() {
        if (this.jj_3R_121())
            return true;
        return false;
    }

    /**
     * Jj 3 R 86.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_86() {
        if (this.jj_3R_120())
            return true;
        return false;
    }

    /**
     * Jj 3 R 85.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_85() {
        if (this.jj_3R_119())
            return true;
        return false;
    }

    /**
     * Jj 3 R 159.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_159() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_scan_token(96)) {
            this.jj_scanpos = xsp;
            if (this.jj_scan_token(97))
                return true;
        }
        if (this.jj_3R_148())
            return true;
        return false;
    }

    /**
     * Jj 3 R 84.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_84() {
        if (this.jj_3R_118())
            return true;
        return false;
    }

    /**
     * Jj 3 R 135.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_135() {
        if (this.jj_3R_148())
            return true;
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (this.jj_3R_159()) {
                this.jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    /**
     * Jj 3 R 83.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_83() {
        if (this.jj_3R_117())
            return true;
        return false;
    }

    /**
     * Jj 3 R 82.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_82() {
        if (this.jj_3R_116())
            return true;
        return false;
    }

    /**
     * Jj 3 R 81.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_81() {
        if (this.jj_3R_115())
            return true;
        return false;
    }

    /**
     * Jj 3 R 108.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_108() {
        if (this.jj_3R_135())
            return true;
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_156())
            this.jj_scanpos = xsp;
        return false;
    }

    /**
     * Jj 3 R 80.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_80() {
        if (this.jj_3R_114())
            return true;
        return false;
    }

    /**
     * Jj 3 R 79.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_79() {
        if (this.jj_3R_113())
            return true;
        return false;
    }

    /**
     * Jj 3 R 78.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_78() {
        if (this.jj_3R_112())
            return true;
        if (this.jj_scan_token(SEMICOLON))
            return true;
        return false;
    }

    /**
     * Jj 3 17.
     *
     * @return true, if successful
     */
    private final boolean jj_3_17() {
        if (this.jj_3R_38())
            return true;
        return false;
    }

    /**
     * Jj 3 R 77.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_77() {
        if (this.jj_3R_38())
            return true;
        return false;
    }

    /**
     * Jj 3 R 34.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_34() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_scan_token(81)) {
            this.jj_scanpos = xsp;
            if (this.jj_scan_token(120)) {
                this.jj_scanpos = xsp;
                if (this.jj_scan_token(121)) {
                    this.jj_scanpos = xsp;
                    if (this.jj_scan_token(127)) {
                        this.jj_scanpos = xsp;
                        if (this.jj_scan_token(118)) {
                            this.jj_scanpos = xsp;
                            if (this.jj_scan_token(119)) {
                                this.jj_scanpos = xsp;
                                if (this.jj_scan_token(122)) {
                                    this.jj_scanpos = xsp;
                                    if (this.jj_scan_token(126)) {
                                        this.jj_scanpos = xsp;
                                        if (this.jj_scan_token(124)) {
                                            this.jj_scanpos = xsp;
                                            if (this.jj_scan_token(128)) {
                                                this.jj_scanpos = xsp;
                                                if (this.jj_scan_token(129)) {
                                                    this.jj_scanpos = xsp;
                                                    if (this.jj_scan_token(
                                                            130)) {
                                                        this.jj_scanpos = xsp;
                                                        if (this.jj_scan_token(
                                                                131)) {
                                                            this.jj_scanpos = xsp;
                                                            if (this.jj_scan_token(
                                                                    132)) {
                                                                this.jj_scanpos = xsp;
                                                                if (this.jj_scan_token(
                                                                        133))
                                                                    return true;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    /**
     * Jj 3 R 45.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_45() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3_22()) {
            this.jj_scanpos = xsp;
            if (this.jj_3R_77()) {
                this.jj_scanpos = xsp;
                if (this.jj_scan_token(78)) {
                    this.jj_scanpos = xsp;
                    if (this.jj_3R_78()) {
                        this.jj_scanpos = xsp;
                        if (this.jj_3R_79()) {
                            this.jj_scanpos = xsp;
                            if (this.jj_3R_80()) {
                                this.jj_scanpos = xsp;
                                if (this.jj_3R_81()) {
                                    this.jj_scanpos = xsp;
                                    if (this.jj_3R_82()) {
                                        this.jj_scanpos = xsp;
                                        this.lookingAhead = true;
                                        this.jj_semLA = this
                                                .isRegularForStatement();
                                        this.lookingAhead = false;
                                        if (!this.jj_semLA || this.jj_3R_83()) {
                                            this.jj_scanpos = xsp;
                                            if (this.jj_3R_84()) {
                                                this.jj_scanpos = xsp;
                                                if (this.jj_3R_85()) {
                                                    this.jj_scanpos = xsp;
                                                    if (this.jj_3R_86()) {
                                                        this.jj_scanpos = xsp;
                                                        if (this.jj_3R_87()) {
                                                            this.jj_scanpos = xsp;
                                                            if (this.jj_3R_88()) {
                                                                this.jj_scanpos = xsp;
                                                                if (this.jj_3R_89()) {
                                                                    this.jj_scanpos = xsp;
                                                                    if (this.jj_3R_90())
                                                                        return true;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    /**
     * Jj 3 22.
     *
     * @return true, if successful
     */
    private final boolean jj_3_22() {
        if (this.jj_3R_40())
            return true;
        return false;
    }

    /**
     * Jj 3 R 111.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_111() {
        if (this.jj_scan_token(COMMA))
            return true;
        if (this.jj_3R_29())
            return true;
        return false;
    }

    /**
     * Jj 3 R 160.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_160() {
        if (this.jj_scan_token(LBRACKET))
            return true;
        if (this.jj_scan_token(RBRACKET))
            return true;
        return false;
    }

    /**
     * Jj 3 R 152.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_152() {
        if (this.jj_3R_69())
            return true;
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3_17())
            this.jj_scanpos = xsp;
        return false;
    }

    /**
     * Jj 3 8.
     *
     * @return true, if successful
     */
    private final boolean jj_3_8() {
        if (this.jj_3R_33())
            return true;
        if (this.jj_3R_34())
            return true;
        return false;
    }

    /**
     * Jj 3 R 157.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_157() {
        Token xsp;
        if (this.jj_3R_160())
            return true;
        while (true) {
            xsp = this.jj_scanpos;
            if (this.jj_3R_160()) {
                this.jj_scanpos = xsp;
                break;
            }
        }
        if (this.jj_3R_97())
            return true;
        return false;
    }

    /**
     * Jj 3 R 107.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_107() {
        if (this.jj_3R_33())
            return true;
        if (this.jj_3R_34())
            return true;
        if (this.jj_3R_39())
            return true;
        return false;
    }

    /**
     * Jj 3 20.
     *
     * @return true, if successful
     */
    private final boolean jj_3_20() {
        if (this.jj_scan_token(LBRACKET))
            return true;
        if (this.jj_scan_token(RBRACKET))
            return true;
        return false;
    }

    /**
     * Jj 3 R 151.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_151() {
        if (this.jj_3R_150())
            return true;
        return false;
    }

    /**
     * Jj 3 19.
     *
     * @return true, if successful
     */
    private final boolean jj_3_19() {
        if (this.jj_scan_token(LBRACKET))
            return true;
        if (this.jj_3R_39())
            return true;
        if (this.jj_scan_token(RBRACKET))
            return true;
        return false;
    }

    /**
     * Jj 3 21.
     *
     * @return true, if successful
     */
    private final boolean jj_3_21() {
        Token xsp;
        if (this.jj_3_19())
            return true;
        while (true) {
            xsp = this.jj_scanpos;
            if (this.jj_3_19()) {
                this.jj_scanpos = xsp;
                break;
            }
        }
        while (true) {
            xsp = this.jj_scanpos;
            if (this.jj_3_20()) {
                this.jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    /**
     * Jj 3 R 150.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_150() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3_21()) {
            this.jj_scanpos = xsp;
            if (this.jj_3R_157())
                return true;
        }
        return false;
    }

    /**
     * Jj 3 R 71.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_71() {
        if (this.jj_3R_108())
            return true;
        return false;
    }

    /**
     * Jj 3 R 39.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_39() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_70()) {
            this.jj_scanpos = xsp;
            if (this.jj_3R_71())
                return true;
        }
        return false;
    }

    /**
     * Jj 3 R 70.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_70() {
        if (this.jj_3R_107())
            return true;
        return false;
    }

    /**
     * Jj 3 R 145.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_145() {
        if (this.jj_scan_token(NEW))
            return true;
        if (this.jj_3R_29())
            return true;
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_151()) {
            this.jj_scanpos = xsp;
            if (this.jj_3R_152())
                return true;
        }
        return false;
    }

    /**
     * Jj 3 18.
     *
     * @return true, if successful
     */
    private final boolean jj_3_18() {
        if (this.jj_scan_token(NEW))
            return true;
        if (this.jj_3R_36())
            return true;
        if (this.jj_3R_150())
            return true;
        return false;
    }

    /**
     * Jj 3 R 130.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_130() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3_18()) {
            this.jj_scanpos = xsp;
            if (this.jj_3R_145())
                return true;
        }
        return false;
    }

    /**
     * Jj 3 R 147.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_147() {
        if (this.jj_scan_token(COMMA))
            return true;
        if (this.jj_3R_39())
            return true;
        return false;
    }

    /**
     * Jj 3 R 76.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_76() {
        if (this.jj_3R_29())
            return true;
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (this.jj_3R_111()) {
                this.jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    /**
     * Jj 3 R 134.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_134() {
        if (this.jj_3R_39())
            return true;
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (this.jj_3R_147()) {
                this.jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    /**
     * Jj 3 R 106.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_106() {
        if (this.jj_3R_134())
            return true;
        return false;
    }

    /**
     * Jj 3 7.
     *
     * @return true, if successful
     */
    private final boolean jj_3_7() {
        if (this.jj_scan_token(DOT))
            return true;
        if (this.jj_scan_token(IDENTIFIER))
            return true;
        return false;
    }

    /**
     * Jj 3 R 69.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_69() {
        if (this.jj_scan_token(LPAREN))
            return true;
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_106())
            this.jj_scanpos = xsp;
        if (this.jj_scan_token(RPAREN))
            return true;
        return false;
    }

    /**
     * Jj 3 R 29.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_29() {
        if (this.jj_scan_token(IDENTIFIER))
            return true;
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (this.jj_3_7()) {
                this.jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    /**
     * Jj 3 R 68.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_68() {
        if (this.jj_scan_token(DOUBLE))
            return true;
        return false;
    }

    /**
     * Jj 3 R 67.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_67() {
        if (this.jj_scan_token(FLOAT))
            return true;
        return false;
    }

    /**
     * Jj 3 R 66.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_66() {
        if (this.jj_scan_token(LONG))
            return true;
        return false;
    }

    /**
     * Jj 3 R 65.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_65() {
        if (this.jj_scan_token(INT))
            return true;
        return false;
    }

    /**
     * Jj 3 R 155.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_155() {
        if (this.jj_scan_token(FALSE))
            return true;
        return false;
    }

    /**
     * Jj 3 R 64.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_64() {
        if (this.jj_scan_token(SHORT))
            return true;
        return false;
    }

    /**
     * Jj 3 R 56.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_56() {
        if (this.jj_3R_29())
            return true;
        return false;
    }

    /**
     * Jj 3 R 63.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_63() {
        if (this.jj_scan_token(BYTE))
            return true;
        return false;
    }

    /**
     * Jj 3 R 154.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_154() {
        if (this.jj_scan_token(TRUE))
            return true;
        return false;
    }

    /**
     * Jj 3 R 149.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_149() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_154()) {
            this.jj_scanpos = xsp;
            if (this.jj_3R_155())
                return true;
        }
        return false;
    }

    /**
     * Jj 3 R 62.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_62() {
        if (this.jj_scan_token(CHAR))
            return true;
        return false;
    }

    /**
     * Jj 3 R 61.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_61() {
        if (this.jj_scan_token(BOOLEAN))
            return true;
        return false;
    }

    /**
     * Jj 3 R 36.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_36() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_61()) {
            this.jj_scanpos = xsp;
            if (this.jj_3R_62()) {
                this.jj_scanpos = xsp;
                if (this.jj_3R_63()) {
                    this.jj_scanpos = xsp;
                    if (this.jj_3R_64()) {
                        this.jj_scanpos = xsp;
                        if (this.jj_3R_65()) {
                            this.jj_scanpos = xsp;
                            if (this.jj_3R_66()) {
                                this.jj_scanpos = xsp;
                                if (this.jj_3R_67()) {
                                    this.jj_scanpos = xsp;
                                    if (this.jj_3R_68())
                                        return true;
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    /**
     * Jj 3 R 74.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_74() {
        if (this.jj_3R_32())
            return true;
        return false;
    }

    /**
     * Jj 3 R 144.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_144() {
        if (this.jj_scan_token(57))
            return true;
        return false;
    }

    /**
     * Jj 3 R 42.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_42() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_73()) {
            this.jj_scanpos = xsp;
            if (this.jj_3R_74())
                return true;
        }
        return false;
    }

    /**
     * Jj 3 R 73.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_73() {
        if (this.jj_scan_token(VOID))
            return true;
        return false;
    }

    /**
     * Jj 3 6.
     *
     * @return true, if successful
     */
    private final boolean jj_3_6() {
        if (this.jj_scan_token(LBRACKET))
            return true;
        if (this.jj_scan_token(RBRACKET))
            return true;
        return false;
    }

    /**
     * Jj 3 R 143.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_143() {
        if (this.jj_scan_token(41))
            return true;
        return false;
    }

    /**
     * Jj 3 R 142.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_142() {
        if (this.jj_3R_149())
            return true;
        return false;
    }

    /**
     * Jj 3 R 55.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_55() {
        if (this.jj_3R_36())
            return true;
        return false;
    }

    /**
     * Jj 3 R 110.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_110() {
        if (this.jj_scan_token(COMMA))
            return true;
        if (this.jj_3R_109())
            return true;
        return false;
    }

    /**
     * Jj 3 R 141.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_141() {
        if (this.jj_scan_token(STRING_LITERAL))
            return true;
        return false;
    }

    /**
     * Jj 3 R 190.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_190() {
        if (this.jj_scan_token(FINALLY))
            return true;
        if (this.jj_3R_38())
            return true;
        return false;
    }

    /**
     * Jj 3 R 32.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_32() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_55()) {
            this.jj_scanpos = xsp;
            if (this.jj_3R_56())
                return true;
        }
        while (true) {
            xsp = this.jj_scanpos;
            if (this.jj_3_6()) {
                this.jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    /**
     * Jj 3 R 189.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_189() {
        if (this.jj_scan_token(CATCH))
            return true;
        if (this.jj_scan_token(LPAREN))
            return true;
        if (this.jj_3R_109())
            return true;
        if (this.jj_scan_token(RPAREN))
            return true;
        if (this.jj_3R_38())
            return true;
        return false;
    }

    /**
     * Jj 3 R 124.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_124() {
        if (this.jj_scan_token(TRY))
            return true;
        if (this.jj_3R_38())
            return true;
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (this.jj_3R_189()) {
                this.jj_scanpos = xsp;
                break;
            }
        }
        xsp = this.jj_scanpos;
        if (this.jj_3R_190())
            this.jj_scanpos = xsp;
        return false;
    }

    /**
     * Jj 3 R 140.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_140() {
        if (this.jj_scan_token(CHARACTER_LITERAL))
            return true;
        return false;
    }

    /**
     * Jj 3 4.
     *
     * @return true, if successful
     */
    private final boolean jj_3_4() {
        if (this.jj_scan_token(COMMA))
            return true;
        if (this.jj_3R_31())
            return true;
        return false;
    }

    /**
     * Jj 3 R 136.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_136() {
        if (this.jj_scan_token(IDENTIFIER))
            return true;
        return false;
    }

    /**
     * Jj 3 5.
     *
     * @return true, if successful
     */
    private final boolean jj_3_5() {
        if (this.jj_3R_32())
            return true;
        if (this.jj_scan_token(IDENTIFIER))
            return true;
        return false;
    }

    /**
     * Jj 3 R 75.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_75() {
        if (this.jj_3R_109())
            return true;
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (this.jj_3R_110()) {
                this.jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    /**
     * Jj 3 R 109.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_109() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3_5()) {
            this.jj_scanpos = xsp;
            if (this.jj_3R_136())
                return true;
        }
        return false;
    }

    /**
     * Jj 3 R 43.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_43() {
        if (this.jj_scan_token(LPAREN))
            return true;
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_75())
            this.jj_scanpos = xsp;
        if (this.jj_scan_token(RPAREN))
            return true;
        return false;
    }

    /**
     * Jj 3 R 163.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_163() {
        if (this.jj_3R_31())
            return true;
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (this.jj_3_4()) {
                this.jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    /**
     * Jj 3 R 123.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_123() {
        if (this.jj_scan_token(THROW))
            return true;
        if (this.jj_3R_39())
            return true;
        if (this.jj_scan_token(SEMICOLON))
            return true;
        return false;
    }

    /**
     * Jj 3 R 188.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_188() {
        if (this.jj_3R_39())
            return true;
        return false;
    }

    /**
     * Jj 3 R 139.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_139() {
        if (this.jj_scan_token(FLOATING_POINT_LITERAL))
            return true;
        return false;
    }

    /**
     * Jj 3 R 97.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_97() {
        if (this.jj_scan_token(LBRACE))
            return true;
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_163())
            this.jj_scanpos = xsp;
        xsp = this.jj_scanpos;
        if (this.jj_scan_token(79))
            this.jj_scanpos = xsp;
        if (this.jj_scan_token(RBRACE))
            return true;
        return false;
    }

    /**
     * Jj 3 R 30.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_30() {
        if (this.jj_scan_token(DOT))
            return true;
        if (this.jj_scan_token(STAR))
            return true;
        return false;
    }

    /**
     * Jj 3 R 122.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_122() {
        if (this.jj_scan_token(SYNCHRONIZED))
            return true;
        if (this.jj_scan_token(LPAREN))
            return true;
        if (this.jj_3R_39())
            return true;
        if (this.jj_scan_token(RPAREN))
            return true;
        if (this.jj_3R_38())
            return true;
        return false;
    }

    /**
     * Jj 3 R 180.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_180() {
        if (this.jj_scan_token(ASSIGN))
            return true;
        if (this.jj_3R_31())
            return true;
        return false;
    }

    /**
     * Jj 3 R 177.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_177() {
        if (this.jj_scan_token(COMMA))
            return true;
        if (this.jj_3R_176())
            return true;
        return false;
    }

    /**
     * Jj 3 R 54.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_54() {
        if (this.jj_3R_39())
            return true;
        return false;
    }

    /**
     * Jj 3 R 53.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_53() {
        if (this.jj_3R_97())
            return true;
        return false;
    }

    /**
     * Jj 3 R 31.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_31() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_53()) {
            this.jj_scanpos = xsp;
            if (this.jj_3R_54())
                return true;
        }
        return false;
    }

    /**
     * Jj 3 R 210.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_210() {
        if (this.jj_scan_token(COMMA))
            return true;
        if (this.jj_3R_112())
            return true;
        return false;
    }

    /**
     * Jj 3 R 121.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_121() {
        if (this.jj_scan_token(RETURN))
            return true;
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_188())
            this.jj_scanpos = xsp;
        if (this.jj_scan_token(SEMICOLON))
            return true;
        return false;
    }

    /**
     * Jj 3 R 120.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_120() {
        if (this.jj_scan_token(CONTINUE))
            return true;
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_scan_token(69))
            this.jj_scanpos = xsp;
        if (this.jj_scan_token(SEMICOLON))
            return true;
        return false;
    }

    /**
     * Jj 3 R 129.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_129() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_138()) {
            this.jj_scanpos = xsp;
            if (this.jj_3R_139()) {
                this.jj_scanpos = xsp;
                if (this.jj_3R_140()) {
                    this.jj_scanpos = xsp;
                    if (this.jj_3R_141()) {
                        this.jj_scanpos = xsp;
                        if (this.jj_3R_142()) {
                            this.jj_scanpos = xsp;
                            if (this.jj_3R_143()) {
                                this.jj_scanpos = xsp;
                                if (this.jj_3R_144())
                                    return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    /**
     * Jj 3 R 138.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_138() {
        if (this.jj_scan_token(INTEGER_LITERAL))
            return true;
        return false;
    }

    /**
     * Jj 3 R 146.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_146() {
        if (this.jj_3R_69())
            return true;
        return false;
    }

    /**
     * Jj 3 R 119.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_119() {
        if (this.jj_scan_token(BREAK))
            return true;
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_scan_token(69))
            this.jj_scanpos = xsp;
        if (this.jj_scan_token(SEMICOLON))
            return true;
        return false;
    }

    /**
     * Jj 3 R 176.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_176() {
        if (this.jj_scan_token(IDENTIFIER))
            return true;
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_180())
            this.jj_scanpos = xsp;
        return false;
    }

    /**
     * Jj 3 R 105.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_105() {
        if (this.jj_3R_129())
            return true;
        return false;
    }

    /**
     * Jj 3 R 195.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_195() {
        if (this.jj_3R_205())
            return true;
        return false;
    }

    /**
     * Jj 3 R 205.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_205() {
        if (this.jj_3R_112())
            return true;
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (this.jj_3R_210()) {
                this.jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    /**
     * Jj 3 R 93.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_93() {
        if (this.jj_3R_41())
            return true;
        if (this.jj_3R_32())
            return true;
        if (this.jj_3R_176())
            return true;
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (this.jj_3R_177()) {
                this.jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    /**
     * Jj 3 R 128.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_128() {
        if (this.jj_scan_token(IMPORT))
            return true;
        if (this.jj_scan_token(STAR))
            return true;
        if (this.jj_scan_token(SEMICOLON))
            return true;
        return false;
    }

    /**
     * Jj 3 R 133.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_133() {
        if (this.jj_scan_token(LBRACE))
            return true;
        if (this.jj_3R_39())
            return true;
        if (this.jj_scan_token(RBRACE))
            return true;
        return false;
    }

    /**
     * Jj 3 R 132.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_132() {
        if (this.jj_scan_token(DOT))
            return true;
        if (this.jj_scan_token(IDENTIFIER))
            return true;
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_146())
            this.jj_scanpos = xsp;
        return false;
    }

    /**
     * Jj 3 3.
     *
     * @return true, if successful
     */
    private final boolean jj_3_3() {
        if (this.jj_scan_token(IMPORT))
            return true;
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_scan_token(48))
            this.jj_scanpos = xsp;
        if (this.jj_3R_29())
            return true;
        xsp = this.jj_scanpos;
        if (this.jj_3R_30())
            this.jj_scanpos = xsp;
        if (this.jj_scan_token(SEMICOLON))
            return true;
        return false;
    }

    /**
     * Jj 3 R 94.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_94() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3_3()) {
            this.jj_scanpos = xsp;
            if (this.jj_3R_128())
                return true;
        }
        return false;
    }

    /**
     * Jj 3 R 131.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_131() {
        if (this.jj_scan_token(LBRACKET))
            return true;
        if (this.jj_3R_39())
            return true;
        if (this.jj_scan_token(RBRACKET))
            return true;
        return false;
    }

    /**
     * Jj 3 R 95.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_95() {
        if (this.jj_scan_token(PACKAGE))
            return true;
        if (this.jj_3R_29())
            return true;
        return false;
    }

    /**
     * Jj 3 31.
     *
     * @return true, if successful
     */
    private final boolean jj_3_31() {
        if (this.jj_3R_41())
            return true;
        if (this.jj_3R_32())
            return true;
        if (this.jj_scan_token(IDENTIFIER))
            return true;
        return false;
    }

    /**
     * Jj 3 2.
     *
     * @return true, if successful
     */
    private final boolean jj_3_2() {
        if (this.jj_scan_token(IDENTIFIER))
            return true;
        if (this.jj_scan_token(LPAREN))
            return true;
        return false;
    }

    /**
     * Jj 3 R 175.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_175() {
        if (this.jj_3R_38())
            return true;
        return false;
    }

    /**
     * Jj 3 16.
     *
     * @return true, if successful
     */
    private final boolean jj_3_16() {
        if (this.jj_scan_token(DOT))
            return true;
        if (this.jj_scan_token(CLASS))
            return true;
        return false;
    }

    /**
     * Jj 3 R 104.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_104() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3_16()) {
            this.jj_scanpos = xsp;
            if (this.jj_3R_131()) {
                this.jj_scanpos = xsp;
                if (this.jj_3R_132()) {
                    this.jj_scanpos = xsp;
                    if (this.jj_3R_133())
                        return true;
                }
            }
        }
        return false;
    }

    /**
     * Jj 3 R 174.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_174() {
        if (this.jj_scan_token(THROWS))
            return true;
        if (this.jj_3R_76())
            return true;
        return false;
    }

    /**
     * Jj 3 R 204.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_204() {
        if (this.jj_3R_205())
            return true;
        return false;
    }

    /**
     * Jj 3 15.
     *
     * @return true, if successful
     */
    private final boolean jj_3_15() {
        if (this.jj_3R_32())
            return true;
        if (this.jj_scan_token(DOT))
            return true;
        if (this.jj_scan_token(CLASS))
            return true;
        return false;
    }

    /**
     * Jj 3 R 203.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_203() {
        if (this.jj_3R_93())
            return true;
        return false;
    }

    /**
     * Jj 3 R 194.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_194() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_203()) {
            this.jj_scanpos = xsp;
            if (this.jj_3R_204())
                return true;
        }
        return false;
    }

    /**
     * Jj 3 14.
     *
     * @return true, if successful
     */
    private final boolean jj_3_14() {
        if (this.jj_3R_37())
            return true;
        return false;
    }

    /**
     * Jj 3 R 126.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_126() {
        if (this.jj_scan_token(IDENTIFIER))
            return true;
        return false;
    }

    /**
     * Jj 3 R 127.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_127() {
        if (this.jj_3R_42())
            return true;
        if (this.jj_scan_token(IDENTIFIER))
            return true;
        return false;
    }

    /**
     * Jj 3 R 92.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_92() {
        if (this.jj_3R_41())
            return true;
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_126()) {
            this.jj_scanpos = xsp;
            if (this.jj_3R_127())
                return true;
        }
        if (this.jj_3R_43())
            return true;
        xsp = this.jj_scanpos;
        if (this.jj_3R_174())
            this.jj_scanpos = xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_175()) {
            this.jj_scanpos = xsp;
            if (this.jj_scan_token(78))
                return true;
        }
        return false;
    }

    /**
     * Jj 3 R 103.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_103() {
        if (this.jj_3R_29())
            return true;
        return false;
    }

    /**
     * Jj 3 R 137.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_137() {
        if (this.jj_scan_token(FOR))
            return true;
        if (this.jj_scan_token(LPAREN))
            return true;
        if (this.jj_3R_32())
            return true;
        if (this.jj_scan_token(IDENTIFIER))
            return true;
        if (this.jj_scan_token(COLON))
            return true;
        if (this.jj_3R_39())
            return true;
        if (this.jj_scan_token(RPAREN))
            return true;
        if (this.jj_3R_45())
            return true;
        return false;
    }

    /**
     * Jj 3 R 102.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_102() {
        if (this.jj_3R_32())
            return true;
        return false;
    }

    /**
     * Jj 3 R 184.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_184() {
        if (this.jj_scan_token(ELSE))
            return true;
        if (this.jj_3R_45())
            return true;
        return false;
    }

    /**
     * Jj 3 R 58.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_58() {
        if (this.jj_3R_104())
            return true;
        return false;
    }

    /**
     * Jj 3 R 125.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_125() {
        if (this.jj_scan_token(INTERFACE))
            return true;
        return false;
    }

    /**
     * Jj 3 R 101.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_101() {
        if (this.jj_3R_37())
            return true;
        return false;
    }

    /**
     * Jj 3 30.
     *
     * @return true, if successful
     */
    private final boolean jj_3_30() {
        if (this.jj_scan_token(FOR))
            return true;
        if (this.jj_scan_token(LPAREN))
            return true;
        if (this.jj_scan_token(IDENTIFIER))
            return true;
        if (this.jj_scan_token(COLON))
            return true;
        if (this.jj_3R_39())
            return true;
        if (this.jj_scan_token(RPAREN))
            return true;
        if (this.jj_3R_45())
            return true;
        return false;
    }

    /**
     * Jj 3 R 118.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_118() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3_30()) {
            this.jj_scanpos = xsp;
            if (this.jj_3R_137())
                return true;
        }
        return false;
    }

    /**
     * Jj 3 R 185.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_185() {
        if (this.jj_3R_194())
            return true;
        return false;
    }

    /**
     * Jj 3 R 100.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_100() {
        if (this.jj_3R_130())
            return true;
        return false;
    }

    /**
     * Jj 3 R 187.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_187() {
        if (this.jj_3R_195())
            return true;
        return false;
    }

    /**
     * Jj 3 R 99.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_99() {
        if (this.jj_scan_token(LPAREN))
            return true;
        if (this.jj_3R_39())
            return true;
        if (this.jj_scan_token(RPAREN))
            return true;
        return false;
    }

    /**
     * Jj 3 R 186.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_186() {
        if (this.jj_3R_39())
            return true;
        return false;
    }

    /**
     * Jj 3 R 173.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_173() {
        if (this.jj_scan_token(IMPLEMENTS))
            return true;
        if (this.jj_3R_76())
            return true;
        return false;
    }

    /**
     * Jj 3 R 57.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_57() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_98()) {
            this.jj_scanpos = xsp;
            if (this.jj_3R_99()) {
                this.jj_scanpos = xsp;
                if (this.jj_3R_100()) {
                    this.jj_scanpos = xsp;
                    if (this.jj_3R_101()) {
                        this.jj_scanpos = xsp;
                        if (this.jj_3R_102()) {
                            this.jj_scanpos = xsp;
                            if (this.jj_3R_103())
                                return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    /**
     * Jj 3 R 98.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_98() {
        if (this.jj_3R_129())
            return true;
        return false;
    }

    /**
     * Jj 3 R 172.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_172() {
        if (this.jj_scan_token(EXTENDS))
            return true;
        if (this.jj_3R_29())
            return true;
        return false;
    }

    /**
     * Jj 3 R 37.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_37() {
        if (this.jj_3R_29())
            return true;
        if (this.jj_3R_69())
            return true;
        return false;
    }

    /**
     * Jj 3 R 91.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_91() {
        if (this.jj_3R_41())
            return true;
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_scan_token(13)) {
            this.jj_scanpos = xsp;
            if (this.jj_3R_125())
                return true;
        }
        if (this.jj_scan_token(IDENTIFIER))
            return true;
        xsp = this.jj_scanpos;
        if (this.jj_3R_172())
            this.jj_scanpos = xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_173())
            this.jj_scanpos = xsp;
        if (this.jj_3R_38())
            return true;
        return false;
    }

    /**
     * Jj 3 13.
     *
     * @return true, if successful
     */
    private final boolean jj_3_13() {
        if (this.jj_scan_token(LPAREN))
            return true;
        if (this.jj_3R_36())
            return true;
        return false;
    }

    /**
     * Jj 3 R 117.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_117() {
        if (this.jj_scan_token(FOR))
            return true;
        if (this.jj_scan_token(LPAREN))
            return true;
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_185())
            this.jj_scanpos = xsp;
        if (this.jj_scan_token(SEMICOLON))
            return true;
        xsp = this.jj_scanpos;
        if (this.jj_3R_186())
            this.jj_scanpos = xsp;
        if (this.jj_scan_token(SEMICOLON))
            return true;
        xsp = this.jj_scanpos;
        if (this.jj_3R_187())
            this.jj_scanpos = xsp;
        if (this.jj_scan_token(RPAREN))
            return true;
        if (this.jj_3R_45())
            return true;
        return false;
    }

    /**
     * Jj 3 R 33.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_33() {
        if (this.jj_3R_57())
            return true;
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (this.jj_3R_58()) {
                this.jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    /**
     * Jj 3 R 217.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_217() {
        if (this.jj_scan_token(LPAREN))
            return true;
        if (this.jj_3R_32())
            return true;
        if (this.jj_scan_token(RPAREN))
            return true;
        if (this.jj_3R_208())
            return true;
        return false;
    }

    /**
     * Jj 3 R 116.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_116() {
        if (this.jj_scan_token(DO))
            return true;
        if (this.jj_3R_45())
            return true;
        if (this.jj_scan_token(WHILE))
            return true;
        if (this.jj_scan_token(LPAREN))
            return true;
        if (this.jj_3R_39())
            return true;
        if (this.jj_scan_token(RPAREN))
            return true;
        if (this.jj_scan_token(SEMICOLON))
            return true;
        return false;
    }

    /**
     * Jj 3 R 216.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_216() {
        if (this.jj_scan_token(LPAREN))
            return true;
        if (this.jj_3R_32())
            return true;
        if (this.jj_scan_token(RPAREN))
            return true;
        if (this.jj_3R_191())
            return true;
        return false;
    }

    /**
     * Jj 3 R 214.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_214() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_216()) {
            this.jj_scanpos = xsp;
            if (this.jj_3R_217())
                return true;
        }
        return false;
    }

    /**
     * Jj 3 12.
     *
     * @return true, if successful
     */
    private final boolean jj_3_12() {
        if (this.jj_3R_33())
            return true;
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_scan_token(100)) {
            this.jj_scanpos = xsp;
            if (this.jj_scan_token(101))
                return true;
        }
        return false;
    }

    /**
     * Jj 3 R 219.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_219() {
        if (this.jj_3R_33())
            return true;
        return false;
    }

    /**
     * Jj 3 R 115.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_115() {
        if (this.jj_scan_token(WHILE))
            return true;
        if (this.jj_scan_token(LPAREN))
            return true;
        if (this.jj_3R_39())
            return true;
        if (this.jj_scan_token(RPAREN))
            return true;
        if (this.jj_3R_45())
            return true;
        return false;
    }

    /**
     * Jj 3 11.
     *
     * @return true, if successful
     */
    private final boolean jj_3_11() {
        if (this.jj_scan_token(LPAREN))
            return true;
        if (this.jj_3R_29())
            return true;
        if (this.jj_scan_token(LBRACKET))
            return true;
        return false;
    }

    /**
     * Jj 3 R 218.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_218() {
        if (this.jj_3R_33())
            return true;
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_scan_token(100)) {
            this.jj_scanpos = xsp;
            if (this.jj_scan_token(101))
                return true;
        }
        return false;
    }

    /**
     * Jj 3 R 215.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_215() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_218()) {
            this.jj_scanpos = xsp;
            if (this.jj_3R_219())
                return true;
        }
        return false;
    }

    /**
     * Jj 3 29.
     *
     * @return true, if successful
     */
    private final boolean jj_3_29() {
        if (this.jj_3R_28())
            return true;
        return false;
    }

    /**
     * Jj 3 R 114.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_114() {
        if (this.jj_scan_token(IF))
            return true;
        if (this.jj_scan_token(LPAREN))
            return true;
        if (this.jj_3R_39())
            return true;
        if (this.jj_scan_token(RPAREN))
            return true;
        if (this.jj_3R_45())
            return true;
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_184())
            this.jj_scanpos = xsp;
        return false;
    }

    /**
     * Jj 3 R 72.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_72() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_scan_token(43)) {
            this.jj_scanpos = xsp;
            if (this.jj_scan_token(44)) {
                this.jj_scanpos = xsp;
                if (this.jj_scan_token(45)) {
                    this.jj_scanpos = xsp;
                    if (this.jj_scan_token(51)) {
                        this.jj_scanpos = xsp;
                        if (this.jj_scan_token(27)) {
                            this.jj_scanpos = xsp;
                            if (this.jj_scan_token(39)) {
                                this.jj_scanpos = xsp;
                                if (this.jj_scan_token(52)) {
                                    this.jj_scanpos = xsp;
                                    if (this.jj_scan_token(58)) {
                                        this.jj_scanpos = xsp;
                                        if (this.jj_scan_token(10)) {
                                            this.jj_scanpos = xsp;
                                            if (this.jj_scan_token(48)) {
                                                this.jj_scanpos = xsp;
                                                if (this.jj_scan_token(49))
                                                    return true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    /**
     * Jj 3 R 60.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_60() {
        if (this.jj_scan_token(LPAREN))
            return true;
        if (this.jj_3R_29())
            return true;
        if (this.jj_scan_token(RPAREN))
            return true;
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_scan_token(87)) {
            this.jj_scanpos = xsp;
            if (this.jj_scan_token(86)) {
                this.jj_scanpos = xsp;
                if (this.jj_scan_token(72)) {
                    this.jj_scanpos = xsp;
                    if (this.jj_scan_token(69)) {
                        this.jj_scanpos = xsp;
                        if (this.jj_scan_token(40)) {
                            this.jj_scanpos = xsp;
                            if (this.jj_3R_105())
                                return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    /**
     * Jj 3 R 59.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_59() {
        if (this.jj_scan_token(LPAREN))
            return true;
        if (this.jj_3R_29())
            return true;
        if (this.jj_scan_token(LBRACKET))
            return true;
        if (this.jj_scan_token(RBRACKET))
            return true;
        return false;
    }

    /**
     * Jj 3 9.
     *
     * @return true, if successful
     */
    private final boolean jj_3_9() {
        if (this.jj_3R_35())
            return true;
        return false;
    }

    /**
     * Jj 3 R 41.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_41() {
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (this.jj_3R_72()) {
                this.jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    /**
     * Jj 3 R 35.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_35() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3_10()) {
            this.jj_scanpos = xsp;
            if (this.jj_3R_59()) {
                this.jj_scanpos = xsp;
                if (this.jj_3R_60())
                    return true;
            }
        }
        return false;
    }

    /**
     * Jj 3 10.
     *
     * @return true, if successful
     */
    private final boolean jj_3_10() {
        if (this.jj_scan_token(LPAREN))
            return true;
        if (this.jj_3R_36())
            return true;
        return false;
    }

    /**
     * Jj 3 R 202.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_202() {
        if (this.jj_scan_token(_DEFAULT))
            return true;
        if (this.jj_scan_token(COLON))
            return true;
        return false;
    }

    /**
     * Jj 3 R 201.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_201() {
        if (this.jj_scan_token(CASE))
            return true;
        if (this.jj_3R_39())
            return true;
        if (this.jj_scan_token(COLON))
            return true;
        return false;
    }

    /**
     * Jj 3 R 193.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_193() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_201()) {
            this.jj_scanpos = xsp;
            if (this.jj_3R_202())
                return true;
        }
        return false;
    }

    /**
     * Jj 3 R 213.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_213() {
        if (this.jj_3R_215())
            return true;
        return false;
    }

    /**
     * Jj 3 R 183.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_183() {
        if (this.jj_3R_193())
            return true;
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (this.jj_3_29()) {
                this.jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    /**
     * Jj 3 R 212.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_212() {
        if (this.jj_3R_214())
            return true;
        return false;
    }

    /**
     * Jj 3 R 113.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_113() {
        if (this.jj_scan_token(SWITCH))
            return true;
        if (this.jj_scan_token(LPAREN))
            return true;
        if (this.jj_3R_39())
            return true;
        if (this.jj_scan_token(RPAREN))
            return true;
        if (this.jj_scan_token(LBRACE))
            return true;
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (this.jj_3R_183()) {
                this.jj_scanpos = xsp;
                break;
            }
        }
        if (this.jj_scan_token(RBRACE))
            return true;
        return false;
    }

    /**
     * Jj 3 R 211.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_211() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_scan_token(87)) {
            this.jj_scanpos = xsp;
            if (this.jj_scan_token(86))
                return true;
        }
        if (this.jj_3R_191())
            return true;
        return false;
    }

    /**
     * Jj 3 R 208.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_208() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_211()) {
            this.jj_scanpos = xsp;
            if (this.jj_3R_212()) {
                this.jj_scanpos = xsp;
                if (this.jj_3R_213())
                    return true;
            }
        }
        return false;
    }

    /**
     * Jj 3 R 207.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_207() {
        if (this.jj_scan_token(DECR))
            return true;
        if (this.jj_3R_33())
            return true;
        return false;
    }

    /**
     * Jj 3 1.
     *
     * @return true, if successful
     */
    private final boolean jj_3_1() {
        if (this.jj_3R_28())
            return true;
        return false;
    }

    /**
     * Jj 3 R 209.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_209() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_scan_token(104)) {
            this.jj_scanpos = xsp;
            if (this.jj_scan_token(105)) {
                this.jj_scanpos = xsp;
                if (this.jj_scan_token(111))
                    return true;
            }
        }
        if (this.jj_3R_191())
            return true;
        return false;
    }

    /**
     * Jj 3 R 206.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_206() {
        if (this.jj_scan_token(INCR))
            return true;
        if (this.jj_3R_33())
            return true;
        return false;
    }

    /**
     * Jj 3 R 44.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_44() {
        if (this.jj_scan_token(THROWS))
            return true;
        if (this.jj_3R_76())
            return true;
        return false;
    }

    /**
     * Jj 3 R 199.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_199() {
        if (this.jj_3R_208())
            return true;
        return false;
    }

    /**
     * Jj 3 R 198.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_198() {
        if (this.jj_3R_207())
            return true;
        return false;
    }

    /**
     * Jj 3 R 112.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_112() {
        if (this.jj_3R_39())
            return true;
        return false;
    }

    /**
     * Jj 3 R 197.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_197() {
        if (this.jj_3R_206())
            return true;
        return false;
    }

    /**
     * Jj 3 R 196.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_196() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_scan_token(102)) {
            this.jj_scanpos = xsp;
            if (this.jj_scan_token(103))
                return true;
        }
        if (this.jj_3R_191())
            return true;
        return false;
    }

    /**
     * Jj 3 R 191.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_191() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_196()) {
            this.jj_scanpos = xsp;
            if (this.jj_3R_197()) {
                this.jj_scanpos = xsp;
                if (this.jj_3R_198()) {
                    this.jj_scanpos = xsp;
                    if (this.jj_3R_199())
                        return true;
                }
            }
        }
        return false;
    }

    /**
     * Jj 3 R 181.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_181() {
        if (this.jj_3R_191())
            return true;
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (this.jj_3R_209()) {
                this.jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    /**
     * Jj 3 R 96.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_96() {
        if (this.jj_scan_token(FORMAL_COMMENT))
            return true;
        return false;
    }

    /**
     * Jj 3 R 200.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_200() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_scan_token(102)) {
            this.jj_scanpos = xsp;
            if (this.jj_scan_token(103))
                return true;
        }
        if (this.jj_3R_181())
            return true;
        return false;
    }

    /**
     * Jj 3 R 178.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_178() {
        if (this.jj_3R_181())
            return true;
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (this.jj_3R_200()) {
                this.jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    /**
     * Jj 3 R 192.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_192() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_scan_token(112)) {
            this.jj_scanpos = xsp;
            if (this.jj_scan_token(113)) {
                this.jj_scanpos = xsp;
                if (this.jj_scan_token(114)) {
                    this.jj_scanpos = xsp;
                    if (this.jj_scan_token(115)) {
                        this.jj_scanpos = xsp;
                        if (this.jj_scan_token(116)) {
                            this.jj_scanpos = xsp;
                            if (this.jj_scan_token(117))
                                return true;
                        }
                    }
                }
            }
        }
        if (this.jj_3R_178())
            return true;
        return false;
    }

    /**
     * Jj 3 R 52.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_52() {
        if (this.jj_3R_96())
            return true;
        return false;
    }

    /**
     * Jj 3 27.
     *
     * @return true, if successful
     */
    private final boolean jj_3_27() {
        if (this.jj_3R_41())
            return true;
        if (this.jj_3R_32())
            return true;
        if (this.jj_scan_token(IDENTIFIER))
            return true;
        return false;
    }

    /**
     * Jj 3 R 51.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_51() {
        if (this.jj_3R_95())
            return true;
        return false;
    }

    /**
     * Jj 3 R 171.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_171() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_scan_token(90)) {
            this.jj_scanpos = xsp;
            if (this.jj_scan_token(95))
                return true;
        }
        if (this.jj_3R_166())
            return true;
        return false;
    }

    /**
     * Jj 3 R 170.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_170() {
        if (this.jj_3R_178())
            return true;
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (this.jj_3R_192()) {
                this.jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    /**
     * Jj 3 R 50.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_50() {
        if (this.jj_3R_94())
            return true;
        return false;
    }

    /**
     * Jj 3 26.
     *
     * @return true, if successful
     */
    private final boolean jj_3_26() {
        if (this.jj_3R_41())
            return true;
        if (this.jj_scan_token(IDENTIFIER))
            return true;
        if (this.jj_3R_43())
            return true;
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_44())
            this.jj_scanpos = xsp;
        if (this.jj_scan_token(LBRACE))
            return true;
        return false;
    }

    /**
     * Jj 3 23.
     *
     * @return true, if successful
     */
    private final boolean jj_3_23() {
        if (this.jj_3R_28())
            return true;
        return false;
    }

    /**
     * Jj 3 28.
     *
     * @return true, if successful
     */
    private final boolean jj_3_28() {
        if (this.jj_3R_45())
            return true;
        return false;
    }

    /**
     * Jj 3 R 182.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_182() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_scan_token(84)) {
            this.jj_scanpos = xsp;
            if (this.jj_scan_token(85)) {
                this.jj_scanpos = xsp;
                if (this.jj_scan_token(82)) {
                    this.jj_scanpos = xsp;
                    if (this.jj_scan_token(83)) {
                        this.jj_scanpos = xsp;
                        if (this.jj_scan_token(91)) {
                            this.jj_scanpos = xsp;
                            if (this.jj_scan_token(92)) {
                                this.jj_scanpos = xsp;
                                if (this.jj_scan_token(93)) {
                                    this.jj_scanpos = xsp;
                                    if (this.jj_scan_token(94))
                                        return true;
                                }
                            }
                        }
                    }
                }
            }
        }
        if (this.jj_3R_170())
            return true;
        return false;
    }

    /**
     * Jj 3 25.
     *
     * @return true, if successful
     */
    private final boolean jj_3_25() {
        if (this.jj_3R_41())
            return true;
        if (this.jj_3R_42())
            return true;
        if (this.jj_scan_token(IDENTIFIER))
            return true;
        if (this.jj_scan_token(LPAREN))
            return true;
        return false;
    }

    /**
     * Jj 3 R 49.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_49() {
        if (this.jj_3R_93())
            return true;
        if (this.jj_scan_token(SEMICOLON))
            return true;
        return false;
    }

    /**
     * Jj 3 R 168.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_168() {
        if (this.jj_3R_170())
            return true;
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (this.jj_3R_182()) {
                this.jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    /**
     * Jj 3 24.
     *
     * @return true, if successful
     */
    private final boolean jj_3_24() {
        if (this.jj_3R_41())
            return true;
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_scan_token(13)) {
            this.jj_scanpos = xsp;
            if (this.jj_scan_token(37))
                return true;
        }
        return false;
    }

    /**
     * Jj 3 R 179.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_179() {
        if (this.jj_scan_token(INSTANCEOF))
            return true;
        if (this.jj_3R_32())
            return true;
        return false;
    }

    /**
     * Jj 3 R 48.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_48() {
        if (this.jj_3R_92())
            return true;
        return false;
    }

    /**
     * Jj 3 R 166.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_166() {
        if (this.jj_3R_168())
            return true;
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_179())
            this.jj_scanpos = xsp;
        return false;
    }

    /**
     * Jj 3 R 47.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_47() {
        if (this.jj_3R_92())
            return true;
        return false;
    }

    /**
     * Jj 3 R 167.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_167() {
        if (this.jj_scan_token(XOR))
            return true;
        if (this.jj_3R_161())
            return true;
        return false;
    }

    /**
     * Jj 3 R 46.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_46() {
        if (this.jj_3R_91())
            return true;
        return false;
    }

    /**
     * Jj 3 R 28.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_28() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_3R_46()) {
            this.jj_scanpos = xsp;
            if (this.jj_3R_47()) {
                this.jj_scanpos = xsp;
                if (this.jj_3R_48()) {
                    this.jj_scanpos = xsp;
                    if (this.jj_3R_49()) {
                        this.jj_scanpos = xsp;
                        if (this.jj_3_28()) {
                            this.jj_scanpos = xsp;
                            if (this.jj_3R_50()) {
                                this.jj_scanpos = xsp;
                                if (this.jj_3R_51()) {
                                    this.jj_scanpos = xsp;
                                    if (this.jj_3R_52())
                                        return true;
                                }
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    /**
     * Jj 3 R 164.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_164() {
        if (this.jj_3R_166())
            return true;
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (this.jj_3R_171()) {
                this.jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    /**
     * Jj 3 R 169.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_169() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_scan_token(106)) {
            this.jj_scanpos = xsp;
            if (this.jj_scan_token(107))
                return true;
        }
        if (this.jj_3R_164())
            return true;
        return false;
    }

    /**
     * Jj 3 R 38.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_38() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_scan_token(48))
            this.jj_scanpos = xsp;
        if (this.jj_scan_token(LBRACE))
            return true;
        while (true) {
            xsp = this.jj_scanpos;
            if (this.jj_3_23()) {
                this.jj_scanpos = xsp;
                break;
            }
        }
        if (this.jj_scan_token(RBRACE))
            return true;
        return false;
    }

    /**
     * Jj 3 R 161.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_161() {
        if (this.jj_3R_164())
            return true;
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (this.jj_3R_169()) {
                this.jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    /**
     * Jj 3 R 158.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_158() {
        if (this.jj_3R_161())
            return true;
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (this.jj_3R_167()) {
                this.jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    /**
     * Jj 3 R 156.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_156() {
        if (this.jj_scan_token(HOOK))
            return true;
        if (this.jj_3R_39())
            return true;
        if (this.jj_scan_token(COLON))
            return true;
        if (this.jj_3R_108())
            return true;
        return false;
    }

    /**
     * Jj 3 R 165.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_165() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_scan_token(108)) {
            this.jj_scanpos = xsp;
            if (this.jj_scan_token(109))
                return true;
        }
        if (this.jj_3R_158())
            return true;
        return false;
    }

    /**
     * Jj 3 R 40.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_40() {
        if (this.jj_scan_token(IDENTIFIER))
            return true;
        if (this.jj_scan_token(COLON))
            return true;
        if (this.jj_3R_45())
            return true;
        return false;
    }

    /**
     * Jj 3 R 153.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_153() {
        if (this.jj_3R_158())
            return true;
        Token xsp;
        while (true) {
            xsp = this.jj_scanpos;
            if (this.jj_3R_165()) {
                this.jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    /**
     * Jj 3 R 90.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_90() {
        if (this.jj_3R_124())
            return true;
        return false;
    }

    /**
     * Jj 3 R 89.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_89() {
        if (this.jj_3R_123())
            return true;
        return false;
    }

    /**
     * Jj 3 R 162.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_162() {
        Token xsp;
        xsp = this.jj_scanpos;
        if (this.jj_scan_token(98)) {
            this.jj_scanpos = xsp;
            if (this.jj_scan_token(99))
                return true;
        }
        if (this.jj_3R_153())
            return true;
        return false;
    }

    /**
     * Jj 3 R 88.
     *
     * @return true, if successful
     */
    private final boolean jj_3R_88() {
        if (this.jj_3R_122())
            return true;
        return false;
    }

    /** The token source. */
    public ParserTokenManager token_source;
    /** The jj input stream. */
    JavaCharStream jj_input_stream;
    /** The jj nt. */
    public Token token, jj_nt;
    /** The jj ntk. */
    private int jj_ntk;
    /** The jj lastpos. */
    private Token jj_scanpos, jj_lastpos;
    /** The jj la. */
    private int jj_la;
    /** The looking ahead. */
    public boolean lookingAhead = false;
    /** The jj sem LA. */
    private boolean jj_semLA;
    /** The jj gen. */
    private int jj_gen;
    /** The jj la 1. */
    private final int[] jj_la1 = new int[88];
    /** The jj la 1 0. */
    private static int[] jj_la1_0;
    /** The jj la 1 1. */
    private static int[] jj_la1_1;
    /** The jj la 1 2. */
    private static int[] jj_la1_2;
    /** The jj la 1 3. */
    private static int[] jj_la1_3;
    /** The jj la 1 4. */
    private static int[] jj_la1_4;
    static {
        jj_la1_0();
        jj_la1_1();
        jj_la1_2();
        jj_la1_3();
        jj_la1_4();
    }

    /**
     * Jj la 1 0.
     */
    private static void jj_la1_0() {
        jj_la1_0 = new int[] {0x1, 0x8000400, 0x8000400, 0x2000, 0x2000000, 0x0,
                0x20424800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x24424800,
                0x24424800, 0x0, 0x0, 0x20424800, 0x0, 0x20424800, 0x20424800,
                0x20424800, 0x0, 0x24424800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x0, 0x24424800, 0x0, 0x0, 0x24424800, 0x4000000, 0x0,
                0x0, 0x24424800, 0x0, 0x0, 0x4000000, 0x0, 0x0, 0x0, 0x4000000,
                0x4000000, 0x24424800, 0x0, 0x0, 0x0, 0x0, 0x0, 0x24624800,
                0x40081000, 0x0, 0x0, 0x108000, 0x108000, 0x800000, 0x2c424c00,
                0x24424800, 0x24424800, 0x40000000, 0x24424800, 0x0, 0x0, 0x0,
                0x0, 0x24424800, 0x10000, 0x10000000};
    }

    /**
     * Jj la 1 1.
     */
    private static void jj_la1_1() {
        jj_la1_1 = new int[] {0x0, 0x41b3880, 0x41b3880, 0x20, 0x0, 0x2,
                0x2008050, 0x400000, 0x10000, 0x10000, 0x0, 0x4, 0x0,
                0x12808350, 0x12808350, 0x0, 0x0, 0x8050, 0x0, 0x8050,
                0x2008050, 0x8050, 0x0, 0x12808350, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x0, 0x0, 0x0, 0x12808350, 0x0, 0x0, 0x12808350,
                0x12800300, 0x0, 0x0, 0x12808350, 0x0, 0x0, 0x12800300, 0x0,
                0x0, 0x0, 0x12800200, 0x800000, 0x12808350, 0x0, 0x0, 0x100,
                0x0, 0x0, 0x1a858351, 0x1284000, 0x10000, 0x404, 0x0, 0x0, 0x0,
                0x169bbbd0, 0x12808350, 0x12808350, 0x0, 0x12808350, 0x0, 0x0,
                0x0, 0x0, 0x12808350, 0x0, 0x0};
    }

    /**
     * Jj la 1 2.
     */
    private static void jj_la1_2() {
        jj_la1_2 = new int[] {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x0, 0x4400,
                0x0, 0x10000, 0x0, 0x20000, 0xc0052d, 0xc0052d, 0x8000, 0x8000,
                0x20, 0x20, 0x20, 0x20, 0x0, 0x8000, 0xc0012d, 0x20000,
                0x1000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x84000000, 0x84000000, 0x0, 0x783c0000, 0x783c0000, 0x0, 0x0,
                0x0, 0x0, 0x0, 0x0, 0x0, 0xc0012d, 0xc00000, 0xc00000, 0x12d,
                0xc0012d, 0x100, 0x0, 0x12d, 0x100, 0x11400, 0x10d, 0x20, 0x100,
                0x11400, 0xd, 0x0, 0xc0012d, 0x8000, 0x1100, 0x0, 0x1000,
                0x1000, 0xc0452d, 0x0, 0x0, 0x10, 0x0, 0x0, 0x0, 0xc0012d,
                0xc0012d, 0xc0012d, 0x0, 0xc0012d, 0x8000, 0x8000, 0x20, 0x20,
                0xc0012d, 0x0, 0x0};
    }

    /**
     * Jj la 1 3.
     */
    private static void jj_la1_3() {
        jj_la1_3 = new int[] {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x0, 0xf0, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0xf0, 0xd7c00000, 0x0, 0x3, 0x3, 0xc, 0xc, 0x3000, 0x3000,
                0x4000, 0xc00, 0xc00, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3f0000,
                0x3f0000, 0xc0, 0xc0, 0x8300, 0x8300, 0xc0, 0xf0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0xf0, 0xf0, 0xf0, 0x0, 0xf0, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x0,
                0x0};
    }

    /**
     * Jj la 1 4.
     */
    private static void jj_la1_4() {
        jj_la1_4 = new int[] {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x3f, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                0x0};
    }

    /** The jj 2 rtns. */
    private final JJCalls[] jj_2_rtns = new JJCalls[31];
    /** The jj rescan. */
    private boolean jj_rescan = false;
    /** The jj gc. */
    private int jj_gc = 0;

    /**
     * Instantiates a new parser.
     *
     * @param stream
     *            the stream
     */
    public Parser(final java.io.InputStream stream) {
        this.jj_input_stream = new JavaCharStream(stream, 1, 1);
        this.token_source = new ParserTokenManager(this.jj_input_stream);
        this.token = new Token();
        this.jj_ntk = -1;
        this.jj_gen = 0;
        for (int i = 0; i < 88; i++)
            this.jj_la1[i] = -1;
        for (int i = 0; i < this.jj_2_rtns.length; i++)
            this.jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Re init.
     *
     * @param stream
     *            the stream
     */
    public void ReInit(final java.io.InputStream stream) {
        this.jj_input_stream.ReInit(stream, 1, 1);
        this.token_source.ReInit(this.jj_input_stream);
        this.token = new Token();
        this.jj_ntk = -1;
        this.jjtree.reset();
        this.jj_gen = 0;
        for (int i = 0; i < 88; i++)
            this.jj_la1[i] = -1;
        for (int i = 0; i < this.jj_2_rtns.length; i++)
            this.jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Instantiates a new parser.
     *
     * @param stream
     *            the stream
     */
    public Parser(final java.io.Reader stream) {
        this.jj_input_stream = new JavaCharStream(stream, 1, 1);
        this.token_source = new ParserTokenManager(this.jj_input_stream);
        this.token = new Token();
        this.jj_ntk = -1;
        this.jj_gen = 0;
        for (int i = 0; i < 88; i++)
            this.jj_la1[i] = -1;
        for (int i = 0; i < this.jj_2_rtns.length; i++)
            this.jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Re init.
     *
     * @param stream
     *            the stream
     */
    public void ReInit(final java.io.Reader stream) {
        this.jj_input_stream.ReInit(stream, 1, 1);
        this.token_source.ReInit(this.jj_input_stream);
        this.token = new Token();
        this.jj_ntk = -1;
        this.jjtree.reset();
        this.jj_gen = 0;
        for (int i = 0; i < 88; i++)
            this.jj_la1[i] = -1;
        for (int i = 0; i < this.jj_2_rtns.length; i++)
            this.jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Instantiates a new parser.
     *
     * @param tm
     *            the tm
     */
    public Parser(final ParserTokenManager tm) {
        this.token_source = tm;
        this.token = new Token();
        this.jj_ntk = -1;
        this.jj_gen = 0;
        for (int i = 0; i < 88; i++)
            this.jj_la1[i] = -1;
        for (int i = 0; i < this.jj_2_rtns.length; i++)
            this.jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Re init.
     *
     * @param tm
     *            the tm
     */
    public void ReInit(final ParserTokenManager tm) {
        this.token_source = tm;
        this.token = new Token();
        this.jj_ntk = -1;
        this.jjtree.reset();
        this.jj_gen = 0;
        for (int i = 0; i < 88; i++)
            this.jj_la1[i] = -1;
        for (int i = 0; i < this.jj_2_rtns.length; i++)
            this.jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Jj consume token.
     *
     * @param kind
     *            the kind
     * @return the token
     * @throws ParseException
     *             the parse exception
     */
    private final Token jj_consume_token(final int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = this.token).next != null)
            this.token = this.token.next;
        else
            this.token = this.token.next = this.token_source.getNextToken();
        this.jj_ntk = -1;
        if (this.token.kind == kind) {
            this.jj_gen++;
            if (++this.jj_gc > 100) {
                this.jj_gc = 0;
                for (final JJCalls jj_2_rtn : this.jj_2_rtns) {
                    JJCalls c = jj_2_rtn;
                    while (c != null) {
                        if (c.gen < this.jj_gen)
                            c.first = null;
                        c = c.next;
                    }
                }
            }
            return this.token;
        }
        this.token = oldToken;
        this.jj_kind = kind;
        throw this.generateParseException();
    }

    /**
     * The Class LookaheadSuccess.
     */
    private static final class LookaheadSuccess extends java.lang.Error {

        /** The Constant serialVersionUID. */
        private static final long serialVersionUID = 1L;
    }

    /** The jj ls. */
    private final LookaheadSuccess jj_ls = new LookaheadSuccess();

    /**
     * Jj scan token.
     *
     * @param kind
     *            the kind
     * @return true, if successful
     */
    private final boolean jj_scan_token(final int kind) {
        if (this.jj_scanpos == this.jj_lastpos) {
            this.jj_la--;
            if (this.jj_scanpos.next == null)
                this.jj_lastpos = this.jj_scanpos = this.jj_scanpos.next = this.token_source
                        .getNextToken();
            else
                this.jj_lastpos = this.jj_scanpos = this.jj_scanpos.next;
        } else
            this.jj_scanpos = this.jj_scanpos.next;
        if (this.jj_rescan) {
            int i = 0;
            Token tok = this.token;
            while (tok != null && tok != this.jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null)
                this.jj_add_error_token(kind, i);
        }
        if (this.jj_scanpos.kind != kind)
            return true;
        if (this.jj_la == 0 && this.jj_scanpos == this.jj_lastpos)
            throw this.jj_ls;
        return false;
    }

    /**
     * Gets the next token.
     *
     * @return the next token
     */
    public final Token getNextToken() {
        if (this.token.next != null)
            this.token = this.token.next;
        else
            this.token = this.token.next = this.token_source.getNextToken();
        this.jj_ntk = -1;
        this.jj_gen++;
        return this.token;
    }

    /**
     * Gets the token.
     *
     * @param index
     *            the index
     * @return the token
     */
    public final Token getToken(final int index) {
        Token t = this.lookingAhead ? this.jj_scanpos : this.token;
        for (int i = 0; i < index; i++)
            if (t.next != null)
                t = t.next;
            else
                t = t.next = this.token_source.getNextToken();
        return t;
    }

    /**
     * Jj ntk.
     *
     * @return the int
     */
    private final int jj_ntk() {
        if ((this.jj_nt = this.token.next) == null)
            return this.jj_ntk = (this.token.next = this.token_source
                    .getNextToken()).kind;
        else
            return this.jj_ntk = this.jj_nt.kind;
    }

    /** The jj expentries. */
    private final java.util.Vector jj_expentries = new java.util.Vector();
    /** The jj expentry. */
    private int[] jj_expentry;
    /** The jj kind. */
    private int jj_kind = -1;
    /** The jj lasttokens. */
    private final int[] jj_lasttokens = new int[100];
    /** The jj endpos. */
    private int jj_endpos;

    /**
     * Jj add error token.
     *
     * @param kind
     *            the kind
     * @param pos
     *            the pos
     */
    private void jj_add_error_token(final int kind, final int pos) {
        if (pos >= 100)
            return;
        if (pos == this.jj_endpos + 1)
            this.jj_lasttokens[this.jj_endpos++] = kind;
        else if (this.jj_endpos != 0) {
            this.jj_expentry = new int[this.jj_endpos];
            for (int i = 0; i < this.jj_endpos; i++)
                this.jj_expentry[i] = this.jj_lasttokens[i];
            boolean exists = false;
            for (final java.util.Enumeration e = this.jj_expentries.elements();
                    e.hasMoreElements();) {
                final int[] oldentry = (int[]) e.nextElement();
                if (oldentry.length == this.jj_expentry.length) {
                    exists = true;
                    for (int i = 0; i < this.jj_expentry.length; i++)
                        if (oldentry[i] != this.jj_expentry[i]) {
                            exists = false;
                            break;
                        }
                    if (exists)
                        break;
                }
            }
            if (!exists)
                this.jj_expentries.addElement(this.jj_expentry);
            if (pos != 0)
                this.jj_lasttokens[(this.jj_endpos = pos) - 1] = kind;
        }
    }

    /**
     * Generate parse exception.
     *
     * @return the parses the exception
     */
    public ParseException generateParseException() {
        this.jj_expentries.removeAllElements();
        final boolean[] la1tokens = new boolean[134];
        for (int i = 0; i < 134; i++)
            la1tokens[i] = false;
        if (this.jj_kind >= 0) {
            la1tokens[this.jj_kind] = true;
            this.jj_kind = -1;
        }
        for (int i = 0; i < 88; i++)
            if (this.jj_la1[i] == this.jj_gen)
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & 1 << j) != 0)
                        la1tokens[j] = true;
                    if ((jj_la1_1[i] & 1 << j) != 0)
                        la1tokens[32 + j] = true;
                    if ((jj_la1_2[i] & 1 << j) != 0)
                        la1tokens[64 + j] = true;
                    if ((jj_la1_3[i] & 1 << j) != 0)
                        la1tokens[96 + j] = true;
                    if ((jj_la1_4[i] & 1 << j) != 0)
                        la1tokens[128 + j] = true;
                }
        for (int i = 0; i < 134; i++)
            if (la1tokens[i]) {
                this.jj_expentry = new int[1];
                this.jj_expentry[0] = i;
                this.jj_expentries.addElement(this.jj_expentry);
            }
        this.jj_endpos = 0;
        this.jj_rescan_token();
        this.jj_add_error_token(0, 0);
        final int[][] exptokseq = new int[this.jj_expentries.size()][];
        for (int i = 0; i < this.jj_expentries.size(); i++)
            exptokseq[i] = (int[]) this.jj_expentries.elementAt(i);
        return new ParseException(this.token, exptokseq, tokenImage);
    }

    /**
     * Enable tracing.
     */
    public final void enable_tracing() {}

    /**
     * Disable tracing.
     */
    public final void disable_tracing() {}

    /**
     * Jj rescan token.
     */
    private final void jj_rescan_token() {
        this.jj_rescan = true;
        for (int i = 0; i < 31; i++) {
            JJCalls p = this.jj_2_rtns[i];
            do {
                if (p.gen > this.jj_gen) {
                    this.jj_la = p.arg;
                    this.jj_lastpos = this.jj_scanpos = p.first;
                    switch (i) {
                        case 0:
                            this.jj_3_1();
                            break;
                        case 1:
                            this.jj_3_2();
                            break;
                        case 2:
                            this.jj_3_3();
                            break;
                        case 3:
                            this.jj_3_4();
                            break;
                        case 4:
                            this.jj_3_5();
                            break;
                        case 5:
                            this.jj_3_6();
                            break;
                        case 6:
                            this.jj_3_7();
                            break;
                        case 7:
                            this.jj_3_8();
                            break;
                        case 8:
                            this.jj_3_9();
                            break;
                        case 9:
                            this.jj_3_10();
                            break;
                        case 10:
                            this.jj_3_11();
                            break;
                        case 11:
                            this.jj_3_12();
                            break;
                        case 12:
                            this.jj_3_13();
                            break;
                        case 13:
                            this.jj_3_14();
                            break;
                        case 14:
                            this.jj_3_15();
                            break;
                        case 15:
                            this.jj_3_16();
                            break;
                        case 16:
                            this.jj_3_17();
                            break;
                        case 17:
                            this.jj_3_18();
                            break;
                        case 18:
                            this.jj_3_19();
                            break;
                        case 19:
                            this.jj_3_20();
                            break;
                        case 20:
                            this.jj_3_21();
                            break;
                        case 21:
                            this.jj_3_22();
                            break;
                        case 22:
                            this.jj_3_23();
                            break;
                        case 23:
                            this.jj_3_24();
                            break;
                        case 24:
                            this.jj_3_25();
                            break;
                        case 25:
                            this.jj_3_26();
                            break;
                        case 26:
                            this.jj_3_27();
                            break;
                        case 27:
                            this.jj_3_28();
                            break;
                        case 28:
                            this.jj_3_29();
                            break;
                        case 29:
                            this.jj_3_30();
                            break;
                        case 30:
                            this.jj_3_31();
                            break;
                    }
                }
                p = p.next;
            }
            while (p != null);
        }
        this.jj_rescan = false;
    }

    /**
     * Jj save.
     *
     * @param index
     *            the index
     * @param xla
     *            the xla
     */
    private final void jj_save(final int index, final int xla) {
        JJCalls p = this.jj_2_rtns[index];
        while (p.gen > this.jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }
        p.gen = this.jj_gen + xla - this.jj_la;
        p.first = this.token;
        p.arg = xla;
    }

    /**
     * The Class JJCalls.
     */
    static final class JJCalls {

        /** The gen. */
        int gen;
        /** The first. */
        Token first;
        /** The arg. */
        int arg;
        /** The next. */
        JJCalls next;
    }
}
