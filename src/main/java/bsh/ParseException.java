/*****************************************************************************
 * Licensed to the Apache Software Foundation (ASF) under one                *
 * or more contributor license agreements.  See the NOTICE file              *
 * distributed with this work for additional information                     *
 * regarding copyright ownership.  The ASF licenses this file                *
 * to you under the Apache License, Version 2.0 (the                         *
 * "License"); you may not use this file except in compliance                *
 * with the License.  You may obtain a copy of the License at                *
 *                                                                           *
 *     http://www.apache.org/licenses/LICENSE-2.0                            *
 *                                                                           *
 * Unless required by applicable law or agreed to in writing,                *
 * software distributed under the License is distributed on an               *
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY                    *
 * KIND, either express or implied.  See the License for the                 *
 * specific language governing permissions and limitations                   *
 * under the License.                                                        *
 *                                                                           *
 *                                                                           *
 * This file is part of the BeanShell Java Scripting distribution.           *
 * Documentation and updates may be found at http://www.beanshell.org/       *
 * Patrick Niemeyer (pat@pat.net)                                            *
 * Author of Learning Java, O'Reilly & Associates                            *
 *                                                                           *
 *****************************************************************************/
/* Generated By:JavaCC: Do not edit this line. ParseException.java Version 3.0 *
    This file was auto generated, but has been modified since then.  If we
    need to regenerate it for some reason we should be careful to look at
    the notes below.

    All BeanShell modifications are demarcated by "Begin BeanShell
    Modification - ... " and "End BeanShell Modification - ..."

    Note: Please leave the ^M carriage return in the above auto-generated line
    or JavaCC will complain about version on Win systems.

    BeanShell Modification to generated file
    ----------------------------------------

    - Added sourceFile attribute
        setErrorSourceFile()
        getErrorSourceFile()
    - Modified getMessage() to print more tersely except on debug
      (removed "Was expecting one of...)
    - Added sourceFile info to getMessage()
    - Made ParseException extend EvalError
    - Modified constructors to use EvalError
    - Override
        getErrorLineNumber()
        getErrorText()
    - Add
        toString()

*/
package bsh;

/**
 * This exception is thrown when parse errors are encountered.
 * You can explicitly create objects of this exception type by
 * calling the method generateParseException in the generated
 * parser.
 *
 * You can modify this class to customize your error reporting
 * mechanisms so long as you retain the public fields.
 */
public class ParseException extends EvalError {

    /** The Constant serialVersionUID. */
    private static final long serialVersionUID = 1L;

    /** The source file. */
    String sourceFile = "<unknown>";

    /**
     * Used to add source file info to exception.
     *
     * @param file
     *            the new error source file
     */
    public void setErrorSourceFile(final String file) {
        this.sourceFile = file;
    }

    /** {@inheritDoc} */
    @Override
    public String getErrorSourceFile() {
        return this.sourceFile;
    }

    /**
     * This constructor is used by the method "generateParseException"
     * in the generated parser. Calling this constructor generates
     * a new object of this type with the fields "currentToken",
     * "expectedTokenSequences", and "tokenImage" set. The boolean
     * flag "specialConstructor" is also set to true to indicate that
     * this constructor was used to create this object.
     * This constructor calls its super class with the empty string
     * to force the "toString" method of parent class "Throwable" to
     * print the error message in the form:
     * ParseException: <result of getMessage>
     *
     * @param currentTokenVal
     *            the current token val
     * @param expectedTokenSequencesVal
     *            the expected token sequences val
     * @param tokenImageVal
     *            the token image val
     */
    public ParseException(final Token currentTokenVal,
            final int[][] expectedTokenSequencesVal,
            final String[] tokenImageVal) {
        this();
        this.specialConstructor = true;
        this.currentToken = currentTokenVal;
        this.expectedTokenSequences = expectedTokenSequencesVal;
        this.tokenImage = tokenImageVal;
    }

    /**
     * The following constructors are for use by you for whatever
     * purpose you can think of. Constructing the exception in this
     * manner makes the exception behave in the normal way - i.e., as
     * documented in the class "Throwable". The fields "errorToken",
     * "expectedTokenSequences", and "tokenImage" do not contain
     * relevant information. The JavaCC generated code does not use
     * these constructors.
     */
    public ParseException() {
        this("");
        this.specialConstructor = false;
    }

    /**
     * Instantiates a new parses the exception.
     *
     * @param message
     *            the message
     */
    public ParseException(final String message) {
        // null node, null callstack, ParseException knows where the error is.
        super(message, null, null);
        this.specialConstructor = false;
    }

    /**
     * This variable determines which constructor was used to create
     * this object and thereby affects the semantics of the
     * "getMessage" method (see below).
     */
    protected boolean specialConstructor;
    /**
     * This is the last token that has been consumed successfully. If
     * this object has been created due to a parse error, the token
     * followng this token will (therefore) be the first error token.
     */
    public Token currentToken;
    /**
     * Each entry in this array is an array of integers. Each array
     * of integers represents a sequence of tokens (by their ordinal
     * values) that is expected at this point of the parse.
     */
    public int[][] expectedTokenSequences;
    /**
     * This is a reference to the "tokenImage" array of the generated
     * parser within which the parse error occurred. This array is
     * defined in the generated ...Constants interface.
     */
    public String[] tokenImage;

    /** {@inheritDoc} */
    @Override
    public String getMessage() {
        return this.getMessage(false);
    }

    /**
     * This method has the standard behavior when this object has been
     * created using the standard constructors. Otherwise, it uses
     * "currentToken" and "expectedTokenSequences" to generate a parse
     * error message and returns it. If this object has been created
     * due to a parse error, and you do not catch it (it gets thrown
     * from the parser), then this method is called during the printing
     * of the final stack trace, and hence the correct error message
     * gets displayed.
     *
     * @param debug
     *            the debug
     * @return the message
     */
    public String getMessage(final boolean debug) {
        if (!this.specialConstructor)
            return super.getMessage();
        String expected = "";
        int maxSize = 0;
        for (final int[] expectedTokenSequence : this.expectedTokenSequences) {
            if (maxSize < expectedTokenSequence.length)
                maxSize = expectedTokenSequence.length;
            for (final int element : expectedTokenSequence)
                expected += this.tokenImage[element] + " ";
            if (expectedTokenSequence[expectedTokenSequence.length - 1] != 0)
                expected += "...";
            expected += this.eol + "    ";
        }
        String retval = "In file: " + this.sourceFile + " Encountered \"";
        Token tok = this.currentToken.next;
        for (int i = 0; i < maxSize; i++) {
            if (i != 0)
                retval += " ";
            if (tok.kind == 0) {
                retval += this.tokenImage[0];
                break;
            }
            retval += this.add_escapes(tok.image);
            tok = tok.next;
        }
        retval += "\" at line " + this.currentToken.next.beginLine + ", column "
                + this.currentToken.next.beginColumn + "." + this.eol;
        if (debug) {
            if (this.expectedTokenSequences.length == 1)
                retval += "Was expecting:" + this.eol + "    ";
            else
                retval += "Was expecting one of:" + this.eol + "    ";
            retval += expected;
        }
        return retval;
    }

    /**
     * The end of line string for this machine.
     */
    protected String eol = System.getProperty("line.separator", "\n");

    /**
     * Used to convert raw characters to their escaped version
     * when these raw version cannot be used as part of an ASCII
     * string literal.
     *
     * @param str
     *            the str
     * @return the string
     */
    protected String add_escapes(final String str) {
        final StringBuffer retval = new StringBuffer();
        char ch;
        for (int i = 0; i < str.length(); i++)
            switch (str.charAt(i)) {
                case 0:
                    continue;
                case '\b':
                    retval.append("\\b");
                    continue;
                case '\t':
                    retval.append("\\t");
                    continue;
                case '\n':
                    retval.append("\\n");
                    continue;
                case '\f':
                    retval.append("\\f");
                    continue;
                case '\r':
                    retval.append("\\r");
                    continue;
                case '\"':
                    retval.append("\\\"");
                    continue;
                case '\'':
                    retval.append("\\\'");
                    continue;
                case '\\':
                    retval.append("\\\\");
                    continue;
                default:
                    if ((ch = str.charAt(i)) < 0x20 || ch > 0x7e) {
                        final String s = "0000" + Integer.toString(ch, 16);
                        retval.append("\\u"
                                + s.substring(s.length() - 4, s.length()));
                    } else
                        retval.append(ch);
                    continue;
            }
        return retval.toString();
    }

    /** {@inheritDoc} */
    @Override
    public int getErrorLineNumber() {
        return this.currentToken.next.beginLine;
    }

    /** {@inheritDoc} */
    @Override
    public String getErrorText() {
        // copied from generated getMessage()
        int maxSize = 0;
        for (final int[] expectedTokenSequence : this.expectedTokenSequences)
            if (maxSize < expectedTokenSequence.length)
                maxSize = expectedTokenSequence.length;
        String retval = "";
        Token tok = this.currentToken.next;
        for (int i = 0; i < maxSize; i++) {
            if (i != 0)
                retval += " ";
            if (tok.kind == 0) {
                retval += this.tokenImage[0];
                break;
            }
            retval += this.add_escapes(tok.image);
            tok = tok.next;
        }
        return retval;
    }

    /** {@inheritDoc} */
    @Override
    public String toString() {
        return this.getMessage();
    }
}
