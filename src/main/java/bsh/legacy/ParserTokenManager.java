/* ParserTokenManager.java */
/* Generated by:  JJTree&ParserGeneratorCC: Do not edit this line. ParserTokenManager.java */
/*****************************************************************************
 * Licensed to the Apache Software Foundation (ASF) under one                *
 * or more contributor license agreements.  See the NOTICE file              *
 * distributed with this work for additional information                     *
 * regarding copyright ownership.  The ASF licenses this file                *
 * to you under the Apache License, Version 2.0 (the                         *
 * "License"); you may not use this file except in compliance                *
 * with the License.  You may obtain a copy of the License at                *
 *                                                                           *
 *     http://www.apache.org/licenses/LICENSE-2.0                            *
 *                                                                           *
 * Unless required by applicable law or agreed to in writing,                *
 * software distributed under the License is distributed on an               *
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY                    *
 * KIND, either express or implied.  See the License for the                 *
 * specific language governing permissions and limitations                   *
 * under the License.                                                        *
 *                                                                           *
 *                                                                           *
 * This file is part of the BeanShell Java Scripting distribution.           *
 * Documentation and updates may be found at http://www.beanshell.org/       *
 * Patrick Niemeyer (pat@pat.net)                                            *
 * Author of Learning Java, O'Reilly & Associates                            *
 *                                                                           *
 *****************************************************************************/
package bsh.legacy;
import java.io.IOException;
import java.io.Reader;

/** Token Manager. */
@SuppressWarnings ("unused")
class ParserTokenManager implements ParserConstants {
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2){
   switch (pos)
   {
      case 0:
         if ((active1 & 0x8000080000000000L) != 0x0L)
            return 64;
         if ((active1 & 0x40000021000000L) != 0x0L || (active2 & 0x20400L) != 0x0L)
            return 86;
         if ((active1 & 0x100000L) != 0x0L || (active2 & 0x800000L) != 0x0L)
            return 18;
         if ((active0 & 0x1ffffffffffff800L) != 0x0L || (active2 & 0x2000000L) != 0x0L)
         {
            jjmatchedKind = 73;
            return 42;
         }
         if ((active0 & 0x3eL) != 0x0L)
            return 0;
         return -1;
      case 1:
         if ((active1 & 0x40000000000000L) != 0x0L || (active2 & 0x400L) != 0x0L)
            return 86;
         if ((active0 & 0x200c00000L) != 0x0L)
            return 42;
         if ((active0 & 0x1ffffffdff3ff800L) != 0x0L || (active2 & 0x2000000L) != 0x0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 73;
               jjmatchedPos = 1;
            }
            return 42;
         }
         return -1;
      case 2:
         if ((active0 & 0x200026080000000L) != 0x0L)
            return 42;
         if ((active0 & 0x1dfffd9d7fbff800L) != 0x0L || (active2 & 0x2000000L) != 0x0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 73;
               jjmatchedPos = 2;
            }
            return 42;
         }
         return -1;
      case 3:
         if ((active0 & 0x500048103058000L) != 0x0L)
            return 42;
         if ((active0 & 0x18fff95c7cba7800L) != 0x0L || (active2 & 0x2000000L) != 0x0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 73;
               jjmatchedPos = 3;
            }
            return 42;
         }
         return -1;
      case 4:
         if ((active0 & 0x10c10000780a6000L) != 0x0L)
            return 42;
         if ((active0 & 0x83ef95c04b01800L) != 0x0L || (active2 & 0x2000000L) != 0x0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 73;
               jjmatchedPos = 4;
            }
            return 42;
         }
         return -1;
      case 5:
         if ((active0 & 0x834385424301800L) != 0x0L || (active2 & 0x2000000L) != 0x0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 5;
            return 42;
         }
         if ((active0 & 0x8ac10800800000L) != 0x0L)
            return 42;
         return -1;
      case 6:
         if ((active0 & 0x180024201000L) != 0x0L || (active2 & 0x2000000L) != 0x0L)
            return 42;
         if ((active0 & 0x834205400100800L) != 0x0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 73;
               jjmatchedPos = 6;
            }
            return 42;
         }
         return -1;
      case 7:
         if ((active0 & 0x804000000100800L) != 0x0L)
            return 42;
         if ((active0 & 0x30205400000000L) != 0x0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 7;
            return 42;
         }
         return -1;
      case 8:
         if ((active0 & 0x20204000000000L) != 0x0L)
            return 42;
         if ((active0 & 0x10001400000000L) != 0x0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 8;
            return 42;
         }
         return -1;
      case 9:
         if ((active0 & 0x1400000000L) != 0x0L)
            return 42;
         if ((active0 & 0x10000000000000L) != 0x0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 9;
            return 42;
         }
         return -1;
      case 10:
         if ((active0 & 0x10000000000000L) != 0x0L)
         {
            if (jjmatchedPos != 10)
            {
               jjmatchedKind = 73;
               jjmatchedPos = 10;
            }
            return 42;
         }
         return -1;
      case 11:
         if ((active0 & 0x10000000000000L) != 0x0L)
            return 42;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_0(0, 2, 0);
      case 10:
         return jjStartNfaWithStates_0(0, 5, 0);
      case 12:
         return jjStartNfaWithStates_0(0, 4, 0);
      case 13:
         return jjStartNfaWithStates_0(0, 3, 0);
      case ' ':
         return jjStartNfaWithStates_0(0, 1, 0);
      case '!':
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000L, 0x0L);
      case '%':
         jjmatchedKind = 114;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40L);
      case '&':
         jjmatchedKind = 108;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000L, 0x1L);
      case '(':
         return jjStopAtPos(0, 76);
      case ')':
         return jjStopAtPos(0, 77);
      case '*':
         jjmatchedKind = 106;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4010000000000000L, 0x100L);
      case '+':
         jjmatchedKind = 104;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000004000000000L, 0x0L);
      case ',':
         return jjStopAtPos(0, 83);
      case '-':
         jjmatchedKind = 105;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000008000000000L, 0x10000L);
      case '.':
         jjmatchedKind = 84;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800000L);
      case '/':
         jjmatchedKind = 107;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000000L, 0x0L);
      case ':':
         return jjStopAtPos(0, 150);
      case ';':
         return jjStopAtPos(0, 82);
      case '<':
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000020000000L, 0x20400L);
      case '=':
         jjmatchedKind = 85;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L, 0x0L);
      case '>':
         jjmatchedKind = 86;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x500000080000000L, 0x5000L);
      case '?':
         jjmatchedKind = 149;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x11c0000L);
      case '@':
         return jjMoveStringLiteralDfa1_0(0x0L, 0xaaaa02942800000L, 0xaaaaL);
      case '[':
         return jjStopAtPos(0, 80);
      case ']':
         return jjStopAtPos(0, 81);
      case '^':
         jjmatchedKind = 112;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10L);
      case 'a':
         return jjMoveStringLiteralDfa1_0(0x800L, 0x0L, 0x0L);
      case 'b':
         return jjMoveStringLiteralDfa1_0(0xb000L, 0x0L, 0x0L);
      case 'c':
         return jjMoveStringLiteralDfa1_0(0x1f4000L, 0x0L, 0x0L);
      case 'd':
         return jjMoveStringLiteralDfa1_0(0xe00000L, 0x0L, 0x2000000L);
      case 'e':
         return jjMoveStringLiteralDfa1_0(0x7000000L, 0x0L, 0x0L);
      case 'f':
         return jjMoveStringLiteralDfa1_0(0xf8000000L, 0x0L, 0x0L);
      case 'g':
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L, 0x0L);
      case 'i':
         return jjMoveStringLiteralDfa1_0(0x7e00000000L, 0x0L, 0x0L);
      case 'l':
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L, 0x0L);
      case 'n':
         return jjMoveStringLiteralDfa1_0(0x70000000000L, 0x0L, 0x0L);
      case 'p':
         return jjMoveStringLiteralDfa1_0(0x780000000000L, 0x0L, 0x0L);
      case 'r':
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L, 0x0L);
      case 's':
         return jjMoveStringLiteralDfa1_0(0x1f000000000000L, 0x0L, 0x0L);
      case 't':
         return jjMoveStringLiteralDfa1_0(0x3e0000000000000L, 0x0L, 0x0L);
      case 'v':
         return jjMoveStringLiteralDfa1_0(0xc00000000000000L, 0x0L, 0x0L);
      case 'w':
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L, 0x0L);
      case '{':
         return jjStopAtPos(0, 78);
      case '|':
         jjmatchedKind = 110;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L, 0x4L);
      case '}':
         return jjStopAtPos(0, 79);
      case '~':
         return jjStopAtPos(0, 91);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case '&':
         if ((active1 & 0x1000000000L) != 0x0L)
            return jjStopAtPos(1, 100);
         break;
      case '*':
         if ((active1 & 0x10000000000000L) != 0x0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x0L, active2, 0x100L);
      case '+':
         if ((active1 & 0x4000000000L) != 0x0L)
            return jjStopAtPos(1, 102);
         break;
      case '-':
         if ((active1 & 0x8000000000L) != 0x0L)
            return jjStopAtPos(1, 103);
         break;
      case '.':
         if ((active2 & 0x1000000L) != 0x0L)
            return jjStopAtPos(1, 152);
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x0L, active2, 0x800000L);
      case ':':
         if ((active2 & 0x100000L) != 0x0L)
            return jjStopAtPos(1, 148);
         break;
      case '<':
         if ((active1 & 0x40000000000000L) != 0x0L)
         {
            jjmatchedKind = 118;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x0L, active2, 0x400L);
      case '=':
         if ((active1 & 0x10000000L) != 0x0L)
            return jjStopAtPos(1, 92);
         else if ((active1 & 0x20000000L) != 0x0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x80000000L) != 0x0L)
            return jjStopAtPos(1, 95);
         else if ((active1 & 0x200000000L) != 0x0L)
            return jjStopAtPos(1, 97);
         else if ((active1 & 0x1000000000000000L) != 0x0L)
            return jjStopAtPos(1, 124);
         else if ((active1 & 0x2000000000000000L) != 0x0L)
            return jjStopAtPos(1, 125);
         else if ((active1 & 0x4000000000000000L) != 0x0L)
            return jjStopAtPos(1, 126);
         else if ((active1 & 0x8000000000000000L) != 0x0L)
            return jjStopAtPos(1, 127);
         else if ((active2 & 0x1L) != 0x0L)
            return jjStopAtPos(1, 128);
         else if ((active2 & 0x4L) != 0x0L)
            return jjStopAtPos(1, 130);
         else if ((active2 & 0x10L) != 0x0L)
            return jjStopAtPos(1, 132);
         else if ((active2 & 0x40L) != 0x0L)
            return jjStopAtPos(1, 134);
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x0L, active2, 0x20000L);
      case '>':
         if ((active1 & 0x100000000000000L) != 0x0L)
         {
            jjmatchedKind = 120;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x10000L) != 0x0L)
            return jjStopAtPos(1, 144);
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x400000000000000L, active2, 0x5000L);
      case '?':
         if ((active2 & 0x80000L) != 0x0L)
         {
            jjmatchedKind = 147;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x0L, active2, 0x40000L);
      case 'a':
         return jjMoveStringLiteralDfa2_0(active0, 0x90008030000L, active1, 0x2000000000L, active2, 0x2L);
      case 'b':
         return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0x2a00000000000L, active2, 0x0L);
      case 'e':
         return jjMoveStringLiteralDfa2_0(active0, 0x820000200000L, active1, 0x0L, active2, 0x2000000L);
      case 'f':
         if ((active0 & 0x200000000L) != 0x0L)
            return jjStartNfaWithStates_0(1, 33, 42);
         break;
      case 'g':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x100800000L, active2, 0x0L);
      case 'h':
         return jjMoveStringLiteralDfa2_0(active0, 0x10c1000000040000L, active1, 0x0L, active2, 0x0L);
      case 'i':
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000L, active1, 0x0L, active2, 0x0L);
      case 'l':
         return jjMoveStringLiteralDfa2_0(active0, 0x41004000L, active1, 0x80000042000000L, active2, 0x800L);
      case 'm':
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000L, active1, 0x8000000000000L, active2, 0x80L);
      case 'n':
         return jjMoveStringLiteralDfa2_0(active0, 0x7002000000L, active1, 0x0L, active2, 0x0L);
      case 'o':
         if ((active0 & 0x400000L) != 0x0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xc00008180981000L, active1, 0x800000000L, active2, 0x8L);
      case 'p':
         return jjMoveStringLiteralDfa2_0(active0, 0x0L, active1, 0x20000000000000L, active2, 0x200L);
      case 'r':
         return jjMoveStringLiteralDfa2_0(active0, 0x320300000002000L, active1, 0xa00000000000000L, active2, 0xa000L);
      case 't':
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000000000L, active1, 0x0L, active2, 0x0L);
      case 'u':
         return jjMoveStringLiteralDfa2_0(active0, 0x440000000000L, active1, 0x0L, active2, 0x0L);
      case 'w':
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0x0L, active2, 0x0L);
      case 'x':
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0x0L, active2, 0x20L);
      case 'y':
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000008000L, active1, 0x0L, active2, 0x0L);
      case '|':
         if ((active1 & 0x400000000L) != 0x0L)
            return jjStopAtPos(1, 98);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case '.':
         if ((active2 & 0x800000L) != 0x0L)
            return jjStopAtPos(2, 151);
         break;
      case '=':
         if ((active2 & 0x100L) != 0x0L)
            return jjStopAtPos(2, 136);
         else if ((active2 & 0x400L) != 0x0L)
            return jjStopAtPos(2, 138);
         else if ((active2 & 0x1000L) != 0x0L)
            return jjStopAtPos(2, 140);
         else if ((active2 & 0x40000L) != 0x0L)
            return jjStopAtPos(2, 146);
         break;
      case '>':
         if ((active1 & 0x400000000000000L) != 0x0L)
         {
            jjmatchedKind = 122;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x20000L) != 0x0L)
            return jjStopAtPos(2, 145);
         return jjMoveStringLiteralDfa3_0(active0, 0x0L, active1, 0x0L, active2, 0x4000L);
      case 'a':
         return jjMoveStringLiteralDfa3_0(active0, 0x22000000044000L, active1, 0x0L, active2, 0x0L);
      case 'b':
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0x0L, active2, 0x0L);
      case 'c':
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0x0L, active2, 0x0L);
      case 'e':
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0x80000000000000L, active2, 0x800L);
      case 'f':
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0x0L, active2, 0x2000000L);
      case 'i':
         return jjMoveStringLiteralDfa3_0(active0, 0x1408100000000000L, active1, 0xa02a00000000000L, active2, 0xa000L);
      case 'l':
         return jjMoveStringLiteralDfa3_0(active0, 0x800040008000000L, active1, 0x0L, active2, 0x0L);
      case 'n':
         return jjMoveStringLiteralDfa3_0(active0, 0x10008030180000L, active1, 0x2000000000L, active2, 0x2L);
      case 'o':
         return jjMoveStringLiteralDfa3_0(active0, 0x1200040001000L, active1, 0x28000000000000L, active2, 0x2a0L);
      case 'p':
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000000L, active1, 0x0L, active2, 0x0L);
      case 'r':
         if ((active0 & 0x80000000L) != 0x0L)
            return jjStartNfaWithStates_0(2, 31, 42);
         else if ((active1 & 0x800000000L) != 0x0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0xc4000000000000L, active1, 0x0L, active2, 0x8L);
      case 's':
         return jjMoveStringLiteralDfa3_0(active0, 0x1001010800L, active1, 0x0L, active2, 0x0L);
      case 't':
         if ((active0 & 0x2000000000L) != 0x0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x800000L) != 0x0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x2000000L) != 0x0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x814104028000L, active1, 0x140000000L, active2, 0x0L);
      case 'u':
         return jjMoveStringLiteralDfa3_0(active0, 0x100000002800000L, active1, 0x0L, active2, 0x0L);
      case 'w':
         if ((active0 & 0x20000000000L) != 0x0L)
            return jjStartNfaWithStates_0(2, 41, 42);
         break;
      case 'y':
         if ((active0 & 0x200000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(2, 57, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case '=':
         if ((active2 & 0x4000L) != 0x0L)
            return jjStopAtPos(3, 142);
         break;
      case '_':
         return jjMoveStringLiteralDfa4_0(active0, 0x0L, active1, 0x0L, active2, 0x8L);
      case 'a':
         return jjMoveStringLiteralDfa4_0(active0, 0x800000070202000L, active1, 0x0L, active2, 0x2000000L);
      case 'b':
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0x0L, active2, 0x0L);
      case 'c':
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000020000L, active1, 0x0L, active2, 0x0L);
      case 'd':
         if ((active0 & 0x400000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 58, 42);
         else if ((active1 & 0x2000000000L) != 0x0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8000000000000L) != 0x0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x0L, active1, 0x0L, active2, 0x82L);
      case 'e':
         if ((active0 & 0x8000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 15, 42);
         else if ((active0 & 0x10000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 16, 42);
         else if ((active0 & 0x1000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 24, 42);
         else if ((active0 & 0x100000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 56, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x4004000000L, active1, 0x140000000L, active2, 0x0L);
      case 'f':
         return jjMoveStringLiteralDfa4_0(active0, 0x0L, active1, 0x80000000000000L, active2, 0x800L);
      case 'g':
         if ((active0 & 0x8000000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 39, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x0L, active1, 0xa00000000000000L, active2, 0xa000L);
      case 'i':
         return jjMoveStringLiteralDfa4_0(active0, 0x4010000000000L, active1, 0x0L, active2, 0x0L);
      case 'k':
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L, active1, 0x0L, active2, 0x0L);
      case 'l':
         if ((active0 & 0x40000000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 42, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000400400001000L, active1, 0x0L, active2, 0x0L);
      case 'm':
         if ((active0 & 0x2000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 25, 42);
         break;
      case 'n':
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0x0L, active2, 0x0L);
      case 'o':
         if ((active0 & 0x100000000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 32, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0xc0000800000000L, active1, 0x0L, active2, 0x0L);
      case 'r':
         if ((active0 & 0x40000L) != 0x0L)
            return jjStartNfaWithStates_0(3, 18, 42);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0x0L, active2, 0x20L);
      case 's':
         return jjMoveStringLiteralDfa4_0(active0, 0x8084000L, active1, 0x0L, active2, 0x0L);
      case 't':
         return jjMoveStringLiteralDfa4_0(active0, 0xa201000100800L, active1, 0x2a00000000000L, active2, 0x0L);
      case 'u':
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0x0L, active2, 0x0L);
      case 'v':
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L, active1, 0x0L, active2, 0x0L);
      case 'w':
         if ((active1 & 0x20000000000000L) != 0x0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x0L, active1, 0x0L, active2, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case '_':
         return jjMoveStringLiteralDfa5_0(active0, 0x0L, active1, 0x0L, active2, 0x2a2L);
      case 'a':
         return jjMoveStringLiteralDfa5_0(active0, 0x181000000000L, active1, 0x0L, active2, 0x8L);
      case 'c':
         return jjMoveStringLiteralDfa5_0(active0, 0xc000000000000L, active1, 0x0L, active2, 0x0L);
      case 'e':
         if ((active0 & 0x8000000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 27, 42);
         else if ((active0 & 0x1000000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 60, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x200400001000L, active1, 0x0L, active2, 0x0L);
      case 'h':
         if ((active0 & 0x20000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 17, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0xa00000000000000L, active2, 0xa000L);
      case 'i':
         return jjMoveStringLiteralDfa5_0(active0, 0x2400000100000L, active1, 0x0L, active2, 0x0L);
      case 'k':
         if ((active0 & 0x2000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 13, 42);
         break;
      case 'l':
         if ((active0 & 0x10000000L) != 0x0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x20800000L, active1, 0x0L, active2, 0x0L);
      case 'n':
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L, active1, 0x0L, active2, 0x0L);
      case 'q':
         if ((active1 & 0x40000000L) != 0x0L)
            return jjStopAtPos(4, 94);
         else if ((active1 & 0x100000000L) != 0x0L)
            return jjStopAtPos(4, 96);
         break;
      case 'r':
         return jjMoveStringLiteralDfa5_0(active0, 0x804800000800L, active1, 0x0L, active2, 0x0L);
      case 's':
         if ((active0 & 0x4000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 14, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0x0L, active2, 0x0L);
      case 't':
         if ((active0 & 0x80000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 19, 42);
         else if ((active0 & 0x40000000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 30, 42);
         else if ((active0 & 0x1000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(4, 48, 42);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0x80000000000000L, active2, 0x800L);
      case 'u':
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L, active1, 0x0L, active2, 0x2000000L);
      case 'v':
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0x0L, active2, 0x0L);
      case 'w':
         if ((active0 & 0x40000000000000L) != 0x0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000000L, active1, 0x2a00000000000L, active2, 0x0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case '_':
         return jjMoveStringLiteralDfa6_0(active0, 0x0L, active1, 0x80000000000000L, active2, 0x800L);
      case 'a':
         return jjMoveStringLiteralDfa6_0(active0, 0x1800L, active1, 0x0L, active2, 0x2a2L);
      case 'c':
         if ((active0 & 0x400000000000L) != 0x0L)
            return jjStartNfaWithStates_0(5, 46, 42);
         else if ((active0 & 0x2000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(5, 49, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L, active1, 0x0L, active2, 0x0L);
      case 'd':
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L, active1, 0x0L, active2, 0x0L);
      case 'e':
         if ((active0 & 0x800000L) != 0x0L)
            return jjStartNfaWithStates_0(5, 23, 42);
         else if ((active0 & 0x10000000000L) != 0x0L)
            return jjStartNfaWithStates_0(5, 40, 42);
         break;
      case 'f':
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0x0L, active2, 0x0L);
      case 'g':
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0x0L, active2, 0x0L);
      case 'h':
         if ((active0 & 0x8000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(5, 51, 42);
         break;
      case 'i':
         return jjMoveStringLiteralDfa6_0(active0, 0x820000000000000L, active1, 0x2a00000000000L, active2, 0x0L);
      case 'l':
         return jjMoveStringLiteralDfa6_0(active0, 0x20200000L, active1, 0x0L, active2, 0x2000000L);
      case 'm':
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L, active1, 0x0L, active2, 0x0L);
      case 'n':
         if ((active0 & 0x800000000000L) != 0x0L)
            return jjStartNfaWithStates_0(5, 47, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000100000L, active1, 0x0L, active2, 0x0L);
      case 'r':
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000000L, active1, 0x0L, active2, 0x0L);
      case 's':
         if ((active0 & 0x80000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(5, 55, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0x0L, active1, 0x0L, active2, 0x8L);
      case 't':
         if ((active0 & 0x800000000L) != 0x0L)
            return jjStartNfaWithStates_0(5, 35, 42);
         return jjMoveStringLiteralDfa6_0(active0, 0x4100000000000L, active1, 0xa00000000000000L, active2, 0xa000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case '_':
         return jjMoveStringLiteralDfa7_0(active0, 0x0L, active1, 0xa00000000000000L, active2, 0xa000L);
      case 'a':
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L, active1, 0x0L, active2, 0x0L);
      case 'c':
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000800L, active1, 0x0L, active2, 0x0L);
      case 'e':
         if ((active0 & 0x80000000000L) != 0x0L)
            return jjStartNfaWithStates_0(6, 43, 42);
         else if ((active0 & 0x100000000000L) != 0x0L)
            return jjStartNfaWithStates_0(6, 44, 42);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000400000000L, active1, 0x0L, active2, 0x0L);
      case 'f':
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000L, active1, 0x0L, active2, 0x0L);
      case 'l':
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000000L, active1, 0x0L, active2, 0x0L);
      case 'n':
         if ((active0 & 0x1000L) != 0x0L)
            return jjStartNfaWithStates_0(6, 12, 42);
         break;
      case 'o':
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0x0L, active2, 0x0L);
      case 's':
         if ((active0 & 0x4000000L) != 0x0L)
            return jjStartNfaWithStates_0(6, 26, 42);
         return jjMoveStringLiteralDfa7_0(active0, 0x0L, active1, 0x82a00000000000L, active2, 0xaaaL);
      case 't':
         if ((active0 & 0x200000L) != 0x0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L, active1, 0x0L, active2, 0x2000000L);
      case 'u':
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L, active1, 0x0L, active2, 0x0L);
      case 'y':
         if ((active0 & 0x20000000L) != 0x0L)
            return jjStartNfaWithStates_0(6, 29, 42);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case ':':
         if ((active2 & 0x2000000L) != 0x0L)
            return jjStopAtPos(7, 153);
         break;
      case 'c':
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000L, active1, 0x0L, active2, 0x0L);
      case 'e':
         if ((active0 & 0x100000L) != 0x0L)
            return jjStartNfaWithStates_0(7, 20, 42);
         else if ((active0 & 0x800000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(7, 59, 42);
         return jjMoveStringLiteralDfa8_0(active0, 0x201000000000L, active1, 0x2a00000000000L, active2, 0x0L);
      case 'h':
         return jjMoveStringLiteralDfa8_0(active0, 0x0L, active1, 0x80000000000000L, active2, 0x800L);
      case 'i':
         return jjMoveStringLiteralDfa8_0(active0, 0x0L, active1, 0x0L, active2, 0x8L);
      case 'n':
         return jjMoveStringLiteralDfa8_0(active0, 0x30000400000000L, active1, 0x0L, active2, 0x0L);
      case 'p':
         if ((active0 & 0x4000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(7, 50, 42);
         break;
      case 's':
         return jjMoveStringLiteralDfa8_0(active0, 0x0L, active1, 0x200000000000000L, active2, 0x22a2L);
      case 't':
         if ((active0 & 0x800L) != 0x0L)
            return jjStartNfaWithStates_0(7, 11, 42);
         break;
      case 'u':
         return jjMoveStringLiteralDfa8_0(active0, 0x0L, active1, 0x800000000000000L, active2, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case '_':
         return jjMoveStringLiteralDfa9_0(active0, 0x0L, active1, 0x2a00000000000L, active2, 0x0L);
      case 'd':
         if ((active0 & 0x200000000000L) != 0x0L)
            return jjStartNfaWithStates_0(8, 45, 42);
         break;
      case 'e':
         if ((active0 & 0x4000000000L) != 0x0L)
            return jjStartNfaWithStates_0(8, 38, 42);
         break;
      case 'g':
         return jjMoveStringLiteralDfa9_0(active0, 0x0L, active1, 0x0L, active2, 0x8L);
      case 'h':
         return jjMoveStringLiteralDfa9_0(active0, 0x0L, active1, 0x200000000000000L, active2, 0x2000L);
      case 'i':
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000000L, active1, 0x80000000000000L, active2, 0xaa2L);
      case 'n':
         return jjMoveStringLiteralDfa9_0(active0, 0x0L, active1, 0x800000000000000L, active2, 0x8000L);
      case 'o':
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L, active1, 0x0L, active2, 0x0L);
      case 't':
         if ((active0 & 0x20000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(8, 53, 42);
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L, active1, 0x0L, active2, 0x0L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, active2);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 'a':
         return jjMoveStringLiteralDfa10_0(active0, 0x0L, active1, 0x200000000000L, active2, 0x0L);
      case 'f':
         if ((active0 & 0x1000000000L) != 0x0L)
            return jjStartNfaWithStates_0(9, 36, 42);
         return jjMoveStringLiteralDfa10_0(active0, 0x0L, active1, 0x80000000000000L, active2, 0x800L);
      case 'g':
         return jjMoveStringLiteralDfa10_0(active0, 0x0L, active1, 0x0L, active2, 0x2a2L);
      case 'i':
         return jjMoveStringLiteralDfa10_0(active0, 0x0L, active1, 0x200000000000000L, active2, 0x2000L);
      case 'n':
         if ((active2 & 0x8L) != 0x0L)
            return jjStopAtPos(9, 131);
         break;
      case 'o':
         return jjMoveStringLiteralDfa10_0(active0, 0x0L, active1, 0x800000000000L, active2, 0x0L);
      case 's':
         if ((active0 & 0x400000000L) != 0x0L)
            return jjStartNfaWithStates_0(9, 34, 42);
         return jjMoveStringLiteralDfa10_0(active0, 0x0L, active1, 0x800000000000000L, active2, 0x8000L);
      case 'x':
         return jjMoveStringLiteralDfa10_0(active0, 0x0L, active1, 0x2000000000000L, active2, 0x0L);
      case 'z':
         return jjMoveStringLiteralDfa10_0(active0, 0x10000000000000L, active1, 0x0L, active2, 0x0L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, active2);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1, active2);
      return 10;
   }
   switch(curChar)
   {
      case 'e':
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000000L, active1, 0x0L, active2, 0x0L);
      case 'f':
         return jjMoveStringLiteralDfa11_0(active0, 0x0L, active1, 0x200000000000000L, active2, 0x2000L);
      case 'i':
         return jjMoveStringLiteralDfa11_0(active0, 0x0L, active1, 0x800000000000000L, active2, 0x8000L);
      case 'n':
         if ((active2 & 0x2L) != 0x0L)
            return jjStopAtPos(10, 129);
         else if ((active2 & 0x20L) != 0x0L)
            return jjStopAtPos(10, 133);
         else if ((active2 & 0x80L) != 0x0L)
            return jjStopAtPos(10, 135);
         else if ((active2 & 0x200L) != 0x0L)
            return jjStopAtPos(10, 137);
         return jjMoveStringLiteralDfa11_0(active0, 0x0L, active1, 0x200000000000L, active2, 0x0L);
      case 'o':
         return jjMoveStringLiteralDfa11_0(active0, 0x0L, active1, 0x2000000000000L, active2, 0x0L);
      case 'r':
         if ((active1 & 0x800000000000L) != 0x0L)
            return jjStopAtPos(10, 111);
         break;
      case 't':
         if ((active1 & 0x80000000000000L) != 0x0L)
         {
            jjmatchedKind = 119;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x0L, active1, 0x0L, active2, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1, active2);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1, active2);
      return 11;
   }
   switch(curChar)
   {
      case '_':
         return jjMoveStringLiteralDfa12_0(active0, 0x0L, active1, 0x0L, active2, 0x800L);
      case 'd':
         if ((active0 & 0x10000000000000L) != 0x0L)
            return jjStartNfaWithStates_0(11, 52, 42);
         else if ((active1 & 0x200000000000L) != 0x0L)
            return jjStopAtPos(11, 109);
         break;
      case 'g':
         return jjMoveStringLiteralDfa12_0(active0, 0x0L, active1, 0x800000000000000L, active2, 0x8000L);
      case 'r':
         if ((active1 & 0x2000000000000L) != 0x0L)
            return jjStopAtPos(11, 113);
         break;
      case 't':
         if ((active1 & 0x200000000000000L) != 0x0L)
         {
            jjmatchedKind = 121;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x0L, active1, 0x0L, active2, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1, active2);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1, long old2, long active2){
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(10, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1, active2);
      return 12;
   }
   switch(curChar)
   {
      case '_':
         return jjMoveStringLiteralDfa13_0(active1, 0x0L, active2, 0x2000L);
      case 'a':
         return jjMoveStringLiteralDfa13_0(active1, 0x0L, active2, 0x800L);
      case 'n':
         return jjMoveStringLiteralDfa13_0(active1, 0x800000000000000L, active2, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(11, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, active2);
      return 13;
   }
   switch(curChar)
   {
      case 'a':
         return jjMoveStringLiteralDfa14_0(active1, 0x0L, active2, 0x2000L);
      case 'e':
         return jjMoveStringLiteralDfa14_0(active1, 0x800000000000000L, active2, 0x8000L);
      case 's':
         return jjMoveStringLiteralDfa14_0(active1, 0x0L, active2, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(12, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, active2);
      return 14;
   }
   switch(curChar)
   {
      case 'd':
         return jjMoveStringLiteralDfa15_0(active1, 0x800000000000000L, active2, 0x8000L);
      case 's':
         return jjMoveStringLiteralDfa15_0(active1, 0x0L, active2, 0x2800L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(13, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, active2);
      return 15;
   }
   switch(curChar)
   {
      case '_':
         return jjMoveStringLiteralDfa16_0(active1, 0x800000000000000L, active2, 0x8000L);
      case 'i':
         return jjMoveStringLiteralDfa16_0(active1, 0x0L, active2, 0x800L);
      case 's':
         return jjMoveStringLiteralDfa16_0(active1, 0x0L, active2, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa16_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(14, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, active2);
      return 16;
   }
   switch(curChar)
   {
      case 'g':
         return jjMoveStringLiteralDfa17_0(active1, 0x0L, active2, 0x800L);
      case 'i':
         return jjMoveStringLiteralDfa17_0(active1, 0x0L, active2, 0x2000L);
      case 's':
         return jjMoveStringLiteralDfa17_0(active1, 0x800000000000000L, active2, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa17_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(15, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1, active2);
      return 17;
   }
   switch(curChar)
   {
      case 'g':
         return jjMoveStringLiteralDfa18_0(active1, 0x0L, active2, 0x2000L);
      case 'h':
         return jjMoveStringLiteralDfa18_0(active1, 0x800000000000000L, active2, 0x8000L);
      case 'n':
         if ((active2 & 0x800L) != 0x0L)
            return jjStopAtPos(17, 139);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa18_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(16, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, 0L, active1, active2);
      return 18;
   }
   switch(curChar)
   {
      case 'i':
         return jjMoveStringLiteralDfa19_0(active1, 0x800000000000000L, active2, 0x8000L);
      case 'n':
         if ((active2 & 0x2000L) != 0x0L)
            return jjStopAtPos(18, 141);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa19_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(17, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, 0L, active1, active2);
      return 19;
   }
   switch(curChar)
   {
      case 'f':
         return jjMoveStringLiteralDfa20_0(active1, 0x800000000000000L, active2, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(18, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa20_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(18, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, 0L, active1, active2);
      return 20;
   }
   switch(curChar)
   {
      case 't':
         if ((active1 & 0x800000000000000L) != 0x0L)
         {
            jjmatchedKind = 123;
            jjmatchedPos = 20;
         }
         return jjMoveStringLiteralDfa21_0(active1, 0x0L, active2, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(19, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa21_0(long old1, long active1, long old2, long active2){
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(19, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, 0L, 0L, active2);
      return 21;
   }
   switch(curChar)
   {
      case '_':
         return jjMoveStringLiteralDfa22_0(active2, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(20, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa22_0(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(20, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, 0L, 0L, active2);
      return 22;
   }
   switch(curChar)
   {
      case 'a':
         return jjMoveStringLiteralDfa23_0(active2, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(21, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa23_0(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(21, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, 0L, 0L, active2);
      return 23;
   }
   switch(curChar)
   {
      case 's':
         return jjMoveStringLiteralDfa24_0(active2, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(22, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa24_0(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(22, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, 0L, 0L, active2);
      return 24;
   }
   switch(curChar)
   {
      case 's':
         return jjMoveStringLiteralDfa25_0(active2, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(23, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa25_0(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(23, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, 0L, 0L, active2);
      return 25;
   }
   switch(curChar)
   {
      case 'i':
         return jjMoveStringLiteralDfa26_0(active2, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(24, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa26_0(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(24, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, 0L, 0L, active2);
      return 26;
   }
   switch(curChar)
   {
      case 'g':
         return jjMoveStringLiteralDfa27_0(active2, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(25, 0L, 0L, active2);
}
private int jjMoveStringLiteralDfa27_0(long old2, long active2){
   if (((active2 &= old2)) == 0L)
      return jjStartNfa_0(25, 0L, 0L, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, 0L, 0L, active2);
      return 27;
   }
   switch(curChar)
   {
      case 'n':
         if ((active2 & 0x8000L) != 0x0L)
            return jjStopAtPos(27, 143);
         break;
      default :
         break;
   }
   return jjStartNfa_0(26, 0L, 0L, active2);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 86;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 86:
                  if ((0x97ffffbfffffdbffL & l) != 0x0L)
                     { jjCheckNAddStates(0, 3); }
                  else if (curChar == 62)
                  {
                     if (kind > 7)
                        kind = 7;
                     { jjCheckNAdd(7); }
                  }
                  else if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 64:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 79;
                  else if (curChar == 47)
                  {
                     if (kind > 8)
                        kind = 8;
                     { jjCheckNAddStates(4, 6); }
                  }
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(70, 71); }
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 1:
                  if ((0x1ffffffffL & l) != 0x0L)
                  {
                     if (kind > 6)
                        kind = 6;
                     { jjCheckNAdd(0); }
                  }
                  else if ((0x3ff000000000000L & l) != 0x0L)
                     { jjCheckNAddStates(7, 12); }
                  else if (curChar == 47)
                     { jjAddStates(13, 16); }
                  else if (curChar == 36)
                  {
                     if (kind > 73)
                        kind = 73;
                     { jjCheckNAdd(42); }
                  }
                  else if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 39)
                     { jjCheckNAddStates(17, 19); }
                  else if (curChar == 46)
                     { jjCheckNAdd(18); }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 60)
                     { jjCheckNAddStates(0, 3); }
                  if ((0x3fe000000000000L & l) != 0x0L)
                  {
                     if (kind > 61)
                        kind = 61;
                     { jjCheckNAddTwoStates(15, 16); }
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 61)
                        kind = 61;
                     { jjCheckNAddStates(20, 23); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 0:
                  if ((0x1ffffffffL & l) == 0x0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAdd(0); }
                  break;
               case 2:
                  if ((0x97ffffbfffffdbffL & l) != 0x0L)
                     { jjCheckNAddStates(0, 3); }
                  break;
               case 3:
                  if (curChar == 32)
                     { jjCheckNAddStates(0, 3); }
                  break;
               case 4:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 44)
                     { jjCheckNAddStates(0, 3); }
                  break;
               case 6:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar != 62)
                     break;
                  if (kind > 7)
                     kind = 7;
                  { jjCheckNAdd(7); }
                  break;
               case 8:
                  if (curChar == 33)
                     { jjCheckNAddStates(27, 29); }
                  break;
               case 9:
                  if ((0xffffffffffffdbffL & l) != 0x0L)
                     { jjCheckNAddStates(27, 29); }
                  break;
               case 10:
                  if ((0x2400L & l) != 0x0L && kind > 9)
                     kind = 9;
                  break;
               case 11:
                  if (curChar == 10 && kind > 9)
                     kind = 9;
                  break;
               case 12:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 14:
                  if ((0x3fe000000000000L & l) == 0x0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 17:
                  if (curChar == 46)
                     { jjCheckNAdd(18); }
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAddStates(30, 32); }
                  break;
               case 20:
                  if ((0x280000000000L & l) != 0x0L)
                     { jjCheckNAdd(21); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAddTwoStates(21, 22); }
                  break;
               case 23:
                  if (curChar == 39)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 24:
                  if ((0xffffff7fffffdbffL & l) != 0x0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 26:
                  { jjCheckNAddStates(17, 19); }
                  break;
               case 27:
                  if (curChar == 39 && kind > 69)
                     kind = 69;
                  break;
               case 28:
                  if (curChar == 34)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 29:
                  if ((0xfffffffbffffdbffL & l) != 0x0L)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 31:
                  { jjCheckNAddStates(24, 26); }
                  break;
               case 32:
                  if (curChar == 34 && kind > 70)
                     kind = 70;
                  break;
               case 33:
               case 35:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(34, 38); }
                  break;
               case 34:
                  if ((0xfffffffbffffffffL & l) != 0x0L)
                     { jjCheckNAddStates(33, 35); }
                  break;
               case 36:
                  if (curChar == 34 && kind > 71)
                     kind = 71;
                  break;
               case 37:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 38:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 40:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar != 36)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAdd(42); }
                  break;
               case 42:
                  if ((0x3ff001000000000L & l) == 0x0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAdd(42); }
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0x0L)
                     { jjCheckNAddStates(7, 12); }
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0x0L)
                     { jjCheckNAddTwoStates(44, 45); }
                  break;
               case 45:
                  if (curChar != 46)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAddStates(36, 38); }
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAddStates(36, 38); }
                  break;
               case 48:
                  if ((0x280000000000L & l) != 0x0L)
                     { jjCheckNAdd(49); }
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAddTwoStates(49, 22); }
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0x0L)
                     { jjCheckNAddTwoStates(50, 51); }
                  break;
               case 52:
                  if ((0x280000000000L & l) != 0x0L)
                     { jjCheckNAdd(53); }
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAddTwoStates(53, 22); }
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0x0L)
                     { jjCheckNAddTwoStates(54, 55); }
                  break;
               case 56:
                  if (curChar != 48)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAddStates(20, 23); }
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAddTwoStates(58, 16); }
                  break;
               case 60:
                  if ((0x3000000000000L & l) == 0x0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAddStates(39, 41); }
                  break;
               case 61:
                  if ((0x3000000000000L & l) == 0x0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAdd(16); }
                  break;
               case 62:
                  if ((0xff000000000000L & l) == 0x0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAddTwoStates(62, 16); }
                  break;
               case 63:
                  if (curChar == 47)
                     { jjAddStates(13, 16); }
                  break;
               case 65:
                  if ((0xffffffffffffdbffL & l) == 0x0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjCheckNAddStates(4, 6); }
                  break;
               case 66:
                  if ((0x2400L & l) != 0x0L && kind > 8)
                     kind = 8;
                  break;
               case 67:
                  if (curChar == 10 && kind > 8)
                     kind = 8;
                  break;
               case 68:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(70, 75); }
                  break;
               case 70:
                  if ((0xfffffbffffffffffL & l) != 0x0L)
                     { jjCheckNAddTwoStates(70, 71); }
                  break;
               case 71:
                  if (curChar == 42)
                     { jjCheckNAddStates(42, 44); }
                  break;
               case 72:
                  if ((0xffff7bffffffffffL & l) != 0x0L)
                     { jjCheckNAddTwoStates(73, 71); }
                  break;
               case 73:
                  if ((0xfffffbffffffffffL & l) != 0x0L)
                     { jjCheckNAddTwoStates(73, 71); }
                  break;
               case 74:
                  if (curChar == 47 && kind > 10)
                     kind = 10;
                  break;
               case 75:
                  if (curChar == 42)
                     { jjCheckNAddStates(45, 49); }
                  break;
               case 76:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 77:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(70, 71); }
                  break;
               case 79:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(80, 81); }
                  break;
               case 80:
                  if ((0xfffffbffffffffffL & l) != 0x0L)
                     { jjCheckNAddTwoStates(80, 81); }
                  break;
               case 81:
                  if (curChar == 42)
                     { jjCheckNAddStates(50, 52); }
                  break;
               case 82:
                  if ((0xffff7bffffffffffL & l) != 0x0L)
                     { jjCheckNAddTwoStates(83, 81); }
                  break;
               case 83:
                  if ((0xfffffbffffffffffL & l) != 0x0L)
                     { jjCheckNAddTwoStates(83, 81); }
                  break;
               case 84:
                  if (curChar == 47 && kind > 72)
                     kind = 72;
                  break;
               case 85:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 86:
               case 2:
                  if ((0xefffffffffffffffL & l) != 0x0L)
                     { jjCheckNAddStates(0, 3); }
                  break;
               case 1:
               case 42:
                  if ((0x7fffffe87fffffeL & l) == 0x0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAdd(42); }
                  break;
               case 9:
                  { jjAddStates(27, 29); }
                  break;
               case 15:
                  if (curChar != 95)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAddTwoStates(15, 16); }
                  break;
               case 16:
                  if ((0x88920000889200L & l) != 0x0L && kind > 61)
                     kind = 61;
                  break;
               case 19:
                  if ((0x2000000020L & l) != 0x0L)
                     { jjAddStates(53, 54); }
                  break;
               case 22:
                  if ((0x80005000800050L & l) != 0x0L && kind > 66)
                     kind = 66;
                  break;
               case 24:
                  if ((0xffffffffefffffffL & l) != 0x0L)
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 25:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  { jjCheckNAddStates(17, 19); }
                  break;
               case 29:
                  if ((0xffffffffefffffffL & l) != 0x0L)
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 30:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  { jjCheckNAddStates(24, 26); }
                  break;
               case 34:
                  { jjAddStates(33, 35); }
                  break;
               case 47:
                  if ((0x2000000020L & l) != 0x0L)
                     { jjAddStates(55, 56); }
                  break;
               case 51:
                  if ((0x2000000020L & l) != 0x0L)
                     { jjAddStates(57, 58); }
                  break;
               case 55:
                  if ((0x5000000050L & l) != 0x0L && kind > 66)
                     kind = 66;
                  break;
               case 57:
                  if ((0x100000001000000L & l) != 0x0L)
                     { jjCheckNAdd(58); }
                  break;
               case 58:
                  if ((0x7e8000007eL & l) == 0x0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAddTwoStates(58, 16); }
                  break;
               case 59:
                  if ((0x400000004L & l) == 0x0L)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAddStates(39, 41); }
                  break;
               case 60:
                  if (curChar != 95)
                     break;
                  if (kind > 61)
                     kind = 61;
                  { jjCheckNAddStates(39, 41); }
                  break;
               case 65:
                  if (kind > 8)
                     kind = 8;
                  { jjAddStates(4, 6); }
                  break;
               case 70:
                  { jjCheckNAddTwoStates(70, 71); }
                  break;
               case 72:
               case 73:
                  { jjCheckNAddTwoStates(73, 71); }
                  break;
               case 80:
                  { jjCheckNAddTwoStates(80, 81); }
                  break;
               case 82:
               case 83:
                  { jjCheckNAddTwoStates(83, 81); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 86:
               case 2:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(0, 3); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 6)
                        kind = 6;
                     { jjCheckNAdd(0); }
                  }
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 73)
                        kind = 73;
                     { jjCheckNAdd(42); }
                  }
                  break;
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAdd(0); }
                  break;
               case 9:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(27, 29); }
                  break;
               case 24:
               case 26:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(17, 19); }
                  break;
               case 29:
               case 31:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddStates(24, 26); }
                  break;
               case 34:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjAddStates(33, 35); }
                  break;
               case 41:
               case 42:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 73)
                     kind = 73;
                  { jjCheckNAdd(42); }
                  break;
               case 65:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 8)
                     kind = 8;
                  { jjAddStates(4, 6); }
                  break;
               case 70:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(70, 71); }
                  break;
               case 72:
               case 73:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(73, 71); }
                  break;
               case 80:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(80, 81); }
                  break;
               case 82:
               case 83:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(83, 81); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      i = jjnewStateCnt;
      jjnewStateCnt = startsAt;
      startsAt = 86 - jjnewStateCnt;
      if (i == startsAt)
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(final java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, 
"\141\142\163\164\162\141\143\164", "\142\157\157\154\145\141\156", "\142\162\145\141\153", "\143\154\141\163\163", 
"\142\171\164\145", "\143\141\163\145", "\143\141\164\143\150", "\143\150\141\162", 
"\143\157\156\163\164", "\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\157", 
"\144\157\165\142\154\145", "\145\154\163\145", "\145\156\165\155", "\145\170\164\145\156\144\163", 
"\146\141\154\163\145", "\146\151\156\141\154", "\146\151\156\141\154\154\171", "\146\154\157\141\164", 
"\146\157\162", "\147\157\164\157", "\151\146", "\151\155\160\154\145\155\145\156\164\163", 
"\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", "\151\156\164", 
"\151\156\164\145\162\146\141\143\145", "\154\157\156\147", "\156\141\164\151\166\145", "\156\145\167", 
"\156\165\154\154", "\160\141\143\153\141\147\145", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\162\145\164\165\162\156", "\163\150\157\162\164", 
"\163\164\141\164\151\143", "\163\164\162\151\143\164\146\160", "\163\167\151\164\143\150", 
"\163\171\156\143\150\162\157\156\151\172\145\144", "\164\162\141\156\163\151\145\156\164", "\164\150\162\157\167", 
"\164\150\162\157\167\163", "\164\162\165\145", "\164\162\171", "\166\157\151\144", 
"\166\157\154\141\164\151\154\145", "\167\150\151\154\145", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\50", "\51", "\173", "\175", "\133", "\135", 
"\73", "\54", "\56", "\75", "\76", "\100\147\164", "\74", "\100\154\164", "\41", 
"\176", "\75\75", "\74\75", "\100\154\164\145\161", "\76\75", "\100\147\164\145\161", 
"\41\75", "\174\174", "\100\157\162", "\46\46", "\100\141\156\144", "\53\53", "\55\55", 
"\53", "\55", "\52", "\57", "\46", "\100\142\151\164\167\151\163\145\137\141\156\144", 
"\174", "\100\142\151\164\167\151\163\145\137\157\162", "\136", 
"\100\142\151\164\167\151\163\145\137\170\157\162", "\45", "\100\155\157\144", "\52\52", "\100\160\157\167", "\74\74", 
"\100\154\145\146\164\137\163\150\151\146\164", "\76\76", "\100\162\151\147\150\164\137\163\150\151\146\164", "\76\76\76", 
"\100\162\151\147\150\164\137\165\156\163\151\147\156\145\144\137\163\150\151\146\164", "\53\75", "\55\75", "\52\75", "\57\75", "\46\75", 
"\100\141\156\144\137\141\163\163\151\147\156", "\174\75", "\100\157\162\137\141\163\163\151\147\156", "\136\75", 
"\100\170\157\162\137\141\163\163\151\147\156", "\45\75", "\100\155\157\144\137\141\163\163\151\147\156", "\52\52\75", 
"\100\160\157\167\137\141\163\163\151\147\156", "\74\74\75", 
"\100\154\145\146\164\137\163\150\151\146\164\137\141\163\163\151\147\156", "\76\76\75", 
"\100\162\151\147\150\164\137\163\150\151\146\164\137\141\163\163\151\147\156", "\76\76\76\75", 
"\100\162\151\147\150\164\137\165\156\163\151\147\156\145\144\137\163\150\151\146\164\137\141\163\163\151\147\156", "\55\76", "\74\75\76", "\77\77\75", "\77\77", "\77\72", "\77", "\72", 
"\56\56\56", "\77\56", "\144\145\146\141\165\154\164\72", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = im == null ? input_stream.getImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   2, 4, 6, 7, 65, 66, 68, 44, 45, 50, 51, 54, 55, 64, 77, 78, 
   85, 24, 25, 27, 57, 59, 62, 16, 29, 30, 32, 9, 10, 12, 18, 19, 
   22, 34, 35, 38, 46, 47, 22, 60, 61, 16, 71, 72, 74, 70, 71, 72, 
   74, 75, 81, 82, 84, 20, 21, 48, 49, 52, 53, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         if ((jjbitVec1[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default :
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop:
  for (;;)
  {
   try
   {
      curChar = input_stream.beginToken();
   }
   catch(final Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try {
     input_stream.readChar();
     input_stream.backup(1);
   }
   catch (final java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.getImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.getImage();
   }
   throw new TokenMgrException(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrException.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ParserTokenManager(JavaCharStream stream){
    input_stream = stream;
  }

  /** Constructor. */
  public ParserTokenManager (JavaCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(JavaCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 86; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(JavaCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrException("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrException.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x3ffffffffffff801L, 0xfffffffffffff3e4L, 0x3ffffffL, 
};
static final long[] jjtoSkip = {
   0x7feL, 0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x700L, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 0x0L, 
};
    protected JavaCharStream  input_stream;

    private final int[] jjrounds = new int[86];
    private final int[] jjstateSet = new int[2 * 86];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
