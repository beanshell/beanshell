/* Generated by:  JJTree&ParserGeneratorCC: Do not edit this line. ParserConstants.java */
/*****************************************************************************
 * Licensed to the Apache Software Foundation (ASF) under one                *
 * or more contributor license agreements.  See the NOTICE file              *
 * distributed with this work for additional information                     *
 * regarding copyright ownership.  The ASF licenses this file                *
 * to you under the Apache License, Version 2.0 (the                         *
 * "License"); you may not use this file except in compliance                *
 * with the License.  You may obtain a copy of the License at                *
 *                                                                           *
 *     http://www.apache.org/licenses/LICENSE-2.0                            *
 *                                                                           *
 * Unless required by applicable law or agreed to in writing,                *
 * software distributed under the License is distributed on an               *
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY                    *
 * KIND, either express or implied.  See the License for the                 *
 * specific language governing permissions and limitations                   *
 * under the License.                                                        *
 *                                                                           *
 *                                                                           *
 * This file is part of the BeanShell Java Scripting distribution.           *
 * Documentation and updates may be found at http://www.beanshell.org/       *
 * Patrick Niemeyer (pat@pat.net)                                            *
 * Author of Learning Java, O'Reilly & Associates                            *
 *                                                                           *
 *****************************************************************************/
package bsh.legacy;


/**
 * Token literal values and constants.
 * Generated by com.helger.pgcc.output.java.OtherFilesGenJava#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int NONPRINTABLE = 6;
  /** RegularExpression Id. */
  int TYPE_PARAMATERS = 7;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int HASH_BANG_COMMENT = 9;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 10;
  /** RegularExpression Id. */
  int ABSTRACT = 11;
  /** RegularExpression Id. */
  int BOOLEAN = 12;
  /** RegularExpression Id. */
  int BREAK = 13;
  /** RegularExpression Id. */
  int CLASS = 14;
  /** RegularExpression Id. */
  int BYTE = 15;
  /** RegularExpression Id. */
  int CASE = 16;
  /** RegularExpression Id. */
  int CATCH = 17;
  /** RegularExpression Id. */
  int CHAR = 18;
  /** RegularExpression Id. */
  int CONST = 19;
  /** RegularExpression Id. */
  int CONTINUE = 20;
  /** RegularExpression Id. */
  int _DEFAULT = 21;
  /** RegularExpression Id. */
  int DO = 22;
  /** RegularExpression Id. */
  int DOUBLE = 23;
  /** RegularExpression Id. */
  int ELSE = 24;
  /** RegularExpression Id. */
  int ENUM = 25;
  /** RegularExpression Id. */
  int EXTENDS = 26;
  /** RegularExpression Id. */
  int FALSE = 27;
  /** RegularExpression Id. */
  int FINAL = 28;
  /** RegularExpression Id. */
  int FINALLY = 29;
  /** RegularExpression Id. */
  int FLOAT = 30;
  /** RegularExpression Id. */
  int FOR = 31;
  /** RegularExpression Id. */
  int GOTO = 32;
  /** RegularExpression Id. */
  int IF = 33;
  /** RegularExpression Id. */
  int IMPLEMENTS = 34;
  /** RegularExpression Id. */
  int IMPORT = 35;
  /** RegularExpression Id. */
  int INSTANCEOF = 36;
  /** RegularExpression Id. */
  int INT = 37;
  /** RegularExpression Id. */
  int INTERFACE = 38;
  /** RegularExpression Id. */
  int LONG = 39;
  /** RegularExpression Id. */
  int NATIVE = 40;
  /** RegularExpression Id. */
  int NEW = 41;
  /** RegularExpression Id. */
  int NULL = 42;
  /** RegularExpression Id. */
  int PACKAGE = 43;
  /** RegularExpression Id. */
  int PRIVATE = 44;
  /** RegularExpression Id. */
  int PROTECTED = 45;
  /** RegularExpression Id. */
  int PUBLIC = 46;
  /** RegularExpression Id. */
  int RETURN = 47;
  /** RegularExpression Id. */
  int SHORT = 48;
  /** RegularExpression Id. */
  int STATIC = 49;
  /** RegularExpression Id. */
  int STRICTFP = 50;
  /** RegularExpression Id. */
  int SWITCH = 51;
  /** RegularExpression Id. */
  int SYNCHRONIZED = 52;
  /** RegularExpression Id. */
  int TRANSIENT = 53;
  /** RegularExpression Id. */
  int THROW = 54;
  /** RegularExpression Id. */
  int THROWS = 55;
  /** RegularExpression Id. */
  int TRUE = 56;
  /** RegularExpression Id. */
  int TRY = 57;
  /** RegularExpression Id. */
  int VOID = 58;
  /** RegularExpression Id. */
  int VOLATILE = 59;
  /** RegularExpression Id. */
  int WHILE = 60;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 61;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 62;
  /** RegularExpression Id. */
  int HEX_LITERAL = 63;
  /** RegularExpression Id. */
  int BINARY_LITERAL = 64;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 65;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 66;
  /** RegularExpression Id. */
  int EXPONENT = 67;
  /** RegularExpression Id. */
  int ESCAPE = 68;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 69;
  /** RegularExpression Id. */
  int STRING_LITERAL = 70;
  /** RegularExpression Id. */
  int LONG_STRING_LITERAL = 71;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 72;
  /** RegularExpression Id. */
  int IDENTIFIER = 73;
  /** RegularExpression Id. */
  int LETTER = 74;
  /** RegularExpression Id. */
  int DIGIT = 75;
  /** RegularExpression Id. */
  int LPAREN = 76;
  /** RegularExpression Id. */
  int RPAREN = 77;
  /** RegularExpression Id. */
  int LBRACE = 78;
  /** RegularExpression Id. */
  int RBRACE = 79;
  /** RegularExpression Id. */
  int LBRACKET = 80;
  /** RegularExpression Id. */
  int RBRACKET = 81;
  /** RegularExpression Id. */
  int SEMICOLON = 82;
  /** RegularExpression Id. */
  int COMMA = 83;
  /** RegularExpression Id. */
  int DOT = 84;
  /** RegularExpression Id. */
  int ASSIGN = 85;
  /** RegularExpression Id. */
  int GT = 86;
  /** RegularExpression Id. */
  int GTX = 87;
  /** RegularExpression Id. */
  int LT = 88;
  /** RegularExpression Id. */
  int LTX = 89;
  /** RegularExpression Id. */
  int BANG = 90;
  /** RegularExpression Id. */
  int TILDE = 91;
  /** RegularExpression Id. */
  int EQ = 92;
  /** RegularExpression Id. */
  int LE = 93;
  /** RegularExpression Id. */
  int LEX = 94;
  /** RegularExpression Id. */
  int GE = 95;
  /** RegularExpression Id. */
  int GEX = 96;
  /** RegularExpression Id. */
  int NE = 97;
  /** RegularExpression Id. */
  int BOOL_OR = 98;
  /** RegularExpression Id. */
  int BOOL_ORX = 99;
  /** RegularExpression Id. */
  int BOOL_AND = 100;
  /** RegularExpression Id. */
  int BOOL_ANDX = 101;
  /** RegularExpression Id. */
  int INCR = 102;
  /** RegularExpression Id. */
  int DECR = 103;
  /** RegularExpression Id. */
  int PLUS = 104;
  /** RegularExpression Id. */
  int MINUS = 105;
  /** RegularExpression Id. */
  int STAR = 106;
  /** RegularExpression Id. */
  int SLASH = 107;
  /** RegularExpression Id. */
  int BIT_AND = 108;
  /** RegularExpression Id. */
  int BIT_ANDX = 109;
  /** RegularExpression Id. */
  int BIT_OR = 110;
  /** RegularExpression Id. */
  int BIT_ORX = 111;
  /** RegularExpression Id. */
  int XOR = 112;
  /** RegularExpression Id. */
  int XORX = 113;
  /** RegularExpression Id. */
  int MOD = 114;
  /** RegularExpression Id. */
  int MODX = 115;
  /** RegularExpression Id. */
  int POWER = 116;
  /** RegularExpression Id. */
  int POWERX = 117;
  /** RegularExpression Id. */
  int LSHIFT = 118;
  /** RegularExpression Id. */
  int LSHIFTX = 119;
  /** RegularExpression Id. */
  int RSIGNEDSHIFT = 120;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTX = 121;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFT = 122;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTX = 123;
  /** RegularExpression Id. */
  int PLUSASSIGN = 124;
  /** RegularExpression Id. */
  int MINUSASSIGN = 125;
  /** RegularExpression Id. */
  int STARASSIGN = 126;
  /** RegularExpression Id. */
  int SLASHASSIGN = 127;
  /** RegularExpression Id. */
  int ANDASSIGN = 128;
  /** RegularExpression Id. */
  int ANDASSIGNX = 129;
  /** RegularExpression Id. */
  int ORASSIGN = 130;
  /** RegularExpression Id. */
  int ORASSIGNX = 131;
  /** RegularExpression Id. */
  int XORASSIGN = 132;
  /** RegularExpression Id. */
  int XORASSIGNX = 133;
  /** RegularExpression Id. */
  int MODASSIGN = 134;
  /** RegularExpression Id. */
  int MODASSIGNX = 135;
  /** RegularExpression Id. */
  int POWERASSIGN = 136;
  /** RegularExpression Id. */
  int POWERASSIGNX = 137;
  /** RegularExpression Id. */
  int LSHIFTASSIGN = 138;
  /** RegularExpression Id. */
  int LSHIFTASSIGNX = 139;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGN = 140;
  /** RegularExpression Id. */
  int RSIGNEDSHIFTASSIGNX = 141;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGN = 142;
  /** RegularExpression Id. */
  int RUNSIGNEDSHIFTASSIGNX = 143;
  /** RegularExpression Id. */
  int ARROW = 144;
  /** RegularExpression Id. */
  int SPACESHIP = 145;
  /** RegularExpression Id. */
  int NULLCOALESCEASSIGN = 146;
  /** RegularExpression Id. */
  int NULLCOALESCE = 147;
  /** RegularExpression Id. */
  int ELVIS = 148;
  /** RegularExpression Id. */
  int HOOK = 149;
  /** RegularExpression Id. */
  int COLON = 150;
  /** RegularExpression Id. */
  int ELLIPSIS = 151;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"\\n\"",
    "<NONPRINTABLE>",
    "<TYPE_PARAMATERS>",
    "<SINGLE_LINE_COMMENT>",
    "<HASH_BANG_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\"abstract\"",
    "\"boolean\"",
    "\"break\"",
    "\"class\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"enum\"",
    "\"extends\"",
    "\"false\"",
    "\"final\"",
    "\"finally\"",
    "\"float\"",
    "\"for\"",
    "\"goto\"",
    "\"if\"",
    "\"implements\"",
    "\"import\"",
    "\"instanceof\"",
    "\"int\"",
    "\"interface\"",
    "\"long\"",
    "\"native\"",
    "\"new\"",
    "\"null\"",
    "\"package\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"return\"",
    "\"short\"",
    "\"static\"",
    "\"strictfp\"",
    "\"switch\"",
    "\"synchronized\"",
    "\"transient\"",
    "\"throw\"",
    "\"throws\"",
    "\"true\"",
    "\"try\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<BINARY_LITERAL>",
    "<OCTAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<ESCAPE>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<LONG_STRING_LITERAL>",
    "<FORMAL_COMMENT>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\">\"",
    "\"@gt\"",
    "\"<\"",
    "\"@lt\"",
    "\"!\"",
    "\"~\"",
    "\"==\"",
    "\"<=\"",
    "\"@lteq\"",
    "\">=\"",
    "\"@gteq\"",
    "\"!=\"",
    "\"||\"",
    "\"@or\"",
    "\"&&\"",
    "\"@and\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"@bitwise_and\"",
    "\"|\"",
    "\"@bitwise_or\"",
    "\"^\"",
    "\"@bitwise_xor\"",
    "\"%\"",
    "\"@mod\"",
    "\"**\"",
    "\"@pow\"",
    "\"<<\"",
    "\"@left_shift\"",
    "\">>\"",
    "\"@right_shift\"",
    "\">>>\"",
    "\"@right_unsigned_shift\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"@and_assign\"",
    "\"|=\"",
    "\"@or_assign\"",
    "\"^=\"",
    "\"@xor_assign\"",
    "\"%=\"",
    "\"@mod_assign\"",
    "\"**=\"",
    "\"@pow_assign\"",
    "\"<<=\"",
    "\"@left_shift_assign\"",
    "\">>=\"",
    "\"@right_shift_assign\"",
    "\">>>=\"",
    "\"@right_unsigned_shift_assign\"",
    "\"->\"",
    "\"<=>\"",
    "\"??=\"",
    "\"??\"",
    "\"?:\"",
    "\"?\"",
    "\":\"",
    "\"...\"",
    "\"?.\"",
    "\"default:\"",
  };

}
